# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    AutoresponderConnectionFields,
    AutoresponderFields,
    BillingPlanConnectionFields,
    BillingRotaFields,
    BillingSubscriptionFields,
    BusinessHoursFields,
    BusinessHoursSlotFields,
    ChatAppConnectionFields,
    ChatAppFields,
    ChatAppHiddenSecretFields,
    CompanyConnectionFields,
    CompanyFields,
    CompanySearchResultConnectionFields,
    ConnectedSlackChannelConnectionFields,
    ConnectedSlackChannelFields,
    CustomerCardConfigFields,
    CustomerCardInstanceInterface,
    CustomerConnectionFields,
    CustomerFields,
    CustomerGroupConnectionFields,
    CustomerGroupFields,
    CustomerSearchConnectionFields,
    EmailSignatureFields,
    FavoritePageConnectionFields,
    GeneratedReplyFields,
    IndexedDocumentConnectionFields,
    JiraIntegrationTokenFields,
    LabelTypeConnectionFields,
    LabelTypeFields,
    LinearIntegrationTokenFields,
    MachineUserConnectionFields,
    MachineUserFields,
    PaymentMethodFields,
    PermissionsFields,
    RoleConnectionFields,
    SavedThreadsViewConnectionFields,
    SavedThreadsViewFields,
    ServiceAuthorizationConnectionFields,
    ServiceAuthorizationFields,
    SingleValueMetricFields,
    SlackUserConnectionFields,
    SlackUserFields,
    SnippetConnectionFields,
    SnippetFields,
    SubscriptionEventTypeFields,
    TenantConnectionFields,
    TenantFields,
    TenantSearchResultConnectionFields,
    ThreadClusterFields,
    ThreadConnectionFields,
    ThreadDiscussionFields,
    ThreadFields,
    ThreadFieldSchemaConnectionFields,
    ThreadFieldSchemaFields,
    ThreadLinkGroupConnectionFields,
    ThreadSearchResultConnectionFields,
    ThreadWithDistanceFields,
    TierConnectionFields,
    TierFields,
    TimelineEntryConnectionFields,
    TimelineEntryFields,
    TimeSeriesMetricFields,
    UserAccountFields,
    UserAuthSlackInstallationInfoFields,
    UserAuthSlackIntegrationFields,
    UserConnectionFields,
    UserFields,
    UserLinearInstallationInfoFields,
    UserLinearIntegrationFields,
    UserMSTeamsInstallationInfoFields,
    UserMSTeamsIntegrationFields,
    UserSlackInstallationInfoFields,
    UserSlackIntegrationFields,
    WebhookTargetConnectionFields,
    WebhookTargetFields,
    WebhookVersionConnectionFields,
    WorkflowRuleConnectionFields,
    WorkflowRuleFields,
    WorkspaceChatSettingsFields,
    WorkspaceConnectionFields,
    WorkspaceDiscordChannelInstallationInfoFields,
    WorkspaceDiscordChannelIntegrationConnectionFields,
    WorkspaceDiscordChannelIntegrationFields,
    WorkspaceDiscordIntegrationConnectionFields,
    WorkspaceDiscordIntegrationFields,
    WorkspaceEmailSettingsFields,
    WorkspaceFields,
    WorkspaceHmacFields,
    WorkspaceInviteConnectionFields,
    WorkspaceMSTeamsInstallationInfoFields,
    WorkspaceMSTeamsIntegrationFields,
    WorkspaceSlackChannelInstallationInfoFields,
    WorkspaceSlackChannelIntegrationConnectionFields,
    WorkspaceSlackChannelIntegrationFields,
    WorkspaceSlackInstallationInfoFields,
    WorkspaceSlackIntegrationConnectionFields,
    WorkspaceSlackIntegrationFields,
)
from .custom_typing_fields import SettingUnion
from .input_types import (
    CompaniesFilter,
    CompaniesSearchQuery,
    ConnectedSlackChannelsFilter,
    CustomerGroupsFilter,
    CustomersFilter,
    CustomersSearchQuery,
    CustomersSort,
    GenerateReplyOption,
    LabelTypeFilter,
    ServiceAuthorizationsFilter,
    SettingScopeInput,
    SingleValueMetricOptions,
    TenantsSearchQuery,
    ThreadLinkGroupFilter,
    ThreadsFilter,
    ThreadsSearchQuery,
    ThreadsSort,
    TimeSeriesMetricOptions,
    UsersFilter,
)


class Query:
    @classmethod
    def my_user_account(cls) -> UserAccountFields:
        return UserAccountFields(field_name="myUserAccount")

    @classmethod
    def my_user(cls) -> UserFields:
        return UserFields(field_name="myUser")

    @classmethod
    def my_machine_user(cls) -> MachineUserFields:
        return MachineUserFields(field_name="myMachineUser")

    @classmethod
    def my_workspace(cls) -> WorkspaceFields:
        return WorkspaceFields(field_name="myWorkspace")

    @classmethod
    def my_permissions(cls) -> PermissionsFields:
        return PermissionsFields(field_name="myPermissions")

    @classmethod
    def my_workspaces(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> WorkspaceConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceConnectionFields(
            field_name="myWorkspaces", arguments=cleared_arguments
        )

    @classmethod
    def my_workspace_invites(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> WorkspaceInviteConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceInviteConnectionFields(
            field_name="myWorkspaceInvites", arguments=cleared_arguments
        )

    @classmethod
    def my_slack_integration(cls) -> UserSlackIntegrationFields:
        return UserSlackIntegrationFields(field_name="mySlackIntegration")

    @classmethod
    def my_slack_installation_info(
        cls, redirect_url: str
    ) -> UserSlackInstallationInfoFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "redirectUrl": {"type": "String!", "value": redirect_url}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserSlackInstallationInfoFields(
            field_name="mySlackInstallationInfo", arguments=cleared_arguments
        )

    @classmethod
    def my_linear_integration(cls) -> UserLinearIntegrationFields:
        return UserLinearIntegrationFields(field_name="myLinearIntegration")

    @classmethod
    def my_linear_installation_info(
        cls, redirect_url: str
    ) -> UserLinearInstallationInfoFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "redirectUrl": {"type": "String!", "value": redirect_url}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserLinearInstallationInfoFields(
            field_name="myLinearInstallationInfo", arguments=cleared_arguments
        )

    @classmethod
    def my_linear_integration_token(cls) -> LinearIntegrationTokenFields:
        return LinearIntegrationTokenFields(field_name="myLinearIntegrationToken")

    @classmethod
    def my_jira_integration_token(cls) -> JiraIntegrationTokenFields:
        return JiraIntegrationTokenFields(field_name="myJiraIntegrationToken")

    @classmethod
    def my_email_signature(cls) -> EmailSignatureFields:
        return EmailSignatureFields(field_name="myEmailSignature")

    @classmethod
    def my_favorite_pages(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> FavoritePageConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return FavoritePageConnectionFields(
            field_name="myFavoritePages", arguments=cleared_arguments
        )

    @classmethod
    def billing_plans(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> BillingPlanConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BillingPlanConnectionFields(
            field_name="billingPlans", arguments=cleared_arguments
        )

    @classmethod
    def my_billing_subscription(cls) -> BillingSubscriptionFields:
        return BillingSubscriptionFields(field_name="myBillingSubscription")

    @classmethod
    def my_billing_rota(cls) -> BillingRotaFields:
        return BillingRotaFields(field_name="myBillingRota")

    @classmethod
    def my_payment_method(cls) -> PaymentMethodFields:
        return PaymentMethodFields(field_name="myPaymentMethod")

    @classmethod
    def label_types(
        cls,
        *,
        filters: Optional[LabelTypeFilter] = None,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> LabelTypeConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filters": {"type": "LabelTypeFilter", "value": filters},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelTypeConnectionFields(
            field_name="labelTypes", arguments=cleared_arguments
        )

    @classmethod
    def label_type(cls, label_type_id: str) -> LabelTypeFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "labelTypeId": {"type": "ID!", "value": label_type_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return LabelTypeFields(field_name="labelType", arguments=cleared_arguments)

    @classmethod
    def roles(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> RoleConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RoleConnectionFields(field_name="roles", arguments=cleared_arguments)

    @classmethod
    def timeline_entries(
        cls,
        customer_id: str,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> TimelineEntryConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "customerId": {"type": "ID!", "value": customer_id},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TimelineEntryConnectionFields(
            field_name="timelineEntries", arguments=cleared_arguments
        )

    @classmethod
    def timeline_entry(
        cls, customer_id: str, timeline_entry_id: str
    ) -> TimelineEntryFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "customerId": {"type": "ID!", "value": customer_id},
            "timelineEntryId": {"type": "ID!", "value": timeline_entry_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TimelineEntryFields(
            field_name="timelineEntry", arguments=cleared_arguments
        )

    @classmethod
    def workspace(cls, workspace_id: str) -> WorkspaceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "workspaceId": {"type": "ID!", "value": workspace_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceFields(field_name="workspace", arguments=cleared_arguments)

    @classmethod
    def user(cls, user_id: str) -> UserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "userId": {"type": "ID!", "value": user_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields(field_name="user", arguments=cleared_arguments)

    @classmethod
    def user_by_email(cls, email: str) -> UserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "email": {"type": "String!", "value": email}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserFields(field_name="userByEmail", arguments=cleared_arguments)

    @classmethod
    def users(
        cls,
        *,
        filters: Optional[UsersFilter] = None,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> UserConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filters": {"type": "UsersFilter", "value": filters},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserConnectionFields(field_name="users", arguments=cleared_arguments)

    @classmethod
    def workspace_invites(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> WorkspaceInviteConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceInviteConnectionFields(
            field_name="workspaceInvites", arguments=cleared_arguments
        )

    @classmethod
    def customer(cls, customer_id: str) -> CustomerFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "customerId": {"type": "ID!", "value": customer_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomerFields(field_name="customer", arguments=cleared_arguments)

    @classmethod
    def customers(
        cls,
        *,
        filters: Optional[CustomersFilter] = None,
        sort_by: Optional[CustomersSort] = None,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> CustomerConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filters": {"type": "CustomersFilter", "value": filters},
            "sortBy": {"type": "CustomersSort", "value": sort_by},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomerConnectionFields(
            field_name="customers", arguments=cleared_arguments
        )

    @classmethod
    def customer_by_email(cls, email: str) -> CustomerFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "email": {"type": "String!", "value": email}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomerFields(field_name="customerByEmail", arguments=cleared_arguments)

    @classmethod
    def customer_by_external_id(cls, external_id: str) -> CustomerFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "externalId": {"type": "ID!", "value": external_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomerFields(
            field_name="customerByExternalId", arguments=cleared_arguments
        )

    @classmethod
    def customer_group(cls, customer_group_id: str) -> CustomerGroupFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "customerGroupId": {"type": "ID!", "value": customer_group_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomerGroupFields(
            field_name="customerGroup", arguments=cleared_arguments
        )

    @classmethod
    def customer_groups(
        cls,
        *,
        filters: Optional[CustomerGroupsFilter] = None,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> CustomerGroupConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filters": {"type": "CustomerGroupsFilter", "value": filters},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomerGroupConnectionFields(
            field_name="customerGroups", arguments=cleared_arguments
        )

    @classmethod
    def thread_field_schemas(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> ThreadFieldSchemaConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadFieldSchemaConnectionFields(
            field_name="threadFieldSchemas", arguments=cleared_arguments
        )

    @classmethod
    def thread_field_schema(
        cls, thread_field_schema_id: str
    ) -> ThreadFieldSchemaFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "threadFieldSchemaId": {"type": "ID!", "value": thread_field_schema_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadFieldSchemaFields(
            field_name="threadFieldSchema", arguments=cleared_arguments
        )

    @classmethod
    def customer_card_instances(
        cls, customer_id: str, *, thread_id: Optional[str] = None
    ) -> CustomerCardInstanceInterface:
        arguments: Dict[str, Dict[str, Any]] = {
            "customerId": {"type": "ID!", "value": customer_id},
            "threadId": {"type": "ID", "value": thread_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomerCardInstanceInterface(
            field_name="customerCardInstances", arguments=cleared_arguments
        )

    @classmethod
    def search_customers(
        cls,
        search_query: CustomersSearchQuery,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> CustomerSearchConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "searchQuery": {"type": "CustomersSearchQuery!", "value": search_query},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomerSearchConnectionFields(
            field_name="searchCustomers", arguments=cleared_arguments
        )

    @classmethod
    def snippets(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> SnippetConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SnippetConnectionFields(
            field_name="snippets", arguments=cleared_arguments
        )

    @classmethod
    def snippet(cls, snippet_id: str) -> SnippetFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "snippetId": {"type": "ID!", "value": snippet_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SnippetFields(field_name="snippet", arguments=cleared_arguments)

    @classmethod
    def workspace_email_settings(cls) -> WorkspaceEmailSettingsFields:
        return WorkspaceEmailSettingsFields(field_name="workspaceEmailSettings")

    @classmethod
    def workspace_chat_settings(cls) -> WorkspaceChatSettingsFields:
        return WorkspaceChatSettingsFields(field_name="workspaceChatSettings")

    @classmethod
    def machine_user(cls, machine_user_id: str) -> MachineUserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "machineUserId": {"type": "ID!", "value": machine_user_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MachineUserFields(field_name="machineUser", arguments=cleared_arguments)

    @classmethod
    def machine_users(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> MachineUserConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MachineUserConnectionFields(
            field_name="machineUsers", arguments=cleared_arguments
        )

    @classmethod
    def permissions(cls) -> PermissionsFields:
        return PermissionsFields(field_name="permissions")

    @classmethod
    def workspace_ms_teams_installation_info(
        cls, redirect_url: str
    ) -> WorkspaceMSTeamsInstallationInfoFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "redirectUrl": {"type": "String!", "value": redirect_url}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceMSTeamsInstallationInfoFields(
            field_name="workspaceMSTeamsInstallationInfo", arguments=cleared_arguments
        )

    @classmethod
    def workspace_ms_teams_integration(cls) -> WorkspaceMSTeamsIntegrationFields:
        return WorkspaceMSTeamsIntegrationFields(
            field_name="workspaceMSTeamsIntegration"
        )

    @classmethod
    def my_ms_teams_installation_info(
        cls, redirect_url: str
    ) -> UserMSTeamsInstallationInfoFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "redirectUrl": {"type": "String!", "value": redirect_url}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserMSTeamsInstallationInfoFields(
            field_name="myMSTeamsInstallationInfo", arguments=cleared_arguments
        )

    @classmethod
    def my_ms_teams_integration(cls) -> UserMSTeamsIntegrationFields:
        return UserMSTeamsIntegrationFields(field_name="myMSTeamsIntegration")

    @classmethod
    def workspace_slack_installation_info(
        cls, redirect_url: str
    ) -> WorkspaceSlackInstallationInfoFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "redirectUrl": {"type": "String!", "value": redirect_url}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceSlackInstallationInfoFields(
            field_name="workspaceSlackInstallationInfo", arguments=cleared_arguments
        )

    @classmethod
    def workspace_slack_integrations(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> WorkspaceSlackIntegrationConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceSlackIntegrationConnectionFields(
            field_name="workspaceSlackIntegrations", arguments=cleared_arguments
        )

    @classmethod
    def workspace_slack_integration(
        cls, integration_id: str
    ) -> WorkspaceSlackIntegrationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "integrationId": {"type": "ID!", "value": integration_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceSlackIntegrationFields(
            field_name="workspaceSlackIntegration", arguments=cleared_arguments
        )

    @classmethod
    def workspace_slack_channel_installation_info(
        cls, redirect_url: str
    ) -> WorkspaceSlackChannelInstallationInfoFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "redirectUrl": {"type": "String!", "value": redirect_url}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceSlackChannelInstallationInfoFields(
            field_name="workspaceSlackChannelInstallationInfo",
            arguments=cleared_arguments,
        )

    @classmethod
    def workspace_slack_channel_integration(
        cls, integration_id: str
    ) -> WorkspaceSlackChannelIntegrationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "integrationId": {"type": "ID!", "value": integration_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceSlackChannelIntegrationFields(
            field_name="workspaceSlackChannelIntegration", arguments=cleared_arguments
        )

    @classmethod
    def workspace_slack_channel_integrations(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> WorkspaceSlackChannelIntegrationConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceSlackChannelIntegrationConnectionFields(
            field_name="workspaceSlackChannelIntegrations", arguments=cleared_arguments
        )

    @classmethod
    def workspace_discord_channel_installation_info(
        cls, redirect_url: str
    ) -> WorkspaceDiscordChannelInstallationInfoFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "redirectUrl": {"type": "String!", "value": redirect_url}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceDiscordChannelInstallationInfoFields(
            field_name="workspaceDiscordChannelInstallationInfo",
            arguments=cleared_arguments,
        )

    @classmethod
    def workspace_discord_channel_integration(
        cls, integration_id: str
    ) -> WorkspaceDiscordChannelIntegrationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "integrationId": {"type": "ID!", "value": integration_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceDiscordChannelIntegrationFields(
            field_name="workspaceDiscordChannelIntegration", arguments=cleared_arguments
        )

    @classmethod
    def workspace_discord_channel_integrations(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> WorkspaceDiscordChannelIntegrationConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceDiscordChannelIntegrationConnectionFields(
            field_name="workspaceDiscordChannelIntegrations",
            arguments=cleared_arguments,
        )

    @classmethod
    def search_thread_slack_users(
        cls,
        thread_id: str,
        search_query: str,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> SlackUserConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "threadId": {"type": "ID!", "value": thread_id},
            "searchQuery": {"type": "String!", "value": search_query},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SlackUserConnectionFields(
            field_name="searchThreadSlackUsers", arguments=cleared_arguments
        )

    @classmethod
    def search_slack_users(
        cls,
        slack_team_id: str,
        slack_channel_id: str,
        search_query: str,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> SlackUserConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "slackTeamId": {"type": "String!", "value": slack_team_id},
            "slackChannelId": {"type": "String!", "value": slack_channel_id},
            "searchQuery": {"type": "String!", "value": search_query},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SlackUserConnectionFields(
            field_name="searchSlackUsers", arguments=cleared_arguments
        )

    @classmethod
    def connected_slack_channels(
        cls,
        *,
        filters: Optional[ConnectedSlackChannelsFilter] = None,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> ConnectedSlackChannelConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filters": {"type": "ConnectedSlackChannelsFilter", "value": filters},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ConnectedSlackChannelConnectionFields(
            field_name="connectedSlackChannels", arguments=cleared_arguments
        )

    @classmethod
    def connected_slack_channel(
        cls, connected_slack_channel_id: str
    ) -> ConnectedSlackChannelFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "connectedSlackChannelId": {
                "type": "ID!",
                "value": connected_slack_channel_id,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ConnectedSlackChannelFields(
            field_name="connectedSlackChannel", arguments=cleared_arguments
        )

    @classmethod
    def thread_slack_user(cls, thread_id: str, slack_user_id: str) -> SlackUserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "threadId": {"type": "ID!", "value": thread_id},
            "slackUserId": {"type": "ID!", "value": slack_user_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SlackUserFields(
            field_name="threadSlackUser", arguments=cleared_arguments
        )

    @classmethod
    def slack_user(
        cls, slack_team_id: str, slack_channel_id: str, slack_user_id: str
    ) -> SlackUserFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "slackTeamId": {"type": "String!", "value": slack_team_id},
            "slackChannelId": {"type": "String!", "value": slack_channel_id},
            "slackUserId": {"type": "ID!", "value": slack_user_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SlackUserFields(field_name="slackUser", arguments=cleared_arguments)

    @classmethod
    def user_auth_slack_integration(
        cls, slack_team_id: str
    ) -> UserAuthSlackIntegrationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "slackTeamId": {"type": "String!", "value": slack_team_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserAuthSlackIntegrationFields(
            field_name="userAuthSlackIntegration", arguments=cleared_arguments
        )

    @classmethod
    def user_auth_slack_integration_by_thread_id(
        cls, thread_id: str
    ) -> UserAuthSlackIntegrationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "threadId": {"type": "ID!", "value": thread_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserAuthSlackIntegrationFields(
            field_name="userAuthSlackIntegrationByThreadId", arguments=cleared_arguments
        )

    @classmethod
    def user_auth_slack_installation_info(
        cls, redirect_url: str, *, slack_team_id: Optional[str] = None
    ) -> UserAuthSlackInstallationInfoFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "redirectUrl": {"type": "String!", "value": redirect_url},
            "slackTeamId": {"type": "String", "value": slack_team_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UserAuthSlackInstallationInfoFields(
            field_name="userAuthSlackInstallationInfo", arguments=cleared_arguments
        )

    @classmethod
    def workspace_discord_integrations(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> WorkspaceDiscordIntegrationConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceDiscordIntegrationConnectionFields(
            field_name="workspaceDiscordIntegrations", arguments=cleared_arguments
        )

    @classmethod
    def workspace_discord_integration(
        cls, integration_id: str
    ) -> WorkspaceDiscordIntegrationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "integrationId": {"type": "ID!", "value": integration_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkspaceDiscordIntegrationFields(
            field_name="workspaceDiscordIntegration", arguments=cleared_arguments
        )

    @classmethod
    def customer_card_configs(cls) -> CustomerCardConfigFields:
        return CustomerCardConfigFields(field_name="customerCardConfigs")

    @classmethod
    def customer_card_config(
        cls, customer_card_config_id: str
    ) -> CustomerCardConfigFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "customerCardConfigId": {"type": "ID!", "value": customer_card_config_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomerCardConfigFields(
            field_name="customerCardConfig", arguments=cleared_arguments
        )

    @classmethod
    def setting(cls, code: str, scope: SettingScopeInput) -> SettingUnion:
        arguments: Dict[str, Dict[str, Any]] = {
            "code": {"type": "String!", "value": code},
            "scope": {"type": "SettingScopeInput!", "value": scope},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SettingUnion(field_name="setting", arguments=cleared_arguments)

    @classmethod
    def webhook_versions(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> WebhookVersionConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WebhookVersionConnectionFields(
            field_name="webhookVersions", arguments=cleared_arguments
        )

    @classmethod
    def webhook_target(cls, webhook_target_id: str) -> WebhookTargetFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "webhookTargetId": {"type": "ID!", "value": webhook_target_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WebhookTargetFields(
            field_name="webhookTarget", arguments=cleared_arguments
        )

    @classmethod
    def webhook_targets(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> WebhookTargetConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WebhookTargetConnectionFields(
            field_name="webhookTargets", arguments=cleared_arguments
        )

    @classmethod
    def subscription_event_types(cls) -> SubscriptionEventTypeFields:
        return SubscriptionEventTypeFields(field_name="subscriptionEventTypes")

    @classmethod
    def workflow_rule(cls, workflow_rule_id: str) -> WorkflowRuleFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "workflowRuleId": {"type": "ID!", "value": workflow_rule_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkflowRuleFields(
            field_name="workflowRule", arguments=cleared_arguments
        )

    @classmethod
    def workflow_rules(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> WorkflowRuleConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return WorkflowRuleConnectionFields(
            field_name="workflowRules", arguments=cleared_arguments
        )

    @classmethod
    def chat_app(cls, chat_app_id: str) -> ChatAppFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "chatAppId": {"type": "ID!", "value": chat_app_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ChatAppFields(field_name="chatApp", arguments=cleared_arguments)

    @classmethod
    def chat_apps(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> ChatAppConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ChatAppConnectionFields(
            field_name="chatApps", arguments=cleared_arguments
        )

    @classmethod
    def chat_app_secret(cls, chat_app_id: str) -> ChatAppHiddenSecretFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "chatAppId": {"type": "ID!", "value": chat_app_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ChatAppHiddenSecretFields(
            field_name="chatAppSecret", arguments=cleared_arguments
        )

    @classmethod
    def thread(cls, thread_id: str) -> ThreadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "threadId": {"type": "ID!", "value": thread_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadFields(field_name="thread", arguments=cleared_arguments)

    @classmethod
    def thread_by_external_id(cls, customer_id: str, external_id: str) -> ThreadFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "customerId": {"type": "ID!", "value": customer_id},
            "externalId": {"type": "ID!", "value": external_id},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadFields(
            field_name="threadByExternalId", arguments=cleared_arguments
        )

    @classmethod
    def threads(
        cls,
        *,
        filters: Optional[ThreadsFilter] = None,
        sort_by: Optional[ThreadsSort] = None,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> ThreadConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "filters": {"type": "ThreadsFilter", "value": filters},
            "sortBy": {"type": "ThreadsSort", "value": sort_by},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadConnectionFields(field_name="threads", arguments=cleared_arguments)

    @classmethod
    def search_threads(
        cls,
        search_query: ThreadsSearchQuery,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> ThreadSearchResultConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "searchQuery": {"type": "ThreadsSearchQuery!", "value": search_query},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadSearchResultConnectionFields(
            field_name="searchThreads", arguments=cleared_arguments
        )

    @classmethod
    def autoresponder(cls, autoresponder_id: str) -> AutoresponderFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "autoresponderId": {"type": "ID!", "value": autoresponder_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AutoresponderFields(
            field_name="autoresponder", arguments=cleared_arguments
        )

    @classmethod
    def autoresponders(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> AutoresponderConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AutoresponderConnectionFields(
            field_name="autoresponders", arguments=cleared_arguments
        )

    @classmethod
    def time_series_metric(
        cls, name: str, *, options: Optional[TimeSeriesMetricOptions] = None
    ) -> TimeSeriesMetricFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name},
            "options": {"type": "TimeSeriesMetricOptions", "value": options},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TimeSeriesMetricFields(
            field_name="timeSeriesMetric", arguments=cleared_arguments
        )

    @classmethod
    def single_value_metric(
        cls, name: str, *, options: Optional[SingleValueMetricOptions] = None
    ) -> SingleValueMetricFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "name": {"type": "String!", "value": name},
            "options": {"type": "SingleValueMetricOptions", "value": options},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SingleValueMetricFields(
            field_name="singleValueMetric", arguments=cleared_arguments
        )

    @classmethod
    def companies(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None,
        filters: Optional[CompaniesFilter] = None
    ) -> CompanyConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
            "filters": {"type": "CompaniesFilter", "value": filters},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CompanyConnectionFields(
            field_name="companies", arguments=cleared_arguments
        )

    @classmethod
    def company(cls, company_id: str) -> CompanyFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "companyId": {"type": "ID!", "value": company_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CompanyFields(field_name="company", arguments=cleared_arguments)

    @classmethod
    def search_companies(
        cls,
        search_query: CompaniesSearchQuery,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> CompanySearchResultConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "searchQuery": {"type": "CompaniesSearchQuery!", "value": search_query},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CompanySearchResultConnectionFields(
            field_name="searchCompanies", arguments=cleared_arguments
        )

    @classmethod
    def tenants(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> TenantConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TenantConnectionFields(field_name="tenants", arguments=cleared_arguments)

    @classmethod
    def tenant(cls, tenant_id: str) -> TenantFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "tenantId": {"type": "ID!", "value": tenant_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TenantFields(field_name="tenant", arguments=cleared_arguments)

    @classmethod
    def search_tenants(
        cls,
        search_query: TenantsSearchQuery,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> TenantSearchResultConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "searchQuery": {"type": "TenantsSearchQuery!", "value": search_query},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TenantSearchResultConnectionFields(
            field_name="searchTenants", arguments=cleared_arguments
        )

    @classmethod
    def thread_discussion(cls, thread_discussion_id: str) -> ThreadDiscussionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "threadDiscussionId": {"type": "ID!", "value": thread_discussion_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadDiscussionFields(
            field_name="threadDiscussion", arguments=cleared_arguments
        )

    @classmethod
    def service_authorization(
        cls, service_authorization_id: str
    ) -> ServiceAuthorizationFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "serviceAuthorizationId": {"type": "ID!", "value": service_authorization_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ServiceAuthorizationFields(
            field_name="serviceAuthorization", arguments=cleared_arguments
        )

    @classmethod
    def service_authorizations(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None,
        filters: Optional[ServiceAuthorizationsFilter] = None
    ) -> ServiceAuthorizationConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
            "filters": {"type": "ServiceAuthorizationsFilter", "value": filters},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ServiceAuthorizationConnectionFields(
            field_name="serviceAuthorizations", arguments=cleared_arguments
        )

    @classmethod
    def tiers(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> TierConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TierConnectionFields(field_name="tiers", arguments=cleared_arguments)

    @classmethod
    def tier(cls, tier_id: str) -> TierFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "tierId": {"type": "ID!", "value": tier_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TierFields(field_name="tier", arguments=cleared_arguments)

    @classmethod
    def business_hours(cls) -> BusinessHoursFields:
        return BusinessHoursFields(field_name="businessHours")

    @classmethod
    def business_hours_slots(cls) -> BusinessHoursSlotFields:
        return BusinessHoursSlotFields(field_name="businessHoursSlots")

    @classmethod
    def workspace_hmac(cls) -> WorkspaceHmacFields:
        return WorkspaceHmacFields(field_name="workspaceHmac")

    @classmethod
    def thread_link_groups(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None,
        filters: Optional[ThreadLinkGroupFilter] = None
    ) -> ThreadLinkGroupConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
            "filters": {"type": "ThreadLinkGroupFilter", "value": filters},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadLinkGroupConnectionFields(
            field_name="threadLinkGroups", arguments=cleared_arguments
        )

    @classmethod
    def related_threads(
        cls, thread_id: str, *, variant: Optional[str] = None
    ) -> ThreadWithDistanceFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "threadId": {"type": "ID!", "value": thread_id},
            "variant": {"type": "String", "value": variant},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadWithDistanceFields(
            field_name="relatedThreads", arguments=cleared_arguments
        )

    @classmethod
    def thread_clusters(cls, *, variant: Optional[str] = None) -> ThreadClusterFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "variant": {"type": "String", "value": variant}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadClusterFields(
            field_name="threadClusters", arguments=cleared_arguments
        )

    @classmethod
    def generated_replies(
        cls, thread_id: str, *, options: Optional[GenerateReplyOption] = None
    ) -> GeneratedReplyFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "threadId": {"type": "ID!", "value": thread_id},
            "options": {"type": "GenerateReplyOption", "value": options},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return GeneratedReplyFields(
            field_name="generatedReplies", arguments=cleared_arguments
        )

    @classmethod
    def indexed_documents(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> IndexedDocumentConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return IndexedDocumentConnectionFields(
            field_name="indexedDocuments", arguments=cleared_arguments
        )

    @classmethod
    def saved_threads_views(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> SavedThreadsViewConnectionFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SavedThreadsViewConnectionFields(
            field_name="savedThreadsViews", arguments=cleared_arguments
        )

    @classmethod
    def saved_threads_view(cls, saved_threads_view_id: str) -> SavedThreadsViewFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "savedThreadsViewId": {"type": "ID!", "value": saved_threads_view_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SavedThreadsViewFields(
            field_name="savedThreadsView", arguments=cleared_arguments
        )

# Generated by ariadne-codegen

from typing import Any, Dict, Optional

from .custom_fields import (
    AcceptWorkspaceInviteOutputFields,
    AddAdditionalAssigneesOutputFields,
    AddCustomerToCustomerGroupsOutputFields,
    AddCustomerToTenantsOutputFields,
    AddLabelsOutputFields,
    AddMembersToTierOutputFields,
    AddUserToActiveBillingRotaOutputFields,
    AddWorkspaceAlternateSupportEmailAddressOutputFields,
    ArchiveLabelTypeOutputFields,
    AssignRolesToUserOutputFields,
    AssignThreadOutputFields,
    BulkUpsertThreadFieldsOutputFields,
    CalculateRoleChangeCostOutputFields,
    ChangeBillingPlanOutputFields,
    ChangeThreadCustomerOutputFields,
    ChangeThreadPriorityOutputFields,
    ChangeUserStatusOutputFields,
    CompleteServiceAuthorizationOutputFields,
    CreateApiKeyOutputFields,
    CreateAttachmentDownloadUrlOutputFields,
    CreateAttachmentUploadUrlOutputFields,
    CreateAutoresponderOutputFields,
    CreateBillingPortalSessionOutputFields,
    CreateChatAppOutputFields,
    CreateChatAppSecretOutputFields,
    CreateCheckoutSessionOutputFields,
    CreateCustomerCardConfigOutputFields,
    CreateCustomerEventOutputFields,
    CreateCustomerGroupOutputFields,
    CreateEmailPreviewUrlOutputFields,
    CreateIndexedDocumentOutputFields,
    CreateLabelTypeOutputFields,
    CreateMachineUserOutputFields,
    CreateMyFavoritePageOutputFields,
    CreateMyLinearIntegrationOutputFields,
    CreateMyMSTeamsIntegrationOutputFields,
    CreateMySlackIntegrationOutputFields,
    CreateNoteOutputFields,
    CreateSavedThreadsViewOutputFields,
    CreateServiceLevelAgreementOutputFields,
    CreateSnippetOutputFields,
    CreateThreadChannelAssociationOutputFields,
    CreateThreadDiscussionOutputFields,
    CreateThreadEventOutputFields,
    CreateThreadFieldSchemaOutputFields,
    CreateThreadLinkOutputFields,
    CreateThreadOutputFields,
    CreateTierOutputFields,
    CreateUserAccountOutputFields,
    CreateUserAuthSlackIntegrationOutputFields,
    CreateWebhookTargetOutputFields,
    CreateWorkflowRuleOutputFields,
    CreateWorkspaceDiscordChannelIntegrationOutputFields,
    CreateWorkspaceDiscordIntegrationOutputFields,
    CreateWorkspaceEmailDomainSettingsOutputFields,
    CreateWorkspaceFileUploadUrlOutputFields,
    CreateWorkspaceMSTeamsIntegrationOutputFields,
    CreateWorkspaceOutputFields,
    CreateWorkspaceSlackChannelIntegrationOutputFields,
    CreateWorkspaceSlackIntegrationOutputFields,
    DeleteApiKeyOutputFields,
    DeleteAutoresponderOutputFields,
    DeleteBusinessHoursOutputFields,
    DeleteChatAppOutputFields,
    DeleteChatAppSecretOutputFields,
    DeleteCustomerCardConfigOutputFields,
    DeleteCustomerGroupOutputFields,
    DeleteCustomerOutputFields,
    DeleteIndexedDocumentOutputFields,
    DeleteMachineUserOutputFields,
    DeleteMyFavoritePageOutputFields,
    DeleteMyLinearIntegrationOutputFields,
    DeleteMyMSTeamsIntegrationOutputFields,
    DeleteMyServiceAuthorizationOutputFields,
    DeleteMySlackIntegrationOutputFields,
    DeleteNoteOutputFields,
    DeleteSavedThreadsViewOutputFields,
    DeleteServiceAuthorizationOutputFields,
    DeleteServiceLevelAgreementOutputFields,
    DeleteSnippetOutputFields,
    DeleteThreadChannelAssociationOutputFields,
    DeleteThreadFieldOutputFields,
    DeleteThreadFieldSchemaOutputFields,
    DeleteThreadLinkOutputFields,
    DeleteTierOutputFields,
    DeleteUserAuthSlackIntegrationOutputFields,
    DeleteUserOutputFields,
    DeleteWebhookTargetOutputFields,
    DeleteWorkflowRuleOutputFields,
    DeleteWorkspaceDiscordChannelIntegrationOutputFields,
    DeleteWorkspaceDiscordIntegrationOutputFields,
    DeleteWorkspaceEmailDomainSettingsOutputFields,
    DeleteWorkspaceFileOutputFields,
    DeleteWorkspaceInviteOutputFields,
    DeleteWorkspaceMSTeamsIntegrationOutputFields,
    DeleteWorkspaceSlackChannelIntegrationOutputFields,
    DeleteWorkspaceSlackIntegrationOutputFields,
    ForkThreadOutputFields,
    InviteUserToWorkspaceOutputFields,
    MarkCustomerAsSpamOutputFields,
    MarkThreadAsDoneOutputFields,
    MarkThreadAsTodoOutputFields,
    MarkThreadDiscussionAsResolvedOutputFields,
    PreviewBillingPlanChangeOutputFields,
    RegenerateWorkspaceHmacOutputFields,
    ReloadCustomerCardInstanceOutputFields,
    RemoveAdditionalAssigneesOutputFields,
    RemoveCustomerFromCustomerGroupsOutputFields,
    RemoveCustomerFromTenantsOutputFields,
    RemoveLabelsOutputFields,
    RemoveMembersFromTierOutputFields,
    RemoveUserFromActiveBillingRotaOutputFields,
    RemoveWorkspaceAlternateSupportEmailAddressOutputFields,
    ReorderAutorespondersOutputFields,
    ReorderCustomerCardConfigsOutputFields,
    ReorderThreadFieldSchemasOutputFields,
    ReplyToEmailOutputFields,
    ReplyToThreadOutputFields,
    SendBulkEmailOutputFields,
    SendChatOutputFields,
    SendCustomerChatOutputFields,
    SendDiscordMessageOutputFields,
    SendMSTeamsMessageOutputFields,
    SendNewEmailOutputFields,
    SendSlackMessageOutputFields,
    SendThreadDiscussionMessageOutputFields,
    SetCustomerTenantsOutputFields,
    ShareThreadToUserInSlackOutputFields,
    SnoozeThreadOutputFields,
    StartServiceAuthorizationOutputFields,
    SyncBusinessHoursSlotsOutputFields,
    ToggleSlackMessageReactionOutputFields,
    UnarchiveLabelTypeOutputFields,
    UnassignThreadOutputFields,
    UnmarkCustomerAsSpamOutputFields,
    UpdateActiveBillingRotaOutputFields,
    UpdateApiKeyOutputFields,
    UpdateAutoresponderOutputFields,
    UpdateChatAppOutputFields,
    UpdateCompanyTierOutputFields,
    UpdateConnectedSlackChannelOutputFields,
    UpdateCustomerCardConfigOutputFields,
    UpdateCustomerCompanyOutputFields,
    UpdateCustomerGroupOutputFields,
    UpdateGeneratedReplyOutputFields,
    UpdateLabelTypeOutputFields,
    UpdateMachineUserOutputFields,
    UpdateSavedThreadsViewOutputFields,
    UpdateServiceLevelAgreementOutputFields,
    UpdateSettingOutputFields,
    UpdateSnippetOutputFields,
    UpdateTenantTierOutputFields,
    UpdateThreadFieldSchemaOutputFields,
    UpdateThreadTenantOutputFields,
    UpdateThreadTierOutputFields,
    UpdateThreadTitleOutputFields,
    UpdateTierOutputFields,
    UpdateWebhookTargetOutputFields,
    UpdateWorkflowRuleOutputFields,
    UpdateWorkspaceEmailSettingsOutputFields,
    UpdateWorkspaceOutputFields,
    UpsertBusinessHoursOutputFields,
    UpsertCompanyOutputFields,
    UpsertCustomerGroupOutputFields,
    UpsertCustomerOutputFields,
    UpsertMyEmailSignatureOutputFields,
    UpsertTenantOutputFields,
    UpsertThreadFieldOutputFields,
    VerifyWorkspaceEmailDnsSettingsOutputFields,
    VerifyWorkspaceEmailForwardingSettingsOutputFields,
)
from .input_types import (
    AcceptWorkspaceInviteInput,
    AddAdditionalAssigneesInput,
    AddCustomerToCustomerGroupsInput,
    AddCustomerToTenantsInput,
    AddLabelsInput,
    AddMembersToTierInput,
    AddUserToActiveBillingRotaInput,
    AddWorkspaceAlternateSupportEmailAddressInput,
    ArchiveLabelTypeInput,
    AssignRolesToUserInput,
    AssignThreadInput,
    BulkUpsertThreadFieldsInput,
    CalculateRoleChangeCostInput,
    ChangeBillingPlanInput,
    ChangeThreadCustomerInput,
    ChangeThreadPriorityInput,
    ChangeUserStatusInput,
    CompleteServiceAuthorizationInput,
    CreateApiKeyInput,
    CreateAttachmentDownloadUrlInput,
    CreateAttachmentUploadUrlInput,
    CreateAutoresponderInput,
    CreateChatAppInput,
    CreateChatAppSecretInput,
    CreateCheckoutSessionInput,
    CreateCustomerCardConfigInput,
    CreateCustomerEventInput,
    CreateCustomerGroupInput,
    CreateEmailPreviewUrlInput,
    CreateIndexedDocumentInput,
    CreateLabelTypeInput,
    CreateMachineUserInput,
    CreateMyFavoritePageInput,
    CreateMyLinearIntegrationInput,
    CreateMyMSTeamsIntegrationInput,
    CreateMySlackIntegrationInput,
    CreateNoteInput,
    CreateSavedThreadsViewInput,
    CreateServiceLevelAgreementInput,
    CreateSnippetInput,
    CreateThreadChannelAssociationInput,
    CreateThreadDiscussionInput,
    CreateThreadEventInput,
    CreateThreadFieldSchemaInput,
    CreateThreadInput,
    CreateThreadLinkInput,
    CreateTierInput,
    CreateUserAccountInput,
    CreateUserAuthSlackIntegrationInput,
    CreateWebhookTargetInput,
    CreateWorkflowRuleInput,
    CreateWorkspaceDiscordChannelIntegrationInput,
    CreateWorkspaceDiscordIntegrationInput,
    CreateWorkspaceEmailDomainSettingsInput,
    CreateWorkspaceFileUploadUrlInput,
    CreateWorkspaceInput,
    CreateWorkspaceMSTeamsIntegrationInput,
    CreateWorkspaceSlackChannelIntegrationInput,
    CreateWorkspaceSlackIntegrationInput,
    DeleteApiKeyInput,
    DeleteAutoresponderInput,
    DeleteChatAppInput,
    DeleteChatAppSecretInput,
    DeleteCustomerCardConfigInput,
    DeleteCustomerGroupInput,
    DeleteCustomerInput,
    DeleteIndexedDocumentInput,
    DeleteMachineUserInput,
    DeleteMyFavoritePageInput,
    DeleteMyServiceAuthorizationInput,
    DeleteNoteInput,
    DeleteSavedThreadsViewInput,
    DeleteServiceAuthorizationInput,
    DeleteServiceLevelAgreementInput,
    DeleteSnippetInput,
    DeleteThreadChannelAssociationInput,
    DeleteThreadFieldInput,
    DeleteThreadFieldSchemaInput,
    DeleteThreadLinkInput,
    DeleteTierInput,
    DeleteUserAuthSlackIntegrationInput,
    DeleteUserInput,
    DeleteWebhookTargetInput,
    DeleteWorkflowRuleInput,
    DeleteWorkspaceDiscordChannelIntegrationInput,
    DeleteWorkspaceDiscordIntegrationInput,
    DeleteWorkspaceFileInput,
    DeleteWorkspaceInviteInput,
    DeleteWorkspaceMSTeamsIntegrationInput,
    DeleteWorkspaceSlackChannelIntegrationInput,
    DeleteWorkspaceSlackIntegrationInput,
    ForkThreadInput,
    InviteUserToWorkspaceInput,
    MarkCustomerAsSpamInput,
    MarkThreadAsDoneInput,
    MarkThreadAsTodoInput,
    MarkThreadDiscussionAsResolvedInput,
    PreviewBillingPlanChangeInput,
    ReloadCustomerCardInstanceInput,
    RemoveAdditionalAssigneesInput,
    RemoveCustomerFromCustomerGroupsInput,
    RemoveCustomerFromTenantsInput,
    RemoveLabelsInput,
    RemoveMembersFromTierInput,
    RemoveUserFromActiveBillingRotaInput,
    RemoveWorkspaceAlternateSupportEmailAddressInput,
    ReorderAutorespondersInput,
    ReorderCustomerCardConfigsInput,
    ReorderThreadFieldSchemasInput,
    ReplyToEmailInput,
    ReplyToThreadInput,
    SendBulkEmailInput,
    SendChatInput,
    SendCustomerChatInput,
    SendDiscordMessageInput,
    SendMSTeamsMessageInput,
    SendNewEmailInput,
    SendSlackMessageInput,
    SendThreadDiscussionMessageInput,
    SetCustomerTenantsInput,
    ShareThreadToUserInSlackInput,
    SnoozeThreadInput,
    StartServiceAuthorizationInput,
    SyncBusinessHoursSlotsInput,
    ToggleSlackMessageReactionInput,
    UnarchiveLabelTypeInput,
    UnassignThreadInput,
    UnmarkCustomerAsSpamInput,
    UpdateActiveBillingRotaInput,
    UpdateApiKeyInput,
    UpdateAutoresponderInput,
    UpdateChatAppInput,
    UpdateCompanyTierInput,
    UpdateConnectedSlackChannelInput,
    UpdateCustomerCardConfigInput,
    UpdateCustomerCompanyInput,
    UpdateCustomerGroupInput,
    UpdateGeneratedReplyInput,
    UpdateLabelTypeInput,
    UpdateMachineUserInput,
    UpdateSavedThreadsViewInput,
    UpdateServiceLevelAgreementInput,
    UpdateSettingInput,
    UpdateSnippetInput,
    UpdateTenantTierInput,
    UpdateThreadFieldSchemaInput,
    UpdateThreadTenantInput,
    UpdateThreadTierInput,
    UpdateThreadTitleInput,
    UpdateTierInput,
    UpdateWebhookTargetInput,
    UpdateWorkflowRuleInput,
    UpdateWorkspaceEmailSettingsInput,
    UpdateWorkspaceInput,
    UpsertBusinessHoursInput,
    UpsertCompanyInput,
    UpsertCustomerGroupInput,
    UpsertCustomerInput,
    UpsertMyEmailSignatureInput,
    UpsertTenantInput,
    UpsertThreadFieldInput,
    VerifyWorkspaceEmailForwardingSettingsInput,
)


class Mutation:
    @classmethod
    def create_user_account(
        cls, input: CreateUserAccountInput
    ) -> CreateUserAccountOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateUserAccountInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateUserAccountOutputFields(
            field_name="createUserAccount", arguments=cleared_arguments
        )

    @classmethod
    def change_user_status(
        cls, input: ChangeUserStatusInput
    ) -> ChangeUserStatusOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ChangeUserStatusInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ChangeUserStatusOutputFields(
            field_name="changeUserStatus", arguments=cleared_arguments
        )

    @classmethod
    def create_workspace(
        cls, input: CreateWorkspaceInput
    ) -> CreateWorkspaceOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateWorkspaceInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateWorkspaceOutputFields(
            field_name="createWorkspace", arguments=cleared_arguments
        )

    @classmethod
    def update_workspace(
        cls, input: UpdateWorkspaceInput
    ) -> UpdateWorkspaceOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateWorkspaceInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateWorkspaceOutputFields(
            field_name="updateWorkspace", arguments=cleared_arguments
        )

    @classmethod
    def invite_user_to_workspace(
        cls, input: InviteUserToWorkspaceInput
    ) -> InviteUserToWorkspaceOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "InviteUserToWorkspaceInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return InviteUserToWorkspaceOutputFields(
            field_name="inviteUserToWorkspace", arguments=cleared_arguments
        )

    @classmethod
    def accept_workspace_invite(
        cls, input: AcceptWorkspaceInviteInput
    ) -> AcceptWorkspaceInviteOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AcceptWorkspaceInviteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AcceptWorkspaceInviteOutputFields(
            field_name="acceptWorkspaceInvite", arguments=cleared_arguments
        )

    @classmethod
    def delete_workspace_invite(
        cls, input: DeleteWorkspaceInviteInput
    ) -> DeleteWorkspaceInviteOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteWorkspaceInviteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteWorkspaceInviteOutputFields(
            field_name="deleteWorkspaceInvite", arguments=cleared_arguments
        )

    @classmethod
    def delete_user(cls, input: DeleteUserInput) -> DeleteUserOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteUserInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteUserOutputFields(
            field_name="deleteUser", arguments=cleared_arguments
        )

    @classmethod
    def assign_roles_to_user(
        cls, input: AssignRolesToUserInput
    ) -> AssignRolesToUserOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AssignRolesToUserInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AssignRolesToUserOutputFields(
            field_name="assignRolesToUser", arguments=cleared_arguments
        )

    @classmethod
    def create_label_type(
        cls, input: CreateLabelTypeInput
    ) -> CreateLabelTypeOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateLabelTypeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateLabelTypeOutputFields(
            field_name="createLabelType", arguments=cleared_arguments
        )

    @classmethod
    def archive_label_type(
        cls, input: ArchiveLabelTypeInput
    ) -> ArchiveLabelTypeOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ArchiveLabelTypeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ArchiveLabelTypeOutputFields(
            field_name="archiveLabelType", arguments=cleared_arguments
        )

    @classmethod
    def unarchive_label_type(
        cls, input: UnarchiveLabelTypeInput
    ) -> UnarchiveLabelTypeOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnarchiveLabelTypeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnarchiveLabelTypeOutputFields(
            field_name="unarchiveLabelType", arguments=cleared_arguments
        )

    @classmethod
    def update_label_type(
        cls, input: UpdateLabelTypeInput
    ) -> UpdateLabelTypeOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateLabelTypeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateLabelTypeOutputFields(
            field_name="updateLabelType", arguments=cleared_arguments
        )

    @classmethod
    def add_labels(cls, input: AddLabelsInput) -> AddLabelsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddLabelsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddLabelsOutputFields(
            field_name="addLabels", arguments=cleared_arguments
        )

    @classmethod
    def remove_labels(cls, input: RemoveLabelsInput) -> RemoveLabelsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveLabelsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveLabelsOutputFields(
            field_name="removeLabels", arguments=cleared_arguments
        )

    @classmethod
    def create_thread_link(
        cls, input: CreateThreadLinkInput
    ) -> CreateThreadLinkOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateThreadLinkInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateThreadLinkOutputFields(
            field_name="createThreadLink", arguments=cleared_arguments
        )

    @classmethod
    def delete_thread_link(
        cls, input: DeleteThreadLinkInput
    ) -> DeleteThreadLinkOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteThreadLinkInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteThreadLinkOutputFields(
            field_name="deleteThreadLink", arguments=cleared_arguments
        )

    @classmethod
    def create_note(cls, input: CreateNoteInput) -> CreateNoteOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateNoteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateNoteOutputFields(
            field_name="createNote", arguments=cleared_arguments
        )

    @classmethod
    def delete_note(cls, input: DeleteNoteInput) -> DeleteNoteOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteNoteInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteNoteOutputFields(
            field_name="deleteNote", arguments=cleared_arguments
        )

    @classmethod
    def create_saved_threads_view(
        cls, input: CreateSavedThreadsViewInput
    ) -> CreateSavedThreadsViewOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateSavedThreadsViewInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateSavedThreadsViewOutputFields(
            field_name="createSavedThreadsView", arguments=cleared_arguments
        )

    @classmethod
    def update_saved_threads_view(
        cls, input: UpdateSavedThreadsViewInput
    ) -> UpdateSavedThreadsViewOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateSavedThreadsViewInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateSavedThreadsViewOutputFields(
            field_name="updateSavedThreadsView", arguments=cleared_arguments
        )

    @classmethod
    def delete_saved_threads_view(
        cls, input: DeleteSavedThreadsViewInput
    ) -> DeleteSavedThreadsViewOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteSavedThreadsViewInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteSavedThreadsViewOutputFields(
            field_name="deleteSavedThreadsView", arguments=cleared_arguments
        )

    @classmethod
    def create_my_favorite_page(
        cls, input: CreateMyFavoritePageInput
    ) -> CreateMyFavoritePageOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateMyFavoritePageInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateMyFavoritePageOutputFields(
            field_name="createMyFavoritePage", arguments=cleared_arguments
        )

    @classmethod
    def delete_my_favorite_page(
        cls, input: DeleteMyFavoritePageInput
    ) -> DeleteMyFavoritePageOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteMyFavoritePageInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteMyFavoritePageOutputFields(
            field_name="deleteMyFavoritePage", arguments=cleared_arguments
        )

    @classmethod
    def create_snippet(cls, input: CreateSnippetInput) -> CreateSnippetOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateSnippetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateSnippetOutputFields(
            field_name="createSnippet", arguments=cleared_arguments
        )

    @classmethod
    def delete_snippet(cls, input: DeleteSnippetInput) -> DeleteSnippetOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteSnippetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteSnippetOutputFields(
            field_name="deleteSnippet", arguments=cleared_arguments
        )

    @classmethod
    def update_snippet(cls, input: UpdateSnippetInput) -> UpdateSnippetOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateSnippetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateSnippetOutputFields(
            field_name="updateSnippet", arguments=cleared_arguments
        )

    @classmethod
    def upsert_customer(cls, input: UpsertCustomerInput) -> UpsertCustomerOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpsertCustomerInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpsertCustomerOutputFields(
            field_name="upsertCustomer", arguments=cleared_arguments
        )

    @classmethod
    def update_customer_company(
        cls, input: UpdateCustomerCompanyInput
    ) -> UpdateCustomerCompanyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateCustomerCompanyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateCustomerCompanyOutputFields(
            field_name="updateCustomerCompany", arguments=cleared_arguments
        )

    @classmethod
    def delete_customer(cls, input: DeleteCustomerInput) -> DeleteCustomerOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteCustomerInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteCustomerOutputFields(
            field_name="deleteCustomer", arguments=cleared_arguments
        )

    @classmethod
    def mark_customer_as_spam(
        cls, input: MarkCustomerAsSpamInput
    ) -> MarkCustomerAsSpamOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MarkCustomerAsSpamInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarkCustomerAsSpamOutputFields(
            field_name="markCustomerAsSpam", arguments=cleared_arguments
        )

    @classmethod
    def unmark_customer_as_spam(
        cls, input: UnmarkCustomerAsSpamInput
    ) -> UnmarkCustomerAsSpamOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnmarkCustomerAsSpamInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnmarkCustomerAsSpamOutputFields(
            field_name="unmarkCustomerAsSpam", arguments=cleared_arguments
        )

    @classmethod
    def upsert_customer_group(
        cls, input: UpsertCustomerGroupInput
    ) -> UpsertCustomerGroupOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpsertCustomerGroupInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpsertCustomerGroupOutputFields(
            field_name="upsertCustomerGroup", arguments=cleared_arguments
        )

    @classmethod
    def create_customer_group(
        cls, input: CreateCustomerGroupInput
    ) -> CreateCustomerGroupOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateCustomerGroupInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateCustomerGroupOutputFields(
            field_name="createCustomerGroup", arguments=cleared_arguments
        )

    @classmethod
    def update_customer_group(
        cls, input: UpdateCustomerGroupInput
    ) -> UpdateCustomerGroupOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateCustomerGroupInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateCustomerGroupOutputFields(
            field_name="updateCustomerGroup", arguments=cleared_arguments
        )

    @classmethod
    def delete_customer_group(
        cls, input: DeleteCustomerGroupInput
    ) -> DeleteCustomerGroupOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteCustomerGroupInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteCustomerGroupOutputFields(
            field_name="deleteCustomerGroup", arguments=cleared_arguments
        )

    @classmethod
    def add_customer_to_customer_groups(
        cls, input: AddCustomerToCustomerGroupsInput
    ) -> AddCustomerToCustomerGroupsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddCustomerToCustomerGroupsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddCustomerToCustomerGroupsOutputFields(
            field_name="addCustomerToCustomerGroups", arguments=cleared_arguments
        )

    @classmethod
    def remove_customer_from_customer_groups(
        cls, input: RemoveCustomerFromCustomerGroupsInput
    ) -> RemoveCustomerFromCustomerGroupsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveCustomerFromCustomerGroupsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveCustomerFromCustomerGroupsOutputFields(
            field_name="removeCustomerFromCustomerGroups", arguments=cleared_arguments
        )

    @classmethod
    def create_thread_field_schema(
        cls, input: CreateThreadFieldSchemaInput
    ) -> CreateThreadFieldSchemaOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateThreadFieldSchemaInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateThreadFieldSchemaOutputFields(
            field_name="createThreadFieldSchema", arguments=cleared_arguments
        )

    @classmethod
    def update_thread_field_schema(
        cls, input: UpdateThreadFieldSchemaInput
    ) -> UpdateThreadFieldSchemaOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateThreadFieldSchemaInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateThreadFieldSchemaOutputFields(
            field_name="updateThreadFieldSchema", arguments=cleared_arguments
        )

    @classmethod
    def delete_thread_field_schema(
        cls, input: DeleteThreadFieldSchemaInput
    ) -> DeleteThreadFieldSchemaOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteThreadFieldSchemaInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteThreadFieldSchemaOutputFields(
            field_name="deleteThreadFieldSchema", arguments=cleared_arguments
        )

    @classmethod
    def reorder_thread_field_schemas(
        cls, input: ReorderThreadFieldSchemasInput
    ) -> ReorderThreadFieldSchemasOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReorderThreadFieldSchemasInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReorderThreadFieldSchemasOutputFields(
            field_name="reorderThreadFieldSchemas", arguments=cleared_arguments
        )

    @classmethod
    def upsert_thread_field(
        cls, input: UpsertThreadFieldInput
    ) -> UpsertThreadFieldOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpsertThreadFieldInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpsertThreadFieldOutputFields(
            field_name="upsertThreadField", arguments=cleared_arguments
        )

    @classmethod
    def bulk_upsert_thread_fields(
        cls, input: BulkUpsertThreadFieldsInput
    ) -> BulkUpsertThreadFieldsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "BulkUpsertThreadFieldsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return BulkUpsertThreadFieldsOutputFields(
            field_name="bulkUpsertThreadFields", arguments=cleared_arguments
        )

    @classmethod
    def delete_thread_field(
        cls, input: DeleteThreadFieldInput
    ) -> DeleteThreadFieldOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteThreadFieldInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteThreadFieldOutputFields(
            field_name="deleteThreadField", arguments=cleared_arguments
        )

    @classmethod
    def create_workflow_rule(
        cls, input: CreateWorkflowRuleInput
    ) -> CreateWorkflowRuleOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateWorkflowRuleInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateWorkflowRuleOutputFields(
            field_name="createWorkflowRule", arguments=cleared_arguments
        )

    @classmethod
    def update_workflow_rule(
        cls, input: UpdateWorkflowRuleInput
    ) -> UpdateWorkflowRuleOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateWorkflowRuleInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateWorkflowRuleOutputFields(
            field_name="updateWorkflowRule", arguments=cleared_arguments
        )

    @classmethod
    def delete_workflow_rule(
        cls, input: DeleteWorkflowRuleInput
    ) -> DeleteWorkflowRuleOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteWorkflowRuleInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteWorkflowRuleOutputFields(
            field_name="deleteWorkflowRule", arguments=cleared_arguments
        )

    @classmethod
    def send_chat(cls, input: SendChatInput) -> SendChatOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SendChatInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SendChatOutputFields(field_name="sendChat", arguments=cleared_arguments)

    @classmethod
    def send_customer_chat(
        cls, input: SendCustomerChatInput
    ) -> SendCustomerChatOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SendCustomerChatInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SendCustomerChatOutputFields(
            field_name="sendCustomerChat", arguments=cleared_arguments
        )

    @classmethod
    def create_chat_app(cls, input: CreateChatAppInput) -> CreateChatAppOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateChatAppInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateChatAppOutputFields(
            field_name="createChatApp", arguments=cleared_arguments
        )

    @classmethod
    def update_chat_app(cls, input: UpdateChatAppInput) -> UpdateChatAppOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateChatAppInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateChatAppOutputFields(
            field_name="updateChatApp", arguments=cleared_arguments
        )

    @classmethod
    def delete_chat_app(cls, input: DeleteChatAppInput) -> DeleteChatAppOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteChatAppInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteChatAppOutputFields(
            field_name="deleteChatApp", arguments=cleared_arguments
        )

    @classmethod
    def create_chat_app_secret(
        cls, input: CreateChatAppSecretInput
    ) -> CreateChatAppSecretOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateChatAppSecretInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateChatAppSecretOutputFields(
            field_name="createChatAppSecret", arguments=cleared_arguments
        )

    @classmethod
    def delete_chat_app_secret(
        cls, input: DeleteChatAppSecretInput
    ) -> DeleteChatAppSecretOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteChatAppSecretInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteChatAppSecretOutputFields(
            field_name="deleteChatAppSecret", arguments=cleared_arguments
        )

    @classmethod
    def send_ms_teams_message(
        cls, input: SendMSTeamsMessageInput
    ) -> SendMSTeamsMessageOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SendMSTeamsMessageInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SendMSTeamsMessageOutputFields(
            field_name="sendMSTeamsMessage", arguments=cleared_arguments
        )

    @classmethod
    def send_slack_message(
        cls, input: SendSlackMessageInput
    ) -> SendSlackMessageOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SendSlackMessageInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SendSlackMessageOutputFields(
            field_name="sendSlackMessage", arguments=cleared_arguments
        )

    @classmethod
    def share_thread_to_user_in_slack(
        cls, input: ShareThreadToUserInSlackInput
    ) -> ShareThreadToUserInSlackOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ShareThreadToUserInSlackInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ShareThreadToUserInSlackOutputFields(
            field_name="shareThreadToUserInSlack", arguments=cleared_arguments
        )

    @classmethod
    def send_discord_message(
        cls, input: SendDiscordMessageInput
    ) -> SendDiscordMessageOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SendDiscordMessageInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SendDiscordMessageOutputFields(
            field_name="sendDiscordMessage", arguments=cleared_arguments
        )

    @classmethod
    def toggle_slack_message_reaction(
        cls, input: ToggleSlackMessageReactionInput
    ) -> ToggleSlackMessageReactionOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ToggleSlackMessageReactionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ToggleSlackMessageReactionOutputFields(
            field_name="toggleSlackMessageReaction", arguments=cleared_arguments
        )

    @classmethod
    def fork_thread(cls, input: ForkThreadInput) -> ForkThreadOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ForkThreadInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ForkThreadOutputFields(
            field_name="forkThread", arguments=cleared_arguments
        )

    @classmethod
    def update_connected_slack_channel(
        cls, input: UpdateConnectedSlackChannelInput
    ) -> UpdateConnectedSlackChannelOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateConnectedSlackChannelInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateConnectedSlackChannelOutputFields(
            field_name="updateConnectedSlackChannel", arguments=cleared_arguments
        )

    @classmethod
    def create_customer_event(
        cls, input: CreateCustomerEventInput
    ) -> CreateCustomerEventOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateCustomerEventInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateCustomerEventOutputFields(
            field_name="createCustomerEvent", arguments=cleared_arguments
        )

    @classmethod
    def create_thread_event(
        cls, input: CreateThreadEventInput
    ) -> CreateThreadEventOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateThreadEventInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateThreadEventOutputFields(
            field_name="createThreadEvent", arguments=cleared_arguments
        )

    @classmethod
    def create_workspace_email_domain_settings(
        cls, input: CreateWorkspaceEmailDomainSettingsInput
    ) -> CreateWorkspaceEmailDomainSettingsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "CreateWorkspaceEmailDomainSettingsInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateWorkspaceEmailDomainSettingsOutputFields(
            field_name="createWorkspaceEmailDomainSettings", arguments=cleared_arguments
        )

    @classmethod
    def delete_workspace_email_domain_settings(
        cls,
    ) -> DeleteWorkspaceEmailDomainSettingsOutputFields:
        return DeleteWorkspaceEmailDomainSettingsOutputFields(
            field_name="deleteWorkspaceEmailDomainSettings"
        )

    @classmethod
    def verify_workspace_email_forwarding_settings(
        cls, input: VerifyWorkspaceEmailForwardingSettingsInput
    ) -> VerifyWorkspaceEmailForwardingSettingsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "VerifyWorkspaceEmailForwardingSettingsInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return VerifyWorkspaceEmailForwardingSettingsOutputFields(
            field_name="verifyWorkspaceEmailForwardingSettings",
            arguments=cleared_arguments,
        )

    @classmethod
    def verify_workspace_email_dns_settings(
        cls,
    ) -> VerifyWorkspaceEmailDnsSettingsOutputFields:
        return VerifyWorkspaceEmailDnsSettingsOutputFields(
            field_name="verifyWorkspaceEmailDnsSettings"
        )

    @classmethod
    def update_workspace_email_settings(
        cls, input: UpdateWorkspaceEmailSettingsInput
    ) -> UpdateWorkspaceEmailSettingsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateWorkspaceEmailSettingsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateWorkspaceEmailSettingsOutputFields(
            field_name="updateWorkspaceEmailSettings", arguments=cleared_arguments
        )

    @classmethod
    def add_workspace_alternate_support_email_address(
        cls, input: AddWorkspaceAlternateSupportEmailAddressInput
    ) -> AddWorkspaceAlternateSupportEmailAddressOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "AddWorkspaceAlternateSupportEmailAddressInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddWorkspaceAlternateSupportEmailAddressOutputFields(
            field_name="addWorkspaceAlternateSupportEmailAddress",
            arguments=cleared_arguments,
        )

    @classmethod
    def remove_workspace_alternate_support_email_address(
        cls, input: RemoveWorkspaceAlternateSupportEmailAddressInput
    ) -> RemoveWorkspaceAlternateSupportEmailAddressOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "RemoveWorkspaceAlternateSupportEmailAddressInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveWorkspaceAlternateSupportEmailAddressOutputFields(
            field_name="removeWorkspaceAlternateSupportEmailAddress",
            arguments=cleared_arguments,
        )

    @classmethod
    def send_new_email(cls, input: SendNewEmailInput) -> SendNewEmailOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SendNewEmailInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SendNewEmailOutputFields(
            field_name="sendNewEmail", arguments=cleared_arguments
        )

    @classmethod
    def reply_to_email(cls, input: ReplyToEmailInput) -> ReplyToEmailOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReplyToEmailInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReplyToEmailOutputFields(
            field_name="replyToEmail", arguments=cleared_arguments
        )

    @classmethod
    def create_email_preview_url(
        cls, input: CreateEmailPreviewUrlInput
    ) -> CreateEmailPreviewUrlOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateEmailPreviewUrlInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateEmailPreviewUrlOutputFields(
            field_name="createEmailPreviewUrl", arguments=cleared_arguments
        )

    @classmethod
    def send_bulk_email(cls, input: SendBulkEmailInput) -> SendBulkEmailOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SendBulkEmailInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SendBulkEmailOutputFields(
            field_name="sendBulkEmail", arguments=cleared_arguments
        )

    @classmethod
    def create_attachment_download_url(
        cls, input: CreateAttachmentDownloadUrlInput
    ) -> CreateAttachmentDownloadUrlOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateAttachmentDownloadUrlInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateAttachmentDownloadUrlOutputFields(
            field_name="createAttachmentDownloadUrl", arguments=cleared_arguments
        )

    @classmethod
    def create_attachment_upload_url(
        cls, input: CreateAttachmentUploadUrlInput
    ) -> CreateAttachmentUploadUrlOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateAttachmentUploadUrlInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateAttachmentUploadUrlOutputFields(
            field_name="createAttachmentUploadUrl", arguments=cleared_arguments
        )

    @classmethod
    def create_machine_user(
        cls, input: CreateMachineUserInput
    ) -> CreateMachineUserOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateMachineUserInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateMachineUserOutputFields(
            field_name="createMachineUser", arguments=cleared_arguments
        )

    @classmethod
    def delete_machine_user(
        cls, input: DeleteMachineUserInput
    ) -> DeleteMachineUserOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteMachineUserInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteMachineUserOutputFields(
            field_name="deleteMachineUser", arguments=cleared_arguments
        )

    @classmethod
    def update_machine_user(
        cls, input: UpdateMachineUserInput
    ) -> UpdateMachineUserOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateMachineUserInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateMachineUserOutputFields(
            field_name="updateMachineUser", arguments=cleared_arguments
        )

    @classmethod
    def create_api_key(cls, input: CreateApiKeyInput) -> CreateApiKeyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateApiKeyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateApiKeyOutputFields(
            field_name="createApiKey", arguments=cleared_arguments
        )

    @classmethod
    def update_api_key(cls, input: UpdateApiKeyInput) -> UpdateApiKeyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateApiKeyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateApiKeyOutputFields(
            field_name="updateApiKey", arguments=cleared_arguments
        )

    @classmethod
    def delete_api_key(cls, input: DeleteApiKeyInput) -> DeleteApiKeyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteApiKeyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteApiKeyOutputFields(
            field_name="deleteApiKey", arguments=cleared_arguments
        )

    @classmethod
    def create_my_slack_integration(
        cls, input: CreateMySlackIntegrationInput
    ) -> CreateMySlackIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateMySlackIntegrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateMySlackIntegrationOutputFields(
            field_name="createMySlackIntegration", arguments=cleared_arguments
        )

    @classmethod
    def delete_my_slack_integration(cls) -> DeleteMySlackIntegrationOutputFields:
        return DeleteMySlackIntegrationOutputFields(
            field_name="deleteMySlackIntegration"
        )

    @classmethod
    def create_user_auth_slack_integration(
        cls, input: CreateUserAuthSlackIntegrationInput
    ) -> CreateUserAuthSlackIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateUserAuthSlackIntegrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateUserAuthSlackIntegrationOutputFields(
            field_name="createUserAuthSlackIntegration", arguments=cleared_arguments
        )

    @classmethod
    def delete_user_auth_slack_integration(
        cls, input: DeleteUserAuthSlackIntegrationInput
    ) -> DeleteUserAuthSlackIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteUserAuthSlackIntegrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteUserAuthSlackIntegrationOutputFields(
            field_name="deleteUserAuthSlackIntegration", arguments=cleared_arguments
        )

    @classmethod
    def create_workspace_slack_integration(
        cls, input: CreateWorkspaceSlackIntegrationInput
    ) -> CreateWorkspaceSlackIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateWorkspaceSlackIntegrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateWorkspaceSlackIntegrationOutputFields(
            field_name="createWorkspaceSlackIntegration", arguments=cleared_arguments
        )

    @classmethod
    def delete_workspace_slack_integration(
        cls, input: DeleteWorkspaceSlackIntegrationInput
    ) -> DeleteWorkspaceSlackIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteWorkspaceSlackIntegrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteWorkspaceSlackIntegrationOutputFields(
            field_name="deleteWorkspaceSlackIntegration", arguments=cleared_arguments
        )

    @classmethod
    def create_workspace_slack_channel_integration(
        cls, input: CreateWorkspaceSlackChannelIntegrationInput
    ) -> CreateWorkspaceSlackChannelIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "CreateWorkspaceSlackChannelIntegrationInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateWorkspaceSlackChannelIntegrationOutputFields(
            field_name="createWorkspaceSlackChannelIntegration",
            arguments=cleared_arguments,
        )

    @classmethod
    def delete_workspace_slack_channel_integration(
        cls, input: DeleteWorkspaceSlackChannelIntegrationInput
    ) -> DeleteWorkspaceSlackChannelIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "DeleteWorkspaceSlackChannelIntegrationInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteWorkspaceSlackChannelIntegrationOutputFields(
            field_name="deleteWorkspaceSlackChannelIntegration",
            arguments=cleared_arguments,
        )

    @classmethod
    def create_workspace_discord_channel_integration(
        cls, input: CreateWorkspaceDiscordChannelIntegrationInput
    ) -> CreateWorkspaceDiscordChannelIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "CreateWorkspaceDiscordChannelIntegrationInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateWorkspaceDiscordChannelIntegrationOutputFields(
            field_name="createWorkspaceDiscordChannelIntegration",
            arguments=cleared_arguments,
        )

    @classmethod
    def delete_workspace_discord_channel_integration(
        cls, input: DeleteWorkspaceDiscordChannelIntegrationInput
    ) -> DeleteWorkspaceDiscordChannelIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {
                "type": "DeleteWorkspaceDiscordChannelIntegrationInput!",
                "value": input,
            }
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteWorkspaceDiscordChannelIntegrationOutputFields(
            field_name="deleteWorkspaceDiscordChannelIntegration",
            arguments=cleared_arguments,
        )

    @classmethod
    def create_workspace_discord_integration(
        cls, input: CreateWorkspaceDiscordIntegrationInput
    ) -> CreateWorkspaceDiscordIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateWorkspaceDiscordIntegrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateWorkspaceDiscordIntegrationOutputFields(
            field_name="createWorkspaceDiscordIntegration", arguments=cleared_arguments
        )

    @classmethod
    def delete_workspace_discord_integration(
        cls, input: DeleteWorkspaceDiscordIntegrationInput
    ) -> DeleteWorkspaceDiscordIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteWorkspaceDiscordIntegrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteWorkspaceDiscordIntegrationOutputFields(
            field_name="deleteWorkspaceDiscordIntegration", arguments=cleared_arguments
        )

    @classmethod
    def create_my_linear_integration(
        cls, input: CreateMyLinearIntegrationInput
    ) -> CreateMyLinearIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateMyLinearIntegrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateMyLinearIntegrationOutputFields(
            field_name="createMyLinearIntegration", arguments=cleared_arguments
        )

    @classmethod
    def delete_my_linear_integration(cls) -> DeleteMyLinearIntegrationOutputFields:
        return DeleteMyLinearIntegrationOutputFields(
            field_name="deleteMyLinearIntegration"
        )

    @classmethod
    def create_my_ms_teams_integration(
        cls, input: CreateMyMSTeamsIntegrationInput
    ) -> CreateMyMSTeamsIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateMyMSTeamsIntegrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateMyMSTeamsIntegrationOutputFields(
            field_name="createMyMSTeamsIntegration", arguments=cleared_arguments
        )

    @classmethod
    def delete_my_ms_teams_integration(cls) -> DeleteMyMSTeamsIntegrationOutputFields:
        return DeleteMyMSTeamsIntegrationOutputFields(
            field_name="deleteMyMSTeamsIntegration"
        )

    @classmethod
    def create_workspace_ms_teams_integration(
        cls, input: CreateWorkspaceMSTeamsIntegrationInput
    ) -> CreateWorkspaceMSTeamsIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateWorkspaceMSTeamsIntegrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateWorkspaceMSTeamsIntegrationOutputFields(
            field_name="createWorkspaceMSTeamsIntegration", arguments=cleared_arguments
        )

    @classmethod
    def delete_workspace_ms_teams_integration(
        cls, input: DeleteWorkspaceMSTeamsIntegrationInput
    ) -> DeleteWorkspaceMSTeamsIntegrationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteWorkspaceMSTeamsIntegrationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteWorkspaceMSTeamsIntegrationOutputFields(
            field_name="deleteWorkspaceMSTeamsIntegration", arguments=cleared_arguments
        )

    @classmethod
    def update_setting(cls, input: UpdateSettingInput) -> UpdateSettingOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateSettingInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateSettingOutputFields(
            field_name="updateSetting", arguments=cleared_arguments
        )

    @classmethod
    def create_customer_card_config(
        cls, input: CreateCustomerCardConfigInput
    ) -> CreateCustomerCardConfigOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateCustomerCardConfigInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateCustomerCardConfigOutputFields(
            field_name="createCustomerCardConfig", arguments=cleared_arguments
        )

    @classmethod
    def update_customer_card_config(
        cls, input: UpdateCustomerCardConfigInput
    ) -> UpdateCustomerCardConfigOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateCustomerCardConfigInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateCustomerCardConfigOutputFields(
            field_name="updateCustomerCardConfig", arguments=cleared_arguments
        )

    @classmethod
    def delete_customer_card_config(
        cls, input: DeleteCustomerCardConfigInput
    ) -> DeleteCustomerCardConfigOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteCustomerCardConfigInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteCustomerCardConfigOutputFields(
            field_name="deleteCustomerCardConfig", arguments=cleared_arguments
        )

    @classmethod
    def reorder_customer_card_configs(
        cls, input: ReorderCustomerCardConfigsInput
    ) -> ReorderCustomerCardConfigsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReorderCustomerCardConfigsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReorderCustomerCardConfigsOutputFields(
            field_name="reorderCustomerCardConfigs", arguments=cleared_arguments
        )

    @classmethod
    def reload_customer_card_instance(
        cls, input: ReloadCustomerCardInstanceInput
    ) -> ReloadCustomerCardInstanceOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReloadCustomerCardInstanceInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReloadCustomerCardInstanceOutputFields(
            field_name="reloadCustomerCardInstance", arguments=cleared_arguments
        )

    @classmethod
    def create_webhook_target(
        cls, input: CreateWebhookTargetInput
    ) -> CreateWebhookTargetOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateWebhookTargetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateWebhookTargetOutputFields(
            field_name="createWebhookTarget", arguments=cleared_arguments
        )

    @classmethod
    def update_webhook_target(
        cls, input: UpdateWebhookTargetInput
    ) -> UpdateWebhookTargetOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateWebhookTargetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateWebhookTargetOutputFields(
            field_name="updateWebhookTarget", arguments=cleared_arguments
        )

    @classmethod
    def delete_webhook_target(
        cls, input: DeleteWebhookTargetInput
    ) -> DeleteWebhookTargetOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteWebhookTargetInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteWebhookTargetOutputFields(
            field_name="deleteWebhookTarget", arguments=cleared_arguments
        )

    @classmethod
    def create_thread(cls, input: CreateThreadInput) -> CreateThreadOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateThreadInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateThreadOutputFields(
            field_name="createThread", arguments=cleared_arguments
        )

    @classmethod
    def assign_thread(cls, input: AssignThreadInput) -> AssignThreadOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AssignThreadInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AssignThreadOutputFields(
            field_name="assignThread", arguments=cleared_arguments
        )

    @classmethod
    def unassign_thread(cls, input: UnassignThreadInput) -> UnassignThreadOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UnassignThreadInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UnassignThreadOutputFields(
            field_name="unassignThread", arguments=cleared_arguments
        )

    @classmethod
    def add_additional_assignees(
        cls, input: AddAdditionalAssigneesInput
    ) -> AddAdditionalAssigneesOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddAdditionalAssigneesInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddAdditionalAssigneesOutputFields(
            field_name="addAdditionalAssignees", arguments=cleared_arguments
        )

    @classmethod
    def remove_additional_assignees(
        cls, input: RemoveAdditionalAssigneesInput
    ) -> RemoveAdditionalAssigneesOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveAdditionalAssigneesInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveAdditionalAssigneesOutputFields(
            field_name="removeAdditionalAssignees", arguments=cleared_arguments
        )

    @classmethod
    def snooze_thread(cls, input: SnoozeThreadInput) -> SnoozeThreadOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SnoozeThreadInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SnoozeThreadOutputFields(
            field_name="snoozeThread", arguments=cleared_arguments
        )

    @classmethod
    def mark_thread_as_done(
        cls, input: MarkThreadAsDoneInput
    ) -> MarkThreadAsDoneOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MarkThreadAsDoneInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarkThreadAsDoneOutputFields(
            field_name="markThreadAsDone", arguments=cleared_arguments
        )

    @classmethod
    def mark_thread_as_todo(
        cls, input: MarkThreadAsTodoInput
    ) -> MarkThreadAsTodoOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MarkThreadAsTodoInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarkThreadAsTodoOutputFields(
            field_name="markThreadAsTodo", arguments=cleared_arguments
        )

    @classmethod
    def change_thread_customer(
        cls, input: ChangeThreadCustomerInput
    ) -> ChangeThreadCustomerOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ChangeThreadCustomerInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ChangeThreadCustomerOutputFields(
            field_name="changeThreadCustomer", arguments=cleared_arguments
        )

    @classmethod
    def change_thread_priority(
        cls, input: ChangeThreadPriorityInput
    ) -> ChangeThreadPriorityOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ChangeThreadPriorityInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ChangeThreadPriorityOutputFields(
            field_name="changeThreadPriority", arguments=cleared_arguments
        )

    @classmethod
    def update_thread_title(
        cls, input: UpdateThreadTitleInput
    ) -> UpdateThreadTitleOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateThreadTitleInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateThreadTitleOutputFields(
            field_name="updateThreadTitle", arguments=cleared_arguments
        )

    @classmethod
    def update_thread_tenant(
        cls, input: UpdateThreadTenantInput
    ) -> UpdateThreadTenantOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateThreadTenantInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateThreadTenantOutputFields(
            field_name="updateThreadTenant", arguments=cleared_arguments
        )

    @classmethod
    def update_thread_tier(
        cls, input: UpdateThreadTierInput
    ) -> UpdateThreadTierOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateThreadTierInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateThreadTierOutputFields(
            field_name="updateThreadTier", arguments=cleared_arguments
        )

    @classmethod
    def create_thread_discussion(
        cls, input: CreateThreadDiscussionInput
    ) -> CreateThreadDiscussionOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateThreadDiscussionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateThreadDiscussionOutputFields(
            field_name="createThreadDiscussion", arguments=cleared_arguments
        )

    @classmethod
    def send_thread_discussion_message(
        cls, input: SendThreadDiscussionMessageInput
    ) -> SendThreadDiscussionMessageOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SendThreadDiscussionMessageInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SendThreadDiscussionMessageOutputFields(
            field_name="sendThreadDiscussionMessage", arguments=cleared_arguments
        )

    @classmethod
    def mark_thread_discussion_as_resolved(
        cls, input: MarkThreadDiscussionAsResolvedInput
    ) -> MarkThreadDiscussionAsResolvedOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "MarkThreadDiscussionAsResolvedInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return MarkThreadDiscussionAsResolvedOutputFields(
            field_name="markThreadDiscussionAsResolved", arguments=cleared_arguments
        )

    @classmethod
    def reply_to_thread(cls, input: ReplyToThreadInput) -> ReplyToThreadOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReplyToThreadInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReplyToThreadOutputFields(
            field_name="replyToThread", arguments=cleared_arguments
        )

    @classmethod
    def upsert_my_email_signature(
        cls, input: UpsertMyEmailSignatureInput
    ) -> UpsertMyEmailSignatureOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpsertMyEmailSignatureInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpsertMyEmailSignatureOutputFields(
            field_name="upsertMyEmailSignature", arguments=cleared_arguments
        )

    @classmethod
    def create_autoresponder(
        cls, input: CreateAutoresponderInput
    ) -> CreateAutoresponderOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateAutoresponderInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateAutoresponderOutputFields(
            field_name="createAutoresponder", arguments=cleared_arguments
        )

    @classmethod
    def update_autoresponder(
        cls, input: UpdateAutoresponderInput
    ) -> UpdateAutoresponderOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateAutoresponderInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateAutoresponderOutputFields(
            field_name="updateAutoresponder", arguments=cleared_arguments
        )

    @classmethod
    def delete_autoresponder(
        cls, input: DeleteAutoresponderInput
    ) -> DeleteAutoresponderOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteAutoresponderInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteAutoresponderOutputFields(
            field_name="deleteAutoresponder", arguments=cleared_arguments
        )

    @classmethod
    def reorder_autoresponders(
        cls, input: ReorderAutorespondersInput
    ) -> ReorderAutorespondersOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ReorderAutorespondersInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ReorderAutorespondersOutputFields(
            field_name="reorderAutoresponders", arguments=cleared_arguments
        )

    @classmethod
    def upsert_tenant(cls, input: UpsertTenantInput) -> UpsertTenantOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpsertTenantInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpsertTenantOutputFields(
            field_name="upsertTenant", arguments=cleared_arguments
        )

    @classmethod
    def add_customer_to_tenants(
        cls, input: AddCustomerToTenantsInput
    ) -> AddCustomerToTenantsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddCustomerToTenantsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddCustomerToTenantsOutputFields(
            field_name="addCustomerToTenants", arguments=cleared_arguments
        )

    @classmethod
    def remove_customer_from_tenants(
        cls, input: RemoveCustomerFromTenantsInput
    ) -> RemoveCustomerFromTenantsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveCustomerFromTenantsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveCustomerFromTenantsOutputFields(
            field_name="removeCustomerFromTenants", arguments=cleared_arguments
        )

    @classmethod
    def set_customer_tenants(
        cls, input: SetCustomerTenantsInput
    ) -> SetCustomerTenantsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SetCustomerTenantsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SetCustomerTenantsOutputFields(
            field_name="setCustomerTenants", arguments=cleared_arguments
        )

    @classmethod
    def upsert_company(cls, input: UpsertCompanyInput) -> UpsertCompanyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpsertCompanyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpsertCompanyOutputFields(
            field_name="upsertCompany", arguments=cleared_arguments
        )

    @classmethod
    def start_service_authorization(
        cls, input: StartServiceAuthorizationInput
    ) -> StartServiceAuthorizationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "StartServiceAuthorizationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return StartServiceAuthorizationOutputFields(
            field_name="startServiceAuthorization", arguments=cleared_arguments
        )

    @classmethod
    def complete_service_authorization(
        cls, input: CompleteServiceAuthorizationInput
    ) -> CompleteServiceAuthorizationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CompleteServiceAuthorizationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CompleteServiceAuthorizationOutputFields(
            field_name="completeServiceAuthorization", arguments=cleared_arguments
        )

    @classmethod
    def delete_service_authorization(
        cls, input: DeleteServiceAuthorizationInput
    ) -> DeleteServiceAuthorizationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteServiceAuthorizationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteServiceAuthorizationOutputFields(
            field_name="deleteServiceAuthorization", arguments=cleared_arguments
        )

    @classmethod
    def delete_my_service_authorization(
        cls, input: DeleteMyServiceAuthorizationInput
    ) -> DeleteMyServiceAuthorizationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteMyServiceAuthorizationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteMyServiceAuthorizationOutputFields(
            field_name="deleteMyServiceAuthorization", arguments=cleared_arguments
        )

    @classmethod
    def create_tier(cls, input: CreateTierInput) -> CreateTierOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateTierInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateTierOutputFields(
            field_name="createTier", arguments=cleared_arguments
        )

    @classmethod
    def update_tier(cls, input: UpdateTierInput) -> UpdateTierOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateTierInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateTierOutputFields(
            field_name="updateTier", arguments=cleared_arguments
        )

    @classmethod
    def delete_tier(cls, input: DeleteTierInput) -> DeleteTierOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteTierInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteTierOutputFields(
            field_name="deleteTier", arguments=cleared_arguments
        )

    @classmethod
    def create_service_level_agreement(
        cls, input: CreateServiceLevelAgreementInput
    ) -> CreateServiceLevelAgreementOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateServiceLevelAgreementInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateServiceLevelAgreementOutputFields(
            field_name="createServiceLevelAgreement", arguments=cleared_arguments
        )

    @classmethod
    def update_service_level_agreement(
        cls, input: UpdateServiceLevelAgreementInput
    ) -> UpdateServiceLevelAgreementOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateServiceLevelAgreementInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateServiceLevelAgreementOutputFields(
            field_name="updateServiceLevelAgreement", arguments=cleared_arguments
        )

    @classmethod
    def delete_service_level_agreement(
        cls, input: DeleteServiceLevelAgreementInput
    ) -> DeleteServiceLevelAgreementOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteServiceLevelAgreementInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteServiceLevelAgreementOutputFields(
            field_name="deleteServiceLevelAgreement", arguments=cleared_arguments
        )

    @classmethod
    def add_members_to_tier(
        cls, input: AddMembersToTierInput
    ) -> AddMembersToTierOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddMembersToTierInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddMembersToTierOutputFields(
            field_name="addMembersToTier", arguments=cleared_arguments
        )

    @classmethod
    def remove_members_from_tier(
        cls, input: RemoveMembersFromTierInput
    ) -> RemoveMembersFromTierOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveMembersFromTierInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveMembersFromTierOutputFields(
            field_name="removeMembersFromTier", arguments=cleared_arguments
        )

    @classmethod
    def update_company_tier(
        cls, input: UpdateCompanyTierInput
    ) -> UpdateCompanyTierOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateCompanyTierInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateCompanyTierOutputFields(
            field_name="updateCompanyTier", arguments=cleared_arguments
        )

    @classmethod
    def update_tenant_tier(
        cls, input: UpdateTenantTierInput
    ) -> UpdateTenantTierOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateTenantTierInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateTenantTierOutputFields(
            field_name="updateTenantTier", arguments=cleared_arguments
        )

    @classmethod
    def upsert_business_hours(
        cls, input: UpsertBusinessHoursInput
    ) -> UpsertBusinessHoursOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpsertBusinessHoursInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpsertBusinessHoursOutputFields(
            field_name="upsertBusinessHours", arguments=cleared_arguments
        )

    @classmethod
    def delete_business_hours(cls) -> DeleteBusinessHoursOutputFields:
        return DeleteBusinessHoursOutputFields(field_name="deleteBusinessHours")

    @classmethod
    def sync_business_hours_slots(
        cls, input: SyncBusinessHoursSlotsInput
    ) -> SyncBusinessHoursSlotsOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "SyncBusinessHoursSlotsInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return SyncBusinessHoursSlotsOutputFields(
            field_name="syncBusinessHoursSlots", arguments=cleared_arguments
        )

    @classmethod
    def create_checkout_session(
        cls, input: CreateCheckoutSessionInput
    ) -> CreateCheckoutSessionOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateCheckoutSessionInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateCheckoutSessionOutputFields(
            field_name="createCheckoutSession", arguments=cleared_arguments
        )

    @classmethod
    def create_billing_portal_session(cls) -> CreateBillingPortalSessionOutputFields:
        return CreateBillingPortalSessionOutputFields(
            field_name="createBillingPortalSession"
        )

    @classmethod
    def calculate_role_change_cost(
        cls, input: CalculateRoleChangeCostInput
    ) -> CalculateRoleChangeCostOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CalculateRoleChangeCostInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CalculateRoleChangeCostOutputFields(
            field_name="calculateRoleChangeCost", arguments=cleared_arguments
        )

    @classmethod
    def add_user_to_active_billing_rota(
        cls, input: AddUserToActiveBillingRotaInput
    ) -> AddUserToActiveBillingRotaOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "AddUserToActiveBillingRotaInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return AddUserToActiveBillingRotaOutputFields(
            field_name="addUserToActiveBillingRota", arguments=cleared_arguments
        )

    @classmethod
    def remove_user_from_active_billing_rota(
        cls, input: RemoveUserFromActiveBillingRotaInput
    ) -> RemoveUserFromActiveBillingRotaOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "RemoveUserFromActiveBillingRotaInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return RemoveUserFromActiveBillingRotaOutputFields(
            field_name="removeUserFromActiveBillingRota", arguments=cleared_arguments
        )

    @classmethod
    def update_active_billing_rota(
        cls, input: UpdateActiveBillingRotaInput
    ) -> UpdateActiveBillingRotaOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateActiveBillingRotaInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateActiveBillingRotaOutputFields(
            field_name="updateActiveBillingRota", arguments=cleared_arguments
        )

    @classmethod
    def change_billing_plan(
        cls, input: ChangeBillingPlanInput
    ) -> ChangeBillingPlanOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "ChangeBillingPlanInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ChangeBillingPlanOutputFields(
            field_name="changeBillingPlan", arguments=cleared_arguments
        )

    @classmethod
    def preview_billing_plan_change(
        cls, input: PreviewBillingPlanChangeInput
    ) -> PreviewBillingPlanChangeOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "PreviewBillingPlanChangeInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return PreviewBillingPlanChangeOutputFields(
            field_name="previewBillingPlanChange", arguments=cleared_arguments
        )

    @classmethod
    def regenerate_workspace_hmac(cls) -> RegenerateWorkspaceHmacOutputFields:
        return RegenerateWorkspaceHmacOutputFields(field_name="regenerateWorkspaceHmac")

    @classmethod
    def create_indexed_document(
        cls, input: CreateIndexedDocumentInput
    ) -> CreateIndexedDocumentOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateIndexedDocumentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateIndexedDocumentOutputFields(
            field_name="createIndexedDocument", arguments=cleared_arguments
        )

    @classmethod
    def delete_indexed_document(
        cls, input: DeleteIndexedDocumentInput
    ) -> DeleteIndexedDocumentOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteIndexedDocumentInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteIndexedDocumentOutputFields(
            field_name="deleteIndexedDocument", arguments=cleared_arguments
        )

    @classmethod
    def update_generated_reply(
        cls, input: UpdateGeneratedReplyInput
    ) -> UpdateGeneratedReplyOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "UpdateGeneratedReplyInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return UpdateGeneratedReplyOutputFields(
            field_name="updateGeneratedReply", arguments=cleared_arguments
        )

    @classmethod
    def create_thread_channel_association(
        cls, input: CreateThreadChannelAssociationInput
    ) -> CreateThreadChannelAssociationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateThreadChannelAssociationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateThreadChannelAssociationOutputFields(
            field_name="createThreadChannelAssociation", arguments=cleared_arguments
        )

    @classmethod
    def delete_thread_channel_association(
        cls, input: DeleteThreadChannelAssociationInput
    ) -> DeleteThreadChannelAssociationOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteThreadChannelAssociationInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteThreadChannelAssociationOutputFields(
            field_name="deleteThreadChannelAssociation", arguments=cleared_arguments
        )

    @classmethod
    def create_workspace_file_upload_url(
        cls, input: CreateWorkspaceFileUploadUrlInput
    ) -> CreateWorkspaceFileUploadUrlOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "CreateWorkspaceFileUploadUrlInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CreateWorkspaceFileUploadUrlOutputFields(
            field_name="createWorkspaceFileUploadUrl", arguments=cleared_arguments
        )

    @classmethod
    def delete_workspace_file(
        cls, input: DeleteWorkspaceFileInput
    ) -> DeleteWorkspaceFileOutputFields:
        arguments: Dict[str, Dict[str, Any]] = {
            "input": {"type": "DeleteWorkspaceFileInput!", "value": input}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return DeleteWorkspaceFileOutputFields(
            field_name="deleteWorkspaceFile", arguments=cleared_arguments
        )

# Generated by ariadne-codegen
# Source: schema.graphql

from enum import Enum


class UserStatus(str, Enum):
    ONLINE = "ONLINE"
    OFFLINE = "OFFLINE"
    BREAK = "BREAK"


class CustomerStatus(str, Enum):
    IDLE = "IDLE"
    ACTIVE = "ACTIVE"
    SNOOZED = "SNOOZED"


class ThreadFieldSchemaType(str, Enum):
    STRING = "STRING"
    BOOL = "BOOL"
    ENUM = "ENUM"


class ThreadsLayout(str, Enum):
    TABLE = "TABLE"
    BOARD = "BOARD"


class ThreadsGroupBy(str, Enum):
    NONE = "NONE"
    PRIORITY = "PRIORITY"
    STATUS = "STATUS"
    COMPANY = "COMPANY"
    LABEL = "LABEL"
    TIER = "TIER"
    CHANNEL = "CHANNEL"
    ASSIGNEE = "ASSIGNEE"
    CUSTOMER_GROUP = "CUSTOMER_GROUP"
    TENANT = "TENANT"


class SortDirection(str, Enum):
    ASC = "ASC"
    DESC = "DESC"


class CustomersSortField(str, Enum):
    FULL_NAME = "FULL_NAME"


class EmailAuthenticity(str, Enum):
    PASS = "PASS"
    FAIL = "FAIL"
    UNKNOWN = "UNKNOWN"


class EmailSendStatus(str, Enum):
    PENDING = "PENDING"
    SENT = "SENT"
    BOUNCED = "BOUNCED"
    FAILED = "FAILED"


class ComponentTextSize(str, Enum):
    S = "S"
    M = "M"
    L = "L"


class ComponentTextColor(str, Enum):
    NORMAL = "NORMAL"
    MUTED = "MUTED"
    SUCCESS = "SUCCESS"
    WARNING = "WARNING"
    ERROR = "ERROR"


class ComponentPlainTextSize(str, Enum):
    S = "S"
    M = "M"
    L = "L"


class ComponentPlainTextColor(str, Enum):
    NORMAL = "NORMAL"
    MUTED = "MUTED"
    SUCCESS = "SUCCESS"
    WARNING = "WARNING"
    ERROR = "ERROR"


class ComponentBadgeColor(str, Enum):
    GREY = "GREY"
    GREEN = "GREEN"
    YELLOW = "YELLOW"
    RED = "RED"
    BLUE = "BLUE"


class ComponentSpacerSize(str, Enum):
    XS = "XS"
    S = "S"
    M = "M"
    L = "L"
    XL = "XL"


class ComponentDividerSpacingSize(str, Enum):
    XS = "XS"
    S = "S"
    M = "M"
    L = "L"
    XL = "XL"


class SettingScopeType(str, Enum):
    USER = "USER"
    CHAT = "CHAT"
    USER_EMAIL_NOTIFICATIONS = "USER_EMAIL_NOTIFICATIONS"
    USER_SLACK_NOTIFICATIONS = "USER_SLACK_NOTIFICATIONS"
    WORKSPACE_SLACK_CHANNEL = "WORKSPACE_SLACK_CHANNEL"
    WORKSPACE_SLACK_NOTIFICATIONS = "WORKSPACE_SLACK_NOTIFICATIONS"
    WORKSPACE_DISCORD_NOTIFICATIONS = "WORKSPACE_DISCORD_NOTIFICATIONS"
    WORKSPACE = "WORKSPACE"


class MetricDimensionType(str, Enum):
    COMPANY = "COMPANY"
    CUSTOMER_GROUP = "CUSTOMER_GROUP"
    LABEL_TYPE = "LABEL_TYPE"
    MESSAGE_SOURCE = "MESSAGE_SOURCE"
    PRIORITY = "PRIORITY"
    THREAD_FIELD = "THREAD_FIELD"
    TIER = "TIER"


class TimeSeriesMetricDimensionType(str, Enum):
    COMPANY = "COMPANY"
    CUSTOMER_GROUP = "CUSTOMER_GROUP"
    LABEL_TYPE = "LABEL_TYPE"
    MESSAGE_SOURCE = "MESSAGE_SOURCE"
    PRIORITY = "PRIORITY"
    THREAD_FIELD = "THREAD_FIELD"
    TIER = "TIER"


class TimeSeriesMetricIntervalUnit(str, Enum):
    HOUR = "HOUR"
    DAY = "DAY"


class ServiceLevelAgreementType(str, Enum):
    FIRST_RESPONSE_TIME = "FIRST_RESPONSE_TIME"
    NEXT_RESPONSE_TIME = "NEXT_RESPONSE_TIME"


class ThreadsSortField(str, Enum):
    STATUS_CHANGED_AT = "STATUS_CHANGED_AT"
    CREATED_AT = "CREATED_AT"
    CLOSEST_TO_BREACH_SLA = "CLOSEST_TO_BREACH_SLA"
    LAST_INBOUND_MESSAGE_AT = "LAST_INBOUND_MESSAGE_AT"
    PRIORITY = "PRIORITY"


class MutationErrorType(str, Enum):
    VALIDATION = "VALIDATION"
    FORBIDDEN = "FORBIDDEN"
    INTERNAL = "INTERNAL"


class MutationFieldErrorType(str, Enum):
    VALIDATION = "VALIDATION"
    REQUIRED = "REQUIRED"
    NOT_FOUND = "NOT_FOUND"


class ThreadLinkStatus(str, Enum):
    TODO = "TODO"
    IN_PROGRESS = "IN_PROGRESS"
    DONE = "DONE"
    UNKNOWN = "UNKNOWN"


class LinearIssueStateType(str, Enum):
    TRIAGE = "TRIAGE"
    BACKLOG = "BACKLOG"
    UNSTARTED = "UNSTARTED"
    STARTED = "STARTED"
    COMPLETED = "COMPLETED"
    CANCELLED = "CANCELLED"
    UNKNOWN = "UNKNOWN"


class AttachmentVirusScanResult(str, Enum):
    CLEAN = "CLEAN"
    INFECTED = "INFECTED"
    FAILED = "FAILED"
    PENDING = "PENDING"


class AttachmentType(str, Enum):
    EMAIL = "EMAIL"
    CUSTOM_TIMELINE_ENTRY = "CUSTOM_TIMELINE_ENTRY"
    CHAT = "CHAT"
    SLACK = "SLACK"
    THREAD_DISCUSSION = "THREAD_DISCUSSION"
    MS_TEAMS = "MS_TEAMS"


class UpsertResult(str, Enum):
    UPDATED = "UPDATED"
    CREATED = "CREATED"
    NOOP = "NOOP"


class AutoresponderMessageSource(str, Enum):
    EMAIL = "EMAIL"
    API = "API"
    CHAT = "CHAT"
    SLACK = "SLACK"
    MS_TEAMS = "MS_TEAMS"


class GeneratedReplyFeedbackType(str, Enum):
    POSITIVE = "POSITIVE"
    NEGATIVE = "NEGATIVE"
    UNKNOWN = "UNKNOWN"


class DoneStatusDetail(str, Enum):
    IGNORED = "IGNORED"
    DONE_MANUALLY_SET = "DONE_MANUALLY_SET"
    DONE_AUTOMATICALLY_SET = "DONE_AUTOMATICALLY_SET"
    TIMER_EXPIRED = "TIMER_EXPIRED"


class StatusDetailType(str, Enum):
    CREATED = "CREATED"
    IN_PROGRESS = "IN_PROGRESS"
    NEW_REPLY = "NEW_REPLY"
    THREAD_LINK_UPDATED = "THREAD_LINK_UPDATED"
    THREAD_DISCUSSION_RESOLVED = "THREAD_DISCUSSION_RESOLVED"
    WAITING_FOR_CUSTOMER = "WAITING_FOR_CUSTOMER"
    WAITING_FOR_DURATION = "WAITING_FOR_DURATION"
    IGNORED = "IGNORED"
    DONE_MANUALLY_SET = "DONE_MANUALLY_SET"
    DONE_AUTOMATICALLY_SET = "DONE_AUTOMATICALLY_SET"
    TIMER_EXPIRED = "TIMER_EXPIRED"


class TodoStatusDetail(str, Enum):
    CREATED = "CREATED"
    IN_PROGRESS = "IN_PROGRESS"
    NEW_REPLY = "NEW_REPLY"
    THREAD_LINK_UPDATED = "THREAD_LINK_UPDATED"
    THREAD_DISCUSSION_RESOLVED = "THREAD_DISCUSSION_RESOLVED"


class SnoozeStatusDetail(str, Enum):
    WAITING_FOR_CUSTOMER = "WAITING_FOR_CUSTOMER"
    WAITING_FOR_DURATION = "WAITING_FOR_DURATION"


class ThreadStatus(str, Enum):
    TODO = "TODO"
    SNOOZED = "SNOOZED"
    DONE = "DONE"


class MessageSource(str, Enum):
    CHAT = "CHAT"
    EMAIL = "EMAIL"
    API = "API"
    SLACK = "SLACK"
    MS_TEAMS = "MS_TEAMS"
    DISCORD = "DISCORD"


class ThreadChannel(str, Enum):
    EMAIL = "EMAIL"
    SLACK = "SLACK"
    CHAT = "CHAT"
    API = "API"
    MS_TEAMS = "MS_TEAMS"
    DISCORD = "DISCORD"


class ServiceLevelAgreementStatus(str, Enum):
    PENDING = "PENDING"
    IMMINENT_BREACH = "IMMINENT_BREACH"
    BREACHING = "BREACHING"
    BREACHED = "BREACHED"
    ACHIEVED = "ACHIEVED"
    CANCELLED = "CANCELLED"


class ConnectedSlackChannelType(str, Enum):
    CUSTOMER = "CUSTOMER"
    DISCUSSION = "DISCUSSION"


class ChangeType(str, Enum):
    ADDED = "ADDED"
    UPDATED = "UPDATED"
    REMOVED = "REMOVED"


class ServiceAuthorizationStatus(str, Enum):
    PENDING_AUTH = "PENDING_AUTH"
    COMPLETED_AUTH = "COMPLETED_AUTH"
    CONNECTED = "CONNECTED"
    REINSTALL_REQUIRED = "REINSTALL_REQUIRED"


class WeekDay(str, Enum):
    MONDAY = "MONDAY"
    TUESDAY = "TUESDAY"
    WEDNESDAY = "WEDNESDAY"
    THURSDAY = "THURSDAY"
    FRIDAY = "FRIDAY"
    SATURDAY = "SATURDAY"
    SUNDAY = "SUNDAY"


class BillingSubscriptionStatus(str, Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class BillingPlanKey(str, Enum):
    LEGACY = "LEGACY"
    EVALUATE = "EVALUATE"
    LAUNCH = "LAUNCH"
    GROW = "GROW"
    SCALE = "SCALE"


class BillingSeatType(str, Enum):
    VIEWER = "VIEWER"
    MEMBER = "MEMBER"
    ENG_ROTA = "ENG_ROTA"


class BillingInterval(str, Enum):
    MONTH = "MONTH"
    YEAR = "YEAR"


class BillingIntervalUnit(str, Enum):
    MONTH = "MONTH"
    YEAR = "YEAR"


class CurrencyCode(str, Enum):
    USD = "USD"


class FeatureKey(str, Enum):
    BUSINESS_HOURS = "BUSINESS_HOURS"
    SLACK_DISCUSSIONS = "SLACK_DISCUSSIONS"
    SERVICE_LEVEL_AGREEMENTS = "SERVICE_LEVEL_AGREEMENTS"
    DATA_IMPORTERS = "DATA_IMPORTERS"
    MS_TEAMS_INTEGRATION = "MS_TEAMS_INTEGRATION"
    LIVE_CHAT = "LIVE_CHAT"
    WORKFLOW_RULES = "WORKFLOW_RULES"
    CONNECTED_CUSTOMER_SLACK_CHANNELS = "CONNECTED_CUSTOMER_SLACK_CHANNELS"
    CONNECTED_SUPPORT_EMAIL_ADDRESSES = "CONNECTED_SUPPORT_EMAIL_ADDRESSES"
    INSIGHTS_LOOKBACK_DAYS = "INSIGHTS_LOOKBACK_DAYS"
    BILLING_ROTA_SEATS = "BILLING_ROTA_SEATS"
    MORE_ACTIVE_ENG_ROTA_SEATS = "MORE_ACTIVE_ENG_ROTA_SEATS"
    AI_SUGGESTED_RESPONSES = "AI_SUGGESTED_RESPONSES"
    TEAM_REPORTING = "TEAM_REPORTING"


class RoleKey(str, Enum):
    OWNER = "OWNER"
    ADMIN = "ADMIN"
    SUPPORT = "SUPPORT"
    VIEWER = "VIEWER"


class WorkspaceFileVisibility(str, Enum):
    PRIVATE = "PRIVATE"
    PUBLIC = "PUBLIC"

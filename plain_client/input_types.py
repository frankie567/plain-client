# Generated by ariadne-codegen
# Source: schema.graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AttachmentType,
    AutoresponderMessageSource,
    BillingInterval,
    BillingIntervalUnit,
    BillingPlanKey,
    ComponentBadgeColor,
    ComponentDividerSpacingSize,
    ComponentPlainTextColor,
    ComponentPlainTextSize,
    ComponentSpacerSize,
    ComponentTextColor,
    ComponentTextSize,
    ConnectedSlackChannelType,
    CustomersSortField,
    DoneStatusDetail,
    GeneratedReplyFeedbackType,
    MessageSource,
    MetricDimensionType,
    RoleKey,
    ServiceLevelAgreementStatus,
    ServiceLevelAgreementType,
    SettingScopeType,
    SnoozeStatusDetail,
    SortDirection,
    StatusDetailType,
    ThreadFieldSchemaType,
    ThreadLinkStatus,
    ThreadsGroupBy,
    ThreadsLayout,
    ThreadsSortField,
    ThreadStatus,
    TimeSeriesMetricDimensionType,
    TimeSeriesMetricIntervalUnit,
    TodoStatusDetail,
    UserStatus,
    WeekDay,
    WorkspaceFileVisibility,
)


class UsersFilter(BaseModel):
    is_assignable_to_customer: Optional[bool] = Field(
        alias="isAssignableToCustomer", default=None
    )
    is_assignable_to_thread: Optional[bool] = Field(
        alias="isAssignableToThread", default=None
    )


class LabelTypeFilter(BaseModel):
    is_archived: Optional[bool] = Field(alias="isArchived", default=None)


class CustomersFilter(BaseModel):
    is_marked_as_spam: Optional[bool] = Field(alias="isMarkedAsSpam", default=None)
    customer_group_ids: Optional[List[str]] = Field(
        alias="customerGroupIds", default=None
    )
    customer_group_keys: Optional[List[str]] = Field(
        alias="customerGroupKeys", default=None
    )
    company_identifiers: Optional[List["CompanyIdentifierInput"]] = Field(
        alias="companyIdentifiers", default=None
    )
    tenant_identifiers: Optional[List["TenantIdentifierInput"]] = Field(
        alias="tenantIdentifiers", default=None
    )


class CustomersSort(BaseModel):
    field: CustomersSortField
    direction: SortDirection


class StringSearchExpression(BaseModel):
    case_insensitive_contains: Optional[str] = Field(
        alias="caseInsensitiveContains", default=None
    )


class CustomerSearchCondition(BaseModel):
    full_name: Optional["StringSearchExpression"] = Field(
        alias="fullName", default=None
    )
    short_name: Optional["StringSearchExpression"] = Field(
        alias="shortName", default=None
    )
    email: Optional["StringSearchExpression"] = None
    external_id: Optional["StringSearchExpression"] = Field(
        alias="externalId", default=None
    )
    timeline_entry_text: Optional["StringSearchExpression"] = Field(
        alias="timelineEntryText", default=None
    )


class CustomersSearchQuery(BaseModel):
    or_: Optional[List["CustomerSearchCondition"]] = Field(alias="or", default=None)


class GenerateReplyOption(BaseModel):
    key: Optional[str] = None
    value: Optional[str] = None


class CustomerGroupsFilter(BaseModel):
    external_ids: Optional[List[str]] = Field(alias="externalIds", default=None)


class CustomerGroupMembershipsFilter(BaseModel):
    customer_group_external_ids: Optional[List[str]] = Field(
        alias="customerGroupExternalIds", default=None
    )


class SingleValueMetricFilters(BaseModel):
    user_id: Optional[str] = Field(alias="userId", default=None)


class SingleValueMetricOptions(BaseModel):
    from_: Optional[str] = Field(alias="from", default=None)
    to: Optional[str] = None
    dimension: Optional[MetricDimensionType] = None
    sub_dimension: Optional[str] = Field(alias="subDimension", default=None)
    filters: Optional["SingleValueMetricFilters"] = None


class TimeSeriesMetricInterval(BaseModel):
    unit: Optional[TimeSeriesMetricIntervalUnit] = None


class TimeSeriesMetricFilters(BaseModel):
    user_id: Optional[str] = Field(alias="userId", default=None)


class TimeSeriesMetricOptions(BaseModel):
    from_: Optional[str] = Field(alias="from", default=None)
    to: Optional[str] = None
    dimension: Optional[TimeSeriesMetricDimensionType] = None
    sub_dimension: Optional[str] = Field(alias="subDimension", default=None)
    interval: Optional["TimeSeriesMetricInterval"] = None
    filters: Optional["TimeSeriesMetricFilters"] = None


class TierIdentifierInput(BaseModel):
    tier_id: Optional[str] = Field(alias="tierId", default=None)
    external_id: Optional[str] = Field(alias="externalId", default=None)


class ThreadFieldFilter(BaseModel):
    key: str
    string_value: Optional[str] = Field(alias="stringValue", default=None)
    boolean_value: Optional[bool] = Field(alias="booleanValue", default=None)


class DatetimeFilter(BaseModel):
    after: Optional[str] = None
    before: Optional[str] = None


class ThreadsFilter(BaseModel):
    thread_ids: Optional[List[str]] = Field(alias="threadIds", default=None)
    label_type_ids: Optional[List[str]] = Field(alias="labelTypeIds", default=None)
    priorities: Optional[List[int]] = None
    customer_ids: Optional[List[str]] = Field(alias="customerIds", default=None)
    is_assigned: Optional[bool] = Field(alias="isAssigned", default=None)
    assigned_to_user: Optional[List[str]] = Field(alias="assignedToUser", default=None)
    is_marked_as_spam: Optional[bool] = Field(alias="isMarkedAsSpam", default=None)
    support_email_addresses: Optional[List[str]] = Field(
        alias="supportEmailAddresses", default=None
    )
    customer_group_identifiers: Optional[List["CustomerGroupIdentifier"]] = Field(
        alias="customerGroupIdentifiers", default=None
    )
    service_level_agreements: Optional["ServiceLevelAgreementFilter"] = Field(
        alias="serviceLevelAgreements", default=None
    )
    tier_identifiers: Optional[List["TierIdentifierInput"]] = Field(
        alias="tierIdentifiers", default=None
    )
    thread_fields: Optional[List["ThreadFieldFilter"]] = Field(
        alias="threadFields", default=None
    )
    tenant_identifiers: Optional[List["TenantIdentifierInput"]] = Field(
        alias="tenantIdentifiers", default=None
    )
    company_identifiers: Optional[List["CompanyIdentifierInput"]] = Field(
        alias="companyIdentifiers", default=None
    )
    message_source: Optional[List[MessageSource]] = Field(
        alias="messageSource", default=None
    )
    status_changed_at: Optional["DatetimeFilter"] = Field(
        alias="statusChangedAt", default=None
    )
    statuses: Optional[List[ThreadStatus]] = None
    status_details: Optional[List[StatusDetailType]] = Field(
        alias="statusDetails", default=None
    )
    thread_link_group_ids: Optional[List[str]] = Field(
        alias="threadLinkGroupIds", default=None
    )
    created_at: Optional["DatetimeFilter"] = Field(alias="createdAt", default=None)
    updated_at: Optional["DatetimeFilter"] = Field(alias="updatedAt", default=None)


class ServiceLevelAgreementFilter(BaseModel):
    types: Optional[List[ServiceLevelAgreementType]] = None
    statuses: Optional[List[ServiceLevelAgreementStatus]] = None


class ThreadsSort(BaseModel):
    field: ThreadsSortField
    direction: SortDirection


class StringInput(BaseModel):
    value: str


class IntInput(BaseModel):
    value: int


class BooleanInput(BaseModel):
    value: bool


class OptionalStringInput(BaseModel):
    value: Optional[str] = None


class OptionalBooleanInput(BaseModel):
    value: Optional[bool] = None


class CreateUserAccountInput(BaseModel):
    full_name: str = Field(alias="fullName")
    public_name: str = Field(alias="publicName")
    marketing_consent: Optional[bool] = Field(alias="marketingConsent", default=None)


class CreateWorkspaceInput(BaseModel):
    name: str
    public_name: str = Field(alias="publicName")


class InviteUserToWorkspaceInput(BaseModel):
    email: str
    role_ids: Optional[List[str]] = Field(alias="roleIds", default=None)
    role_key: Optional[RoleKey] = Field(alias="roleKey", default=None)
    using_billing_rota_seat: Optional["BooleanInput"] = Field(
        alias="usingBillingRotaSeat", default=None
    )


class AcceptWorkspaceInviteInput(BaseModel):
    invite_id: str = Field(alias="inviteId")


class DeleteWorkspaceInviteInput(BaseModel):
    invite_id: str = Field(alias="inviteId")


class AssignRolesToUserInput(BaseModel):
    user_id: str = Field(alias="userId")
    role_ids: Optional[List[str]] = Field(alias="roleIds", default=None)
    role_key: Optional[RoleKey] = Field(alias="roleKey", default=None)
    using_billing_rota_seat: Optional["BooleanInput"] = Field(
        alias="usingBillingRotaSeat", default=None
    )


class CreateLabelTypeInput(BaseModel):
    name: str
    icon: Optional[str] = None


class ArchiveLabelTypeInput(BaseModel):
    label_type_id: str = Field(alias="labelTypeId")


class UnarchiveLabelTypeInput(BaseModel):
    label_type_id: str = Field(alias="labelTypeId")


class UpdateLabelTypeInput(BaseModel):
    label_type_id: str = Field(alias="labelTypeId")
    name: Optional["StringInput"] = None
    icon: Optional["OptionalStringInput"] = None


class AddLabelsInput(BaseModel):
    label_type_ids: List[str] = Field(alias="labelTypeIds")
    thread_id: str = Field(alias="threadId")


class RemoveLabelsInput(BaseModel):
    label_ids: List[str] = Field(alias="labelIds")


class DependsOnThreadFieldInput(BaseModel):
    thread_field_schema_id: str = Field(alias="threadFieldSchemaId")
    thread_field_schema_value: str = Field(alias="threadFieldSchemaValue")


class OptionalDependsOnThreadFieldInput(BaseModel):
    value: Optional["DependsOnThreadFieldInput"] = None


class CreateThreadFieldSchemaInput(BaseModel):
    label: str
    key: str
    description: str
    order: int
    type: ThreadFieldSchemaType
    enum_values: List[str] = Field(alias="enumValues")
    is_required: bool = Field(alias="isRequired")
    default_string_value: Optional[str] = Field(
        alias="defaultStringValue", default=None
    )
    default_boolean_value: Optional[bool] = Field(
        alias="defaultBooleanValue", default=None
    )
    is_ai_auto_fill_enabled: bool = Field(alias="isAiAutoFillEnabled")
    depends_on_thread_field: Optional["DependsOnThreadFieldInput"] = Field(
        alias="dependsOnThreadField", default=None
    )
    depends_on_label_type_ids: Optional[List[str]] = Field(
        alias="dependsOnLabelTypeIds", default=None
    )


class UpdateThreadFieldSchemaInput(BaseModel):
    thread_field_schema_id: str = Field(alias="threadFieldSchemaId")
    label: Optional["StringInput"] = None
    description: Optional["StringInput"] = None
    order: Optional[int] = None
    enum_values: Optional[List[str]] = Field(alias="enumValues", default=None)
    is_required: Optional[bool] = Field(alias="isRequired", default=None)
    default_string_value: Optional["OptionalStringInput"] = Field(
        alias="defaultStringValue", default=None
    )
    default_boolean_value: Optional["OptionalBooleanInput"] = Field(
        alias="defaultBooleanValue", default=None
    )
    is_ai_auto_fill_enabled: Optional[bool] = Field(
        alias="isAiAutoFillEnabled", default=None
    )
    depends_on_thread_field: Optional["OptionalDependsOnThreadFieldInput"] = Field(
        alias="dependsOnThreadField", default=None
    )
    depends_on_label_type_ids: Optional[List[str]] = Field(
        alias="dependsOnLabelTypeIds", default=None
    )


class DeleteThreadFieldSchemaInput(BaseModel):
    thread_field_schema_id: str = Field(alias="threadFieldSchemaId")


class ThreadFieldSchemaOrderInput(BaseModel):
    thread_field_schema_id: str = Field(alias="threadFieldSchemaId")
    order: int


class ReorderThreadFieldSchemasInput(BaseModel):
    thread_field_schema_orders: List["ThreadFieldSchemaOrderInput"] = Field(
        alias="threadFieldSchemaOrders"
    )


class UpsertThreadFieldIdentifier(BaseModel):
    thread_id: str = Field(alias="threadId")
    key: str


class UpsertThreadFieldInput(BaseModel):
    identifier: "UpsertThreadFieldIdentifier"
    type: ThreadFieldSchemaType
    string_value: Optional[str] = Field(alias="stringValue", default=None)
    boolean_value: Optional[bool] = Field(alias="booleanValue", default=None)


class CreateThreadFieldOnThreadInput(BaseModel):
    key: str
    type: ThreadFieldSchemaType
    string_value: Optional[str] = Field(alias="stringValue", default=None)
    boolean_value: Optional[bool] = Field(alias="booleanValue", default=None)


class BulkUpsertThreadFieldsInput(BaseModel):
    inputs: List["UpsertThreadFieldInput"]


class DeleteThreadFieldInput(BaseModel):
    thread_field_id: str = Field(alias="threadFieldId")


class CreateWorkflowRuleInput(BaseModel):
    name: str
    payload: str


class UpdateWorkflowRuleInput(BaseModel):
    workflow_rule_id: str = Field(alias="workflowRuleId")
    name: Optional["StringInput"] = None
    payload: Optional["StringInput"] = None


class DeleteWorkflowRuleInput(BaseModel):
    workflow_rule_id: str = Field(alias="workflowRuleId")


class WorkspaceFileInput(BaseModel):
    workspace_file_id: Optional[str] = Field(alias="workspaceFileId", default=None)


class CreateChatAppInput(BaseModel):
    name: str
    logo: Optional["WorkspaceFileInput"] = None


class UpdateChatAppInput(BaseModel):
    chat_app_id: str = Field(alias="chatAppId")
    name: Optional["StringInput"] = None
    logo: Optional["WorkspaceFileInput"] = None


class DeleteChatAppInput(BaseModel):
    chat_app_id: str = Field(alias="chatAppId")


class CreateChatAppSecretInput(BaseModel):
    chat_app_id: str = Field(alias="chatAppId")


class DeleteChatAppSecretInput(BaseModel):
    chat_app_id: str = Field(alias="chatAppId")


class LinearIssueThreadLinkInput(BaseModel):
    linear_issue_id: str = Field(alias="linearIssueId")
    linear_issue_url: str = Field(alias="linearIssueUrl")


class PlainThreadLinkInput(BaseModel):
    plain_thread_id: str = Field(alias="plainThreadId")


class JiraIssueThreadLinkInput(BaseModel):
    jira_issue_id: str = Field(alias="jiraIssueId")


class CreateThreadLinkInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    linear_issue: Optional["LinearIssueThreadLinkInput"] = Field(
        alias="linearIssue", default=None
    )
    plain_thread: Optional["PlainThreadLinkInput"] = Field(
        alias="plainThread", default=None
    )
    jira_issue: Optional["JiraIssueThreadLinkInput"] = Field(
        alias="jiraIssue", default=None
    )


class DeleteThreadLinkInput(BaseModel):
    thread_link_id: str = Field(alias="threadLinkId")


class ThreadLinkGroupFilter(BaseModel):
    statuses: Optional[List[ThreadLinkStatus]] = None
    thread_link_group_ids: Optional[List[str]] = Field(
        alias="threadLinkGroupIds", default=None
    )
    company_ids: Optional[List[str]] = Field(alias="companyIds", default=None)
    tier_ids: Optional[List[str]] = Field(alias="tierIds", default=None)


class CreateNoteInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    thread_id: Optional[str] = Field(alias="threadId", default=None)
    text: str
    markdown: Optional[str] = None


class DeleteNoteInput(BaseModel):
    note_id: str = Field(alias="noteId")


class ThreadsDisplayOptionsInput(BaseModel):
    has_status: bool = Field(alias="hasStatus")
    has_customer: bool = Field(alias="hasCustomer")
    has_company: bool = Field(alias="hasCompany")
    has_preview_text: bool = Field(alias="hasPreviewText")
    has_tier: bool = Field(alias="hasTier")
    has_customer_groups: bool = Field(alias="hasCustomerGroups")
    has_labels: bool = Field(alias="hasLabels")
    has_linear_issues: bool = Field(alias="hasLinearIssues")
    has_jira_issues: bool = Field(alias="hasJiraIssues")
    has_linked_threads: bool = Field(alias="hasLinkedThreads")
    has_service_level_agreements: bool = Field(alias="hasServiceLevelAgreements")
    has_channels: bool = Field(alias="hasChannels")
    has_last_updated: bool = Field(alias="hasLastUpdated")
    has_assignees: bool = Field(alias="hasAssignees")


class SavedThreadsViewFilterInput(BaseModel):
    statuses: List[ThreadStatus]
    status_details: List[StatusDetailType] = Field(alias="statusDetails")
    priorities: List[int]
    assigned_to_user: List[str] = Field(alias="assignedToUser")
    customer_groups: List[str] = Field(alias="customerGroups")
    companies: List[str]
    tenants: List[str]
    tiers: List[str]
    label_type_ids: List[str] = Field(alias="labelTypeIds")
    message_source: List[MessageSource] = Field(alias="messageSource")
    support_email_addresses: List[str] = Field(alias="supportEmailAddresses")
    sla_types: List[str] = Field(alias="slaTypes")
    sla_statuses: List[str] = Field(alias="slaStatuses")
    thread_fields: List["ThreadFieldFilter"] = Field(alias="threadFields")
    thread_link_group_ids: List[str] = Field(alias="threadLinkGroupIds")
    sort: "ThreadsSort"
    display_options: "ThreadsDisplayOptionsInput" = Field(alias="displayOptions")
    group_by: ThreadsGroupBy = Field(alias="groupBy")
    layout: ThreadsLayout


class CreateSavedThreadsViewInput(BaseModel):
    name: str
    icon: str
    color: str
    threads_filter: "SavedThreadsViewFilterInput" = Field(alias="threadsFilter")


class DeleteSavedThreadsViewInput(BaseModel):
    saved_threads_view_id: str = Field(alias="savedThreadsViewId")


class UpdateSavedThreadsViewInput(BaseModel):
    saved_threads_view_id: str = Field(alias="savedThreadsViewId")
    name: Optional["StringInput"] = None
    icon: Optional["StringInput"] = None
    color: Optional["StringInput"] = None
    threads_filter: Optional["SavedThreadsViewFilterInput"] = Field(
        alias="threadsFilter", default=None
    )


class CreateMyFavoritePageInput(BaseModel):
    key: str


class DeleteMyFavoritePageInput(BaseModel):
    favorite_page_id: str = Field(alias="favoritePageId")


class CreateSnippetInput(BaseModel):
    name: str
    text: str
    markdown: Optional[str] = None
    path: Optional[str] = None


class DeleteSnippetInput(BaseModel):
    snippet_id: str = Field(alias="snippetId")


class UpdateSnippetInput(BaseModel):
    snippet_id: str = Field(alias="snippetId")
    name: Optional["StringInput"] = None
    text: Optional["StringInput"] = None
    markdown: Optional["StringInput"] = None
    path: Optional["OptionalStringInput"] = None


class SendChatInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    text: Optional[str] = None
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)
    thread_id: Optional[str] = Field(alias="threadId", default=None)


class SendCustomerChatInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    text: Optional[str] = None
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)
    thread_id: str = Field(alias="threadId")


class ChangeUserStatusInput(BaseModel):
    user_id: str = Field(alias="userId")
    status: UserStatus


class UpdateWorkspaceInput(BaseModel):
    public_name: Optional["StringInput"] = Field(alias="publicName", default=None)
    name: Optional["StringInput"] = None
    domain_name: Optional["OptionalStringInput"] = Field(
        alias="domainName", default=None
    )


class DeleteUserInput(BaseModel):
    user_id: str = Field(alias="userId")


class AddWorkspaceAlternateSupportEmailAddressInput(BaseModel):
    alternate_support_email_address: str = Field(alias="alternateSupportEmailAddress")


class RemoveWorkspaceAlternateSupportEmailAddressInput(BaseModel):
    alternate_support_email_address: str = Field(alias="alternateSupportEmailAddress")


class CreateWorkspaceEmailDomainSettingsInput(BaseModel):
    support_email_address: str = Field(alias="supportEmailAddress")


class VerifyWorkspaceEmailForwardingSettingsInput(BaseModel):
    is_forwarding_configured: bool = Field(alias="isForwardingConfigured")


class UpdateWorkspaceEmailSettingsInput(BaseModel):
    is_enabled: bool = Field(alias="isEnabled")


class EmailParticipantInput(BaseModel):
    name: Optional[str] = None
    email: str


class SendNewEmailInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    subject: str
    text_content: str = Field(alias="textContent")
    markdown_content: Optional[str] = Field(alias="markdownContent", default=None)
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)
    additional_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="additionalRecipients", default=None
    )
    hidden_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="hiddenRecipients", default=None
    )
    from_alternate_support_email: Optional["EmailParticipantInput"] = Field(
        alias="fromAlternateSupportEmail", default=None
    )
    thread_id: Optional[str] = Field(alias="threadId", default=None)


class SendBulkEmailInput(BaseModel):
    thread_ids: List[str] = Field(alias="threadIds")
    text_content: str = Field(alias="textContent")
    markdown_content: Optional[str] = Field(alias="markdownContent", default=None)


class ReplyToEmailInput(BaseModel):
    customer_id: Optional[str] = Field(alias="customerId", default=None)
    in_reply_to_email_id: str = Field(alias="inReplyToEmailId")
    text_content: str = Field(alias="textContent")
    markdown_content: Optional[str] = Field(alias="markdownContent", default=None)
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)
    additional_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="additionalRecipients", default=None
    )
    hidden_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="hiddenRecipients", default=None
    )
    from_alternate_support_email: Optional["EmailParticipantInput"] = Field(
        alias="fromAlternateSupportEmail", default=None
    )


class CreateEmailPreviewUrlInput(BaseModel):
    email_id: str = Field(alias="emailId")
    customer_id: str = Field(alias="customerId")


class CreateAttachmentDownloadUrlInput(BaseModel):
    attachment_id: str = Field(alias="attachmentId")


class CreateAttachmentUploadUrlInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    file_name: str = Field(alias="fileName")
    file_size_bytes: int = Field(alias="fileSizeBytes")
    attachment_type: AttachmentType = Field(alias="attachmentType")


class ComponentCopyButtonInput(BaseModel):
    copy_button_value: str = Field(alias="copyButtonValue")
    copy_button_tooltip_label: Optional[str] = Field(
        alias="copyButtonTooltipLabel", default=None
    )


class ComponentBadgeInput(BaseModel):
    badge_label: str = Field(alias="badgeLabel")
    badge_color: Optional[ComponentBadgeColor] = Field(alias="badgeColor", default=None)


class ComponentRowInput(BaseModel):
    row_main_content: List["ComponentRowContentInput"] = Field(alias="rowMainContent")
    row_aside_content: List["ComponentRowContentInput"] = Field(alias="rowAsideContent")


class ComponentContainerInput(BaseModel):
    container_content: List["ComponentContainerContentInput"] = Field(
        alias="containerContent"
    )


class ComponentContainerContentInput(BaseModel):
    component_text: Optional["ComponentTextInput"] = Field(
        alias="componentText", default=None
    )
    component_plain_text: Optional["ComponentPlainTextInput"] = Field(
        alias="componentPlainText", default=None
    )
    component_divider: Optional["ComponentDividerInput"] = Field(
        alias="componentDivider", default=None
    )
    component_link_button: Optional["ComponentLinkButtonInput"] = Field(
        alias="componentLinkButton", default=None
    )
    component_spacer: Optional["ComponentSpacerInput"] = Field(
        alias="componentSpacer", default=None
    )
    component_badge: Optional["ComponentBadgeInput"] = Field(
        alias="componentBadge", default=None
    )
    component_copy_button: Optional["ComponentCopyButtonInput"] = Field(
        alias="componentCopyButton", default=None
    )
    component_row: Optional["ComponentRowInput"] = Field(
        alias="componentRow", default=None
    )


class ComponentRowContentInput(BaseModel):
    component_text: Optional["ComponentTextInput"] = Field(
        alias="componentText", default=None
    )
    component_plain_text: Optional["ComponentPlainTextInput"] = Field(
        alias="componentPlainText", default=None
    )
    component_divider: Optional["ComponentDividerInput"] = Field(
        alias="componentDivider", default=None
    )
    component_link_button: Optional["ComponentLinkButtonInput"] = Field(
        alias="componentLinkButton", default=None
    )
    component_spacer: Optional["ComponentSpacerInput"] = Field(
        alias="componentSpacer", default=None
    )
    component_badge: Optional["ComponentBadgeInput"] = Field(
        alias="componentBadge", default=None
    )
    component_copy_button: Optional["ComponentCopyButtonInput"] = Field(
        alias="componentCopyButton", default=None
    )


class ComponentTextInput(BaseModel):
    text_size: Optional[ComponentTextSize] = Field(alias="textSize", default=None)
    text_color: Optional[ComponentTextColor] = Field(alias="textColor", default=None)
    text: str
    color: Optional[ComponentTextColor] = None
    size: Optional[ComponentTextSize] = None


class ComponentPlainTextInput(BaseModel):
    plain_text_size: Optional[ComponentPlainTextSize] = Field(
        alias="plainTextSize", default=None
    )
    plain_text_color: Optional[ComponentPlainTextColor] = Field(
        alias="plainTextColor", default=None
    )
    plain_text: str = Field(alias="plainText")


class ComponentDividerInput(BaseModel):
    divider_spacing_size: Optional[ComponentDividerSpacingSize] = Field(
        alias="dividerSpacingSize", default=None
    )
    spacing_size: Optional[ComponentDividerSpacingSize] = Field(
        alias="spacingSize", default=None
    )


class ComponentLinkButtonInput(BaseModel):
    link_button_url: Optional[str] = Field(alias="linkButtonUrl", default=None)
    link_button_label: Optional[str] = Field(alias="linkButtonLabel", default=None)
    url: Optional[str] = None
    label: Optional[str] = None


class ComponentSpacerInput(BaseModel):
    spacer_size: Optional[ComponentSpacerSize] = Field(alias="spacerSize", default=None)
    size: Optional[ComponentSpacerSize] = None


class ComponentInput(BaseModel):
    component_text: Optional["ComponentTextInput"] = Field(
        alias="componentText", default=None
    )
    component_plain_text: Optional["ComponentPlainTextInput"] = Field(
        alias="componentPlainText", default=None
    )
    component_divider: Optional["ComponentDividerInput"] = Field(
        alias="componentDivider", default=None
    )
    component_link_button: Optional["ComponentLinkButtonInput"] = Field(
        alias="componentLinkButton", default=None
    )
    component_spacer: Optional["ComponentSpacerInput"] = Field(
        alias="componentSpacer", default=None
    )
    component_badge: Optional["ComponentBadgeInput"] = Field(
        alias="componentBadge", default=None
    )
    component_copy_button: Optional["ComponentCopyButtonInput"] = Field(
        alias="componentCopyButton", default=None
    )
    component_row: Optional["ComponentRowInput"] = Field(
        alias="componentRow", default=None
    )
    component_container: Optional["ComponentContainerInput"] = Field(
        alias="componentContainer", default=None
    )


class EventComponentInput(BaseModel):
    component_text: Optional["ComponentTextInput"] = Field(
        alias="componentText", default=None
    )
    component_plain_text: Optional["ComponentPlainTextInput"] = Field(
        alias="componentPlainText", default=None
    )
    component_divider: Optional["ComponentDividerInput"] = Field(
        alias="componentDivider", default=None
    )
    component_link_button: Optional["ComponentLinkButtonInput"] = Field(
        alias="componentLinkButton", default=None
    )
    component_spacer: Optional["ComponentSpacerInput"] = Field(
        alias="componentSpacer", default=None
    )
    component_badge: Optional["ComponentBadgeInput"] = Field(
        alias="componentBadge", default=None
    )
    component_copy_button: Optional["ComponentCopyButtonInput"] = Field(
        alias="componentCopyButton", default=None
    )
    component_row: Optional["ComponentRowInput"] = Field(
        alias="componentRow", default=None
    )


class EmailAddressInput(BaseModel):
    email: str
    is_verified: bool = Field(alias="isVerified")


class UpsertCustomerIdentifierInput(BaseModel):
    external_id: Optional[str] = Field(alias="externalId", default=None)
    email_address: Optional[str] = Field(alias="emailAddress", default=None)
    customer_id: Optional[str] = Field(alias="customerId", default=None)


class UpsertCustomerOnCreateInput(BaseModel):
    external_id: Optional[str] = Field(alias="externalId", default=None)
    full_name: str = Field(alias="fullName")
    short_name: Optional[str] = Field(alias="shortName", default=None)
    email: "EmailAddressInput"
    customer_group_identifiers: Optional[List["CustomerGroupIdentifier"]] = Field(
        alias="customerGroupIdentifiers", default=None
    )
    tenant_identifiers: Optional[List["TenantIdentifierInput"]] = Field(
        alias="tenantIdentifiers", default=None
    )


class UpsertCustomerOnUpdateInput(BaseModel):
    external_id: Optional["OptionalStringInput"] = Field(
        alias="externalId", default=None
    )
    full_name: Optional["StringInput"] = Field(alias="fullName", default=None)
    short_name: Optional["OptionalStringInput"] = Field(alias="shortName", default=None)
    email: Optional["EmailAddressInput"] = None


class UpsertCustomerInput(BaseModel):
    identifier: "UpsertCustomerIdentifierInput"
    on_create: "UpsertCustomerOnCreateInput" = Field(alias="onCreate")
    on_update: "UpsertCustomerOnUpdateInput" = Field(alias="onUpdate")


class CreateMachineUserInput(BaseModel):
    public_name: str = Field(alias="publicName")
    full_name: str = Field(alias="fullName")
    description: Optional[str] = None


class DeleteMachineUserInput(BaseModel):
    machine_user_id: str = Field(alias="machineUserId")


class UpdateMachineUserInput(BaseModel):
    machine_user_id: str = Field(alias="machineUserId")
    full_name: Optional["StringInput"] = Field(alias="fullName", default=None)
    public_name: Optional["StringInput"] = Field(alias="publicName", default=None)
    description: Optional["StringInput"] = None


class CreateApiKeyInput(BaseModel):
    machine_user_id: str = Field(alias="machineUserId")
    description: Optional[str] = None
    permissions: List[str]


class UpdateApiKeyInput(BaseModel):
    api_key_id: str = Field(alias="apiKeyId")
    description: Optional[str] = None
    permissions: List[str]


class DeleteApiKeyInput(BaseModel):
    api_key_id: str = Field(alias="apiKeyId")


class DeleteCustomerInput(BaseModel):
    customer_id: str = Field(alias="customerId")


class CreateCustomerEventInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")
    external_id: Optional[str] = Field(alias="externalId", default=None)
    title: str
    components: List["EventComponentInput"]


class CreateThreadEventInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    external_id: Optional[str] = Field(alias="externalId", default=None)
    title: str
    components: List["EventComponentInput"]


class AutoresponderConditionInput(BaseModel):
    tier_id: Optional[str] = Field(alias="tierId", default=None)
    is_outside_business_hours: Optional[bool] = Field(
        alias="isOutsideBusinessHours", default=None
    )
    support_email_addresses: Optional[List[str]] = Field(
        alias="supportEmailAddresses", default=None
    )
    label_type_ids: Optional[List[str]] = Field(alias="labelTypeIds", default=None)


class CreateAutoresponderInput(BaseModel):
    name: str
    order: int
    text_content: str = Field(alias="textContent")
    markdown_content: Optional[str] = Field(alias="markdownContent", default=None)
    is_enabled: bool = Field(alias="isEnabled")
    message_sources: List[AutoresponderMessageSource] = Field(alias="messageSources")
    conditions: List["AutoresponderConditionInput"]
    response_delay_seconds: Optional[int] = Field(
        alias="responseDelaySeconds", default=None
    )


class UpdateAutoresponderInput(BaseModel):
    autoresponder_id: str = Field(alias="autoresponderId")
    name: Optional["StringInput"] = None
    order: Optional["IntInput"] = None
    text_content: Optional["StringInput"] = Field(alias="textContent", default=None)
    markdown_content: Optional["OptionalStringInput"] = Field(
        alias="markdownContent", default=None
    )
    is_enabled: Optional["BooleanInput"] = Field(alias="isEnabled", default=None)
    message_sources: Optional[List[AutoresponderMessageSource]] = Field(
        alias="messageSources", default=None
    )
    conditions: Optional[List["AutoresponderConditionInput"]] = None
    response_delay_seconds: Optional["IntInput"] = Field(
        alias="responseDelaySeconds", default=None
    )


class DeleteAutoresponderInput(BaseModel):
    autoresponder_id: str = Field(alias="autoresponderId")


class AutoresponderOrderInput(BaseModel):
    autoresponder_id: str = Field(alias="autoresponderId")
    order: int


class ReorderAutorespondersInput(BaseModel):
    autoresponders_order: List["AutoresponderOrderInput"] = Field(
        alias="autorespondersOrder"
    )


class OptionalGeneratedReplyFeedbackInput(BaseModel):
    value: Optional[GeneratedReplyFeedbackType] = None


class GeneratedReplyFeedbackInput(BaseModel):
    type: Optional["OptionalGeneratedReplyFeedbackInput"] = None


class UpdateGeneratedReplyInput(BaseModel):
    generated_reply_id: str = Field(alias="generatedReplyId")
    feedback: Optional["GeneratedReplyFeedbackInput"] = None


class CreateIndexedDocumentInput(BaseModel):
    url: str
    label_type_ids: Optional[List[str]] = Field(alias="labelTypeIds", default=None)


class DeleteIndexedDocumentInput(BaseModel):
    indexed_document_id: str = Field(alias="indexedDocumentId")


class CreateThreadDiscussionInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    connected_slack_channel_id: str = Field(alias="connectedSlackChannelId")
    markdown_content: str = Field(alias="markdownContent")


class SendThreadDiscussionMessageInput(BaseModel):
    thread_discussion_id: str = Field(alias="threadDiscussionId")
    markdown_content: str = Field(alias="markdownContent")
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)


class MarkThreadDiscussionAsResolvedInput(BaseModel):
    thread_discussion_id: str = Field(alias="threadDiscussionId")


class UpdateCompanyTierInput(BaseModel):
    tier_identifier: Optional["TierIdentifierInput"] = Field(
        alias="tierIdentifier", default=None
    )
    company_identifier: "CompanyIdentifierInput" = Field(alias="companyIdentifier")


class ChangeThreadCustomerInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    customer_id: str = Field(alias="customerId")


class UpdateTenantTierInput(BaseModel):
    tier_identifier: Optional["TierIdentifierInput"] = Field(
        alias="tierIdentifier", default=None
    )
    tenant_identifier: "TenantIdentifierInput" = Field(alias="tenantIdentifier")


class AddMembersToTierInput(BaseModel):
    tier_identifier: "TierIdentifierInput" = Field(alias="tierIdentifier")
    member_identifiers: List["TierMemberIdentifierInput"] = Field(
        alias="memberIdentifiers"
    )


class RemoveMembersFromTierInput(BaseModel):
    member_identifiers: List["TierMemberIdentifierInput"] = Field(
        alias="memberIdentifiers"
    )


class CreateTierInput(BaseModel):
    name: str
    external_id: str = Field(alias="externalId")
    color: str
    default_thread_priority: Optional[int] = Field(
        alias="defaultThreadPriority", default=None
    )
    member_identifiers: List["TierMemberIdentifierInput"] = Field(
        alias="memberIdentifiers"
    )
    is_default: Optional[bool] = Field(alias="isDefault", default=None)


class ServiceLevelAgreementThreadLabelTypeIdFilterInput(BaseModel):
    label_type_ids: List[str] = Field(alias="labelTypeIds")
    require_all: bool = Field(alias="requireAll")


class ServiceLevelAgreementInput(BaseModel):
    first_response_time_minutes: Optional[int] = Field(
        alias="firstResponseTimeMinutes", default=None
    )
    next_response_time_minutes: Optional[int] = Field(
        alias="nextResponseTimeMinutes", default=None
    )
    thread_priority_filter: Optional[List[int]] = Field(
        alias="threadPriorityFilter", default=None
    )
    thread_label_type_id_filter: Optional[
        "ServiceLevelAgreementThreadLabelTypeIdFilterInput"
    ] = Field(alias="threadLabelTypeIdFilter", default=None)
    use_business_hours_only: bool = Field(alias="useBusinessHoursOnly")
    breach_actions: List["BreachActionInput"] = Field(alias="breachActions")


class BreachActionInput(BaseModel):
    before_breach_action: Optional["BeforeBreachActionInput"] = Field(
        alias="beforeBreachAction", default=None
    )


class BeforeBreachActionInput(BaseModel):
    before_breach_minutes: int = Field(alias="beforeBreachMinutes")


class TierMemberIdentifierInput(BaseModel):
    company_id: Optional[str] = Field(alias="companyId", default=None)
    tenant_id: Optional[str] = Field(alias="tenantId", default=None)


class UpdateTierInput(BaseModel):
    tier_id: str = Field(alias="tierId")
    name: Optional["StringInput"] = None
    external_id: Optional["OptionalStringInput"] = Field(
        alias="externalId", default=None
    )
    color: Optional["StringInput"] = None
    default_thread_priority: Optional["IntInput"] = Field(
        alias="defaultThreadPriority", default=None
    )
    is_default: Optional["BooleanInput"] = Field(alias="isDefault", default=None)


class DeleteTierInput(BaseModel):
    tier_id: str = Field(alias="tierId")


class CreateServiceLevelAgreementInput(BaseModel):
    tier_id: str = Field(alias="tierId")
    service_level_agreement: "ServiceLevelAgreementInput" = Field(
        alias="serviceLevelAgreement"
    )


class IntArrayInput(BaseModel):
    value: List[int]


class UpdateServiceLevelAgreementInput(BaseModel):
    service_level_agreement_id: str = Field(alias="serviceLevelAgreementId")
    first_response_time_minutes: Optional["IntInput"] = Field(
        alias="firstResponseTimeMinutes", default=None
    )
    next_response_time_minutes: Optional["IntInput"] = Field(
        alias="nextResponseTimeMinutes", default=None
    )
    thread_priority_filter: Optional["IntArrayInput"] = Field(
        alias="threadPriorityFilter", default=None
    )
    thread_label_type_id_filter: Optional[
        "ServiceLevelAgreementThreadLabelTypeIdFilterInput"
    ] = Field(alias="threadLabelTypeIdFilter", default=None)
    use_business_hours_only: Optional["BooleanInput"] = Field(
        alias="useBusinessHoursOnly", default=None
    )
    breach_actions: Optional[List["BreachActionInput"]] = Field(
        alias="breachActions", default=None
    )


class DeleteServiceLevelAgreementInput(BaseModel):
    service_level_agreement_id: str = Field(alias="serviceLevelAgreementId")


class UpsertCompanyInput(BaseModel):
    identifier: "CompanyIdentifierInput"
    name: str
    domain_name: str = Field(alias="domainName")
    contract_value: Optional[int] = Field(alias="contractValue", default=None)


class TenantIdentifierInput(BaseModel):
    tenant_id: Optional[str] = Field(alias="tenantId", default=None)
    external_id: Optional[str] = Field(alias="externalId", default=None)


class UpsertTenantInput(BaseModel):
    identifier: "TenantIdentifierInput"
    name: str
    external_id: str = Field(alias="externalId")
    url: Optional["OptionalStringInput"] = None


class CompanyIdentifierInput(BaseModel):
    company_id: Optional[str] = Field(alias="companyId", default=None)
    company_domain_name: Optional[str] = Field(alias="companyDomainName", default=None)


class UpdateCustomerCompanyInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    company_identifier: Optional["CompanyIdentifierInput"] = Field(
        alias="companyIdentifier", default=None
    )


class SendMSTeamsMessageInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    markdown_content: Optional[str] = Field(alias="markdownContent", default=None)
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)


class SendSlackMessageInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    text_content: Optional[str] = Field(alias="textContent", default=None)
    markdown_content: Optional[str] = Field(alias="markdownContent", default=None)
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)


class ShareThreadToUserInSlackInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    user_id: str = Field(alias="userId")


class SendDiscordMessageInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    markdown_content: Optional[str] = Field(alias="markdownContent", default=None)


class ToggleSlackMessageReactionInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    timeline_entry_id: str = Field(alias="timelineEntryId")
    reaction_name: str = Field(alias="reactionName")


class ForkThreadInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    timeline_entry_id: str = Field(alias="timelineEntryId")


class CustomerImpersonationInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")


class ImpersonationInput(BaseModel):
    as_customer: "CustomerImpersonationInput" = Field(alias="asCustomer")


class ReplyToThreadEmailChannelSpecificOptionsInput(BaseModel):
    additional_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="additionalRecipients", default=None
    )
    hidden_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="hiddenRecipients", default=None
    )


class ReplyToThreadChannelSpecificOptionsInput(BaseModel):
    email: "ReplyToThreadEmailChannelSpecificOptionsInput"


class ReplyToThreadInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    text_content: str = Field(alias="textContent")
    markdown_content: Optional[str] = Field(alias="markdownContent", default=None)
    impersonation: Optional["ImpersonationInput"] = None
    channel_specific_options: Optional["ReplyToThreadChannelSpecificOptionsInput"] = (
        Field(alias="channelSpecificOptions", default=None)
    )


class ThreadsSearchQuery(BaseModel):
    term: str


class UpsertMyEmailSignatureInput(BaseModel):
    text: str
    markdown: Optional[str] = None


class MarkThreadAsDoneInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    status_detail: Optional[DoneStatusDetail] = Field(
        alias="statusDetail", default=None
    )


class MarkThreadAsTodoInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    status_detail: Optional[TodoStatusDetail] = Field(
        alias="statusDetail", default=None
    )


class ChangeThreadPriorityInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    priority: int


class UpdateThreadTitleInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    title: str


class SnoozeThreadInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    duration_seconds: Optional[int] = Field(alias="durationSeconds", default=None)
    status_detail: Optional[SnoozeStatusDetail] = Field(
        alias="statusDetail", default=None
    )


class AssignThreadInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    user_id: Optional[str] = Field(alias="userId", default=None)
    machine_user_id: Optional[str] = Field(alias="machineUserId", default=None)


class UnassignThreadInput(BaseModel):
    thread_id: str = Field(alias="threadId")


class AddAdditionalAssigneesInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    user_ids: Optional[List[str]] = Field(alias="userIds", default=None)
    machine_user_ids: Optional[List[str]] = Field(alias="machineUserIds", default=None)


class RemoveAdditionalAssigneesInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    user_ids: Optional[List[str]] = Field(alias="userIds", default=None)
    machine_user_ids: Optional[List[str]] = Field(alias="machineUserIds", default=None)


class CreateThreadChannelAssociationInput(BaseModel):
    company_identifier: "CompanyIdentifierInput" = Field(alias="companyIdentifier")
    connected_slack_channel_id: Optional[str] = Field(
        alias="connectedSlackChannelId", default=None
    )


class DeleteThreadChannelAssociationInput(BaseModel):
    thread_channel_association_id: str = Field(alias="threadChannelAssociationId")


class ThreadTimelineEntriesFilter(BaseModel):
    is_message: Optional[bool] = Field(alias="isMessage", default=None)


class CustomerIdentifierInput(BaseModel):
    external_id: Optional[str] = Field(alias="externalId", default=None)
    email_address: Optional[str] = Field(alias="emailAddress", default=None)
    customer_id: Optional[str] = Field(alias="customerId", default=None)


class CreateThreadAssignedToInput(BaseModel):
    user_id: Optional[str] = Field(alias="userId", default=None)
    machine_user_id: Optional[str] = Field(alias="machineUserId", default=None)


class CreateThreadInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")
    title: Optional[str] = None
    components: List["ComponentInput"]
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)
    label_type_ids: Optional[List[str]] = Field(alias="labelTypeIds", default=None)
    thread_fields: Optional[List["CreateThreadFieldOnThreadInput"]] = Field(
        alias="threadFields", default=None
    )
    assigned_to: Optional["CreateThreadAssignedToInput"] = Field(
        alias="assignedTo", default=None
    )
    external_id: Optional[str] = Field(alias="externalId", default=None)
    description: Optional[str] = None
    priority: Optional[int] = None
    tenant_identifier: Optional["TenantIdentifierInput"] = Field(
        alias="tenantIdentifier", default=None
    )


class MarkCustomerAsSpamInput(BaseModel):
    customer_id: str = Field(alias="customerId")


class UnmarkCustomerAsSpamInput(BaseModel):
    customer_id: str = Field(alias="customerId")


class WebhookTargetEventSubscriptionInput(BaseModel):
    event_type: str = Field(alias="eventType")


class CreateWebhookTargetInput(BaseModel):
    url: str
    event_subscriptions: List["WebhookTargetEventSubscriptionInput"] = Field(
        alias="eventSubscriptions"
    )
    is_enabled: bool = Field(alias="isEnabled")
    description: str
    version: Optional[str] = None


class UpdateWebhookTargetInput(BaseModel):
    webhook_target_id: str = Field(alias="webhookTargetId")
    url: Optional["StringInput"] = None
    event_subscriptions: Optional[List["WebhookTargetEventSubscriptionInput"]] = Field(
        alias="eventSubscriptions", default=None
    )
    is_enabled: Optional["BooleanInput"] = Field(alias="isEnabled", default=None)
    description: Optional["StringInput"] = None
    version: Optional["StringInput"] = None


class DeleteWebhookTargetInput(BaseModel):
    webhook_target_id: str = Field(alias="webhookTargetId")


class CustomerCardConfigOrderInput(BaseModel):
    customer_card_config_id: str = Field(alias="customerCardConfigId")
    order: int


class ReorderCustomerCardConfigsInput(BaseModel):
    customer_card_config_orders: List["CustomerCardConfigOrderInput"] = Field(
        alias="customerCardConfigOrders"
    )


class CustomerCardConfigApiHeaderInput(BaseModel):
    name: str
    value: str


class CreateCustomerCardConfigInput(BaseModel):
    title: str
    key: str
    default_time_to_live_seconds: int = Field(alias="defaultTimeToLiveSeconds")
    api_url: str = Field(alias="apiUrl")
    api_headers: List["CustomerCardConfigApiHeaderInput"] = Field(alias="apiHeaders")


class UpdateCustomerCardConfigInput(BaseModel):
    customer_card_config_id: str = Field(alias="customerCardConfigId")
    order: Optional["IntInput"] = None
    title: Optional["StringInput"] = None
    key: Optional["StringInput"] = None
    default_time_to_live_seconds: Optional["IntInput"] = Field(
        alias="defaultTimeToLiveSeconds", default=None
    )
    api_url: Optional["StringInput"] = Field(alias="apiUrl", default=None)
    api_headers: Optional[List["CustomerCardConfigApiHeaderInput"]] = Field(
        alias="apiHeaders", default=None
    )
    is_enabled: Optional["BooleanInput"] = Field(alias="isEnabled", default=None)


class DeleteCustomerCardConfigInput(BaseModel):
    customer_card_config_id: str = Field(alias="customerCardConfigId")


class ReloadCustomerCardInstanceInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    customer_card_config_id: str = Field(alias="customerCardConfigId")
    thread_id: Optional[str] = Field(alias="threadId", default=None)


class SettingScopeInput(BaseModel):
    id: Optional[str] = None
    scope_type: SettingScopeType = Field(alias="scopeType")


class SettingValueInput(BaseModel):
    boolean: Optional[bool] = None
    string: Optional[str] = None
    number: Optional[int] = None


class UpdateSettingInput(BaseModel):
    code: str
    scope: "SettingScopeInput"
    value: "SettingValueInput"


class CreateMySlackIntegrationInput(BaseModel):
    auth_code: str = Field(alias="authCode")
    redirect_url: str = Field(alias="redirectUrl")


class CreateUserAuthSlackIntegrationInput(BaseModel):
    auth_code: str = Field(alias="authCode")
    redirect_url: str = Field(alias="redirectUrl")


class CreateWorkspaceSlackIntegrationInput(BaseModel):
    auth_code: str = Field(alias="authCode")
    redirect_url: str = Field(alias="redirectUrl")


class DeleteWorkspaceSlackIntegrationInput(BaseModel):
    integration_id: str = Field(alias="integrationId")


class CreateWorkspaceSlackChannelIntegrationInput(BaseModel):
    auth_code: str = Field(alias="authCode")
    redirect_url: str = Field(alias="redirectUrl")


class DeleteWorkspaceSlackChannelIntegrationInput(BaseModel):
    integration_id: str = Field(alias="integrationId")


class DeleteUserAuthSlackIntegrationInput(BaseModel):
    slack_team_id: str = Field(alias="slackTeamId")


class UpdateConnectedSlackChannelInput(BaseModel):
    connected_slack_channel_id: str = Field(alias="connectedSlackChannelId")
    channel_type: Optional[ConnectedSlackChannelType] = Field(
        alias="channelType", default=None
    )
    is_enabled: Optional["BooleanInput"] = Field(alias="isEnabled", default=None)


class ConnectedSlackChannelsFilter(BaseModel):
    slack_team_ids: Optional[List[str]] = Field(alias="slackTeamIds", default=None)
    channel_types: Optional[List[ConnectedSlackChannelType]] = Field(
        alias="channelTypes", default=None
    )
    is_enabled: Optional["BooleanInput"] = Field(alias="isEnabled", default=None)


class CreateWorkspaceDiscordChannelIntegrationInput(BaseModel):
    auth_code: str = Field(alias="authCode")
    redirect_url: str = Field(alias="redirectUrl")


class CreateWorkspaceDiscordIntegrationInput(BaseModel):
    name: str
    webhook_url: str = Field(alias="webhookUrl")


class DeleteWorkspaceDiscordIntegrationInput(BaseModel):
    integration_id: str = Field(alias="integrationId")


class DeleteWorkspaceDiscordChannelIntegrationInput(BaseModel):
    integration_id: str = Field(alias="integrationId")


class CreateMyLinearIntegrationInput(BaseModel):
    auth_code: str = Field(alias="authCode")
    redirect_url: str = Field(alias="redirectUrl")


class CreateMyMSTeamsIntegrationInput(BaseModel):
    auth_code: str = Field(alias="authCode")
    redirect_url: str = Field(alias="redirectUrl")


class CreateWorkspaceMSTeamsIntegrationInput(BaseModel):
    ms_teams_tenant_id: str = Field(alias="msTeamsTenantId")


class DeleteWorkspaceMSTeamsIntegrationInput(BaseModel):
    integration_id: str = Field(alias="integrationId")


class CustomerChangesFilter(BaseModel):
    assigned_to_user: Optional[List[str]] = Field(alias="assignedToUser", default=None)


class UpsertCustomerGroupInput(BaseModel):
    identifier: "CustomerGroupIdentifier"
    name: str
    key: str
    color: str
    external_id: Optional[str] = Field(alias="externalId", default=None)


class CreateCustomerGroupInput(BaseModel):
    name: str
    key: str
    color: str
    external_id: Optional[str] = Field(alias="externalId", default=None)


class UpdateCustomerGroupInput(BaseModel):
    customer_group_id: str = Field(alias="customerGroupId")
    name: Optional["StringInput"] = None
    key: Optional["StringInput"] = None
    color: Optional["StringInput"] = None
    external_id: Optional["OptionalStringInput"] = Field(
        alias="externalId", default=None
    )


class DeleteCustomerGroupInput(BaseModel):
    customer_group_id: str = Field(alias="customerGroupId")


class CustomerGroupIdentifier(BaseModel):
    customer_group_id: Optional[str] = Field(alias="customerGroupId", default=None)
    customer_group_key: Optional[str] = Field(alias="customerGroupKey", default=None)
    external_id: Optional[str] = Field(alias="externalId", default=None)


class AddCustomerToCustomerGroupsInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    customer_group_identifiers: List["CustomerGroupIdentifier"] = Field(
        alias="customerGroupIdentifiers"
    )


class RemoveCustomerFromCustomerGroupsInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    customer_group_identifiers: List["CustomerGroupIdentifier"] = Field(
        alias="customerGroupIdentifiers"
    )


class CompaniesSearchQuery(BaseModel):
    term: str


class TenantsSearchQuery(BaseModel):
    term: str


class StartServiceAuthorizationInput(BaseModel):
    service_integration_key: str = Field(alias="serviceIntegrationKey")


class ServiceAuthorizationsFilter(BaseModel):
    service_integration_key: Optional[str] = Field(
        alias="serviceIntegrationKey", default=None
    )


class CompleteJiraAuthorizationInput(BaseModel):
    refresh_token: str = Field(alias="refreshToken")
    site_id: str = Field(alias="siteId")


class CompleteServiceAuthorizationInput(BaseModel):
    service_authorization_id: str = Field(alias="serviceAuthorizationId")
    jira: Optional["CompleteJiraAuthorizationInput"] = None


class DeleteServiceAuthorizationInput(BaseModel):
    service_authorization_id: str = Field(alias="serviceAuthorizationId")


class DeleteMyServiceAuthorizationInput(BaseModel):
    service_authorization_id: str = Field(alias="serviceAuthorizationId")


class BusinessHoursWeekDayInput(BaseModel):
    start_time: str = Field(alias="startTime")
    end_time: str = Field(alias="endTime")


class BusinessHoursWeekDaysInput(BaseModel):
    monday: Optional["BusinessHoursWeekDayInput"] = None
    tuesday: Optional["BusinessHoursWeekDayInput"] = None
    wednesday: Optional["BusinessHoursWeekDayInput"] = None
    thursday: Optional["BusinessHoursWeekDayInput"] = None
    friday: Optional["BusinessHoursWeekDayInput"] = None
    saturday: Optional["BusinessHoursWeekDayInput"] = None
    sunday: Optional["BusinessHoursWeekDayInput"] = None


class UpsertBusinessHoursInput(BaseModel):
    week_days: Optional["BusinessHoursWeekDaysInput"] = Field(
        alias="weekDays", default=None
    )


class BusinessHoursSlotInput(BaseModel):
    timezone: str
    weekday: WeekDay
    opens_at: str = Field(alias="opensAt")
    closes_at: str = Field(alias="closesAt")


class SyncBusinessHoursSlotsInput(BaseModel):
    slots: List["BusinessHoursSlotInput"]


class UpdateThreadTenantInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    tenant_identifier: Optional["TenantIdentifierInput"] = Field(
        alias="tenantIdentifier", default=None
    )


class UpdateThreadTierInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    tier_identifier: Optional["TierIdentifierInput"] = Field(
        alias="tierIdentifier", default=None
    )


class AddCustomerToTenantsInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")
    tenant_identifiers: List["TenantIdentifierInput"] = Field(alias="tenantIdentifiers")


class RemoveCustomerFromTenantsInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")
    tenant_identifiers: List["TenantIdentifierInput"] = Field(alias="tenantIdentifiers")


class SetCustomerTenantsInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")
    tenant_identifiers: List["TenantIdentifierInput"] = Field(alias="tenantIdentifiers")


class CompaniesFilter(BaseModel):
    company_ids: Optional[List[str]] = Field(alias="companyIds", default=None)


class CreateCheckoutSessionInput(BaseModel):
    plan: BillingPlanKey
    interval: Optional[BillingInterval] = None
    interval_unit: Optional[BillingIntervalUnit] = Field(
        alias="intervalUnit", default=None
    )


class CalculateRoleChangeCostInput(BaseModel):
    role_key: RoleKey = Field(alias="roleKey")
    quantity: Optional["IntInput"] = None
    user_id: Optional[str] = Field(alias="userId", default=None)
    using_billing_rota_seat: Optional["BooleanInput"] = Field(
        alias="usingBillingRotaSeat", default=None
    )


class AddUserToActiveBillingRotaInput(BaseModel):
    user_id: str = Field(alias="userId")


class RemoveUserFromActiveBillingRotaInput(BaseModel):
    user_id: str = Field(alias="userId")


class UpdateActiveBillingRotaInput(BaseModel):
    user_ids_to_add: Optional[List[str]] = Field(alias="userIdsToAdd", default=None)
    user_ids_to_remove: Optional[List[str]] = Field(
        alias="userIdsToRemove", default=None
    )


class ChangeBillingPlanInput(BaseModel):
    plan_key: BillingPlanKey = Field(alias="planKey")
    interval_unit: Optional[BillingIntervalUnit] = Field(
        alias="intervalUnit", default=None
    )


class PreviewBillingPlanChangeInput(BaseModel):
    plan_key: BillingPlanKey = Field(alias="planKey")
    interval_unit: Optional[BillingIntervalUnit] = Field(
        alias="intervalUnit", default=None
    )


class CreateWorkspaceFileUploadUrlInput(BaseModel):
    file_name: str = Field(alias="fileName")
    file_size_bytes: int = Field(alias="fileSizeBytes")
    visibility: WorkspaceFileVisibility


class DeleteWorkspaceFileInput(BaseModel):
    workspace_file_id: str = Field(alias="workspaceFileId")


CustomersFilter.model_rebuild()
CustomerSearchCondition.model_rebuild()
CustomersSearchQuery.model_rebuild()
SingleValueMetricOptions.model_rebuild()
TimeSeriesMetricOptions.model_rebuild()
ThreadsFilter.model_rebuild()
InviteUserToWorkspaceInput.model_rebuild()
AssignRolesToUserInput.model_rebuild()
UpdateLabelTypeInput.model_rebuild()
OptionalDependsOnThreadFieldInput.model_rebuild()
CreateThreadFieldSchemaInput.model_rebuild()
UpdateThreadFieldSchemaInput.model_rebuild()
ReorderThreadFieldSchemasInput.model_rebuild()
UpsertThreadFieldInput.model_rebuild()
BulkUpsertThreadFieldsInput.model_rebuild()
UpdateWorkflowRuleInput.model_rebuild()
CreateChatAppInput.model_rebuild()
UpdateChatAppInput.model_rebuild()
CreateThreadLinkInput.model_rebuild()
SavedThreadsViewFilterInput.model_rebuild()
CreateSavedThreadsViewInput.model_rebuild()
UpdateSavedThreadsViewInput.model_rebuild()
UpdateSnippetInput.model_rebuild()
UpdateWorkspaceInput.model_rebuild()
SendNewEmailInput.model_rebuild()
ReplyToEmailInput.model_rebuild()
ComponentRowInput.model_rebuild()
ComponentContainerInput.model_rebuild()
ComponentContainerContentInput.model_rebuild()
ComponentRowContentInput.model_rebuild()
ComponentInput.model_rebuild()
EventComponentInput.model_rebuild()
UpsertCustomerOnCreateInput.model_rebuild()
UpsertCustomerOnUpdateInput.model_rebuild()
UpsertCustomerInput.model_rebuild()
UpdateMachineUserInput.model_rebuild()
CreateCustomerEventInput.model_rebuild()
CreateThreadEventInput.model_rebuild()
CreateAutoresponderInput.model_rebuild()
UpdateAutoresponderInput.model_rebuild()
ReorderAutorespondersInput.model_rebuild()
GeneratedReplyFeedbackInput.model_rebuild()
UpdateGeneratedReplyInput.model_rebuild()
UpdateCompanyTierInput.model_rebuild()
UpdateTenantTierInput.model_rebuild()
AddMembersToTierInput.model_rebuild()
RemoveMembersFromTierInput.model_rebuild()
CreateTierInput.model_rebuild()
ServiceLevelAgreementInput.model_rebuild()
BreachActionInput.model_rebuild()
UpdateTierInput.model_rebuild()
CreateServiceLevelAgreementInput.model_rebuild()
UpdateServiceLevelAgreementInput.model_rebuild()
UpsertCompanyInput.model_rebuild()
UpsertTenantInput.model_rebuild()
UpdateCustomerCompanyInput.model_rebuild()
CustomerImpersonationInput.model_rebuild()
ImpersonationInput.model_rebuild()
ReplyToThreadEmailChannelSpecificOptionsInput.model_rebuild()
ReplyToThreadChannelSpecificOptionsInput.model_rebuild()
ReplyToThreadInput.model_rebuild()
CreateThreadChannelAssociationInput.model_rebuild()
CreateThreadInput.model_rebuild()
CreateWebhookTargetInput.model_rebuild()
UpdateWebhookTargetInput.model_rebuild()
ReorderCustomerCardConfigsInput.model_rebuild()
CreateCustomerCardConfigInput.model_rebuild()
UpdateCustomerCardConfigInput.model_rebuild()
UpdateSettingInput.model_rebuild()
UpdateConnectedSlackChannelInput.model_rebuild()
ConnectedSlackChannelsFilter.model_rebuild()
UpsertCustomerGroupInput.model_rebuild()
UpdateCustomerGroupInput.model_rebuild()
AddCustomerToCustomerGroupsInput.model_rebuild()
RemoveCustomerFromCustomerGroupsInput.model_rebuild()
CompleteServiceAuthorizationInput.model_rebuild()
BusinessHoursWeekDaysInput.model_rebuild()
UpsertBusinessHoursInput.model_rebuild()
SyncBusinessHoursSlotsInput.model_rebuild()
UpdateThreadTenantInput.model_rebuild()
UpdateThreadTierInput.model_rebuild()
AddCustomerToTenantsInput.model_rebuild()
RemoveCustomerFromTenantsInput.model_rebuild()
SetCustomerTenantsInput.model_rebuild()
CalculateRoleChangeCostInput.model_rebuild()

# Generated by ariadne-codegen

from typing import Any, Dict, Optional, Union

from .base_operation import GraphQLField
from .custom_typing_fields import (
    AcceptWorkspaceInviteOutputGraphQLField,
    ActorUnion,
    AddAdditionalAssigneesOutputGraphQLField,
    AddCustomerToCustomerGroupsOutputGraphQLField,
    AddCustomerToTenantsOutputGraphQLField,
    AddLabelsOutputGraphQLField,
    AddMembersToTierOutputGraphQLField,
    AddUserToActiveBillingRotaOutputGraphQLField,
    AddWorkspaceAlternateSupportEmailAddressOutputGraphQLField,
    ApiKeyConnectionGraphQLField,
    ApiKeyEdgeGraphQLField,
    ApiKeyGraphQLField,
    ArchiveLabelTypeOutputGraphQLField,
    AssignRolesToUserOutputGraphQLField,
    AssignThreadOutputGraphQLField,
    AttachmentDownloadUrlGraphQLField,
    AttachmentGraphQLField,
    AttachmentUploadUrlGraphQLField,
    AutoresponderBusinessHoursConditionGraphQLField,
    AutoresponderConditionUnion,
    AutoresponderConnectionGraphQLField,
    AutoresponderEdgeGraphQLField,
    AutoresponderGraphQLField,
    AutoresponderLabelConditionGraphQLField,
    AutoresponderSupportEmailsConditionGraphQLField,
    AutoresponderTierConditionGraphQLField,
    BillingPlanChangePreviewGraphQLField,
    BillingPlanConnectionGraphQLField,
    BillingPlanEdgeGraphQLField,
    BillingPlanGraphQLField,
    BillingRotaGraphQLField,
    BillingSubscriptionGraphQLField,
    BooleanSettingGraphQLField,
    BulkUpsertThreadFieldResultGraphQLField,
    BulkUpsertThreadFieldsOutputGraphQLField,
    BusinessHoursGraphQLField,
    BusinessHoursSlotGraphQLField,
    BusinessHoursWeekDayGraphQLField,
    BusinessHoursWeekDaysGraphQLField,
    CalculateRoleChangeCostOutputGraphQLField,
    ChangeBillingPlanOutputGraphQLField,
    ChangeThreadCustomerOutputGraphQLField,
    ChangeThreadPriorityOutputGraphQLField,
    ChangeUserStatusOutputGraphQLField,
    ChatAppConnectionGraphQLField,
    ChatAppEdgeGraphQLField,
    ChatAppGraphQLField,
    ChatAppHiddenSecretGraphQLField,
    ChatAppSecretGraphQLField,
    ChatEntryGraphQLField,
    ChatGraphQLField,
    ChatThreadChannelDetailsGraphQLField,
    CompanyConnectionGraphQLField,
    CompanyEdgeGraphQLField,
    CompanyGraphQLField,
    CompanySearchResultConnectionGraphQLField,
    CompanySearchResultEdgeGraphQLField,
    CompanySearchResultGraphQLField,
    CompanyTierMembershipGraphQLField,
    CompleteServiceAuthorizationOutputGraphQLField,
    ComponentBadgeGraphQLField,
    ComponentContainerContentUnion,
    ComponentContainerGraphQLField,
    ComponentCopyButtonGraphQLField,
    ComponentDividerGraphQLField,
    ComponentLinkButtonGraphQLField,
    ComponentPlainTextGraphQLField,
    ComponentRowContentUnion,
    ComponentRowGraphQLField,
    ComponentSpacerGraphQLField,
    ComponentTextGraphQLField,
    ConnectedSlackChannelConnectionGraphQLField,
    ConnectedSlackChannelEdgeGraphQLField,
    ConnectedSlackChannelGraphQLField,
    CreateApiKeyOutputGraphQLField,
    CreateAttachmentDownloadUrlOutputGraphQLField,
    CreateAttachmentUploadUrlOutputGraphQLField,
    CreateAutoresponderOutputGraphQLField,
    CreateBillingPortalSessionOutputGraphQLField,
    CreateChatAppOutputGraphQLField,
    CreateChatAppSecretOutputGraphQLField,
    CreateCheckoutSessionOutputGraphQLField,
    CreateCustomerCardConfigOutputGraphQLField,
    CreateCustomerEventOutputGraphQLField,
    CreateCustomerGroupOutputGraphQLField,
    CreateEmailPreviewUrlOutputGraphQLField,
    CreateIndexedDocumentOutputGraphQLField,
    CreateLabelTypeOutputGraphQLField,
    CreateMachineUserOutputGraphQLField,
    CreateMyFavoritePageOutputGraphQLField,
    CreateMyLinearIntegrationOutputGraphQLField,
    CreateMyMSTeamsIntegrationOutputGraphQLField,
    CreateMySlackIntegrationOutputGraphQLField,
    CreateNoteOutputGraphQLField,
    CreateSavedThreadsViewOutputGraphQLField,
    CreateServiceLevelAgreementOutputGraphQLField,
    CreateSnippetOutputGraphQLField,
    CreateThreadChannelAssociationOutputGraphQLField,
    CreateThreadDiscussionOutputGraphQLField,
    CreateThreadEventOutputGraphQLField,
    CreateThreadFieldSchemaOutputGraphQLField,
    CreateThreadLinkOutputGraphQLField,
    CreateThreadOutputGraphQLField,
    CreateTierOutputGraphQLField,
    CreateUserAccountOutputGraphQLField,
    CreateUserAuthSlackIntegrationOutputGraphQLField,
    CreateWebhookTargetOutputGraphQLField,
    CreateWorkflowRuleOutputGraphQLField,
    CreateWorkspaceDiscordChannelIntegrationOutputGraphQLField,
    CreateWorkspaceDiscordIntegrationOutputGraphQLField,
    CreateWorkspaceEmailDomainSettingsOutputGraphQLField,
    CreateWorkspaceFileUploadUrlOutputGraphQLField,
    CreateWorkspaceMSTeamsIntegrationOutputGraphQLField,
    CreateWorkspaceOutputGraphQLField,
    CreateWorkspaceSlackChannelIntegrationOutputGraphQLField,
    CreateWorkspaceSlackIntegrationOutputGraphQLField,
    CustomEntryGraphQLField,
    CustomerActorGraphQLField,
    CustomerCardConfigApiHeaderGraphQLField,
    CustomerCardConfigGraphQLField,
    CustomerCardInstanceGraphQLField,
    CustomerConnectionGraphQLField,
    CustomerEdgeGraphQLField,
    CustomerEmailActorGraphQLField,
    CustomerEventEntryGraphQLField,
    CustomerEventGraphQLField,
    CustomerGraphQLField,
    CustomerGroupConnectionGraphQLField,
    CustomerGroupEdgeGraphQLField,
    CustomerGroupGraphQLField,
    CustomerGroupMembershipConnectionGraphQLField,
    CustomerGroupMembershipEdgeGraphQLField,
    CustomerGroupMembershipGraphQLField,
    CustomerSearchConnectionGraphQLField,
    CustomerSearchEdgeGraphQLField,
    CustomerTenantMembershipConnectionGraphQLField,
    CustomerTenantMembershipEdgeGraphQLField,
    CustomerTenantMembershipGraphQLField,
    CustomTimelineEntryComponentUnion,
    DateTimeGraphQLField,
    DeleteApiKeyOutputGraphQLField,
    DeleteAutoresponderOutputGraphQLField,
    DeleteBusinessHoursOutputGraphQLField,
    DeleteChatAppOutputGraphQLField,
    DeleteChatAppSecretOutputGraphQLField,
    DeleteCustomerCardConfigOutputGraphQLField,
    DeleteCustomerGroupOutputGraphQLField,
    DeleteCustomerOutputGraphQLField,
    DeletedCustomerActorGraphQLField,
    DeletedCustomerEmailActorGraphQLField,
    DeleteIndexedDocumentOutputGraphQLField,
    DeleteMachineUserOutputGraphQLField,
    DeleteMyFavoritePageOutputGraphQLField,
    DeleteMyLinearIntegrationOutputGraphQLField,
    DeleteMyMSTeamsIntegrationOutputGraphQLField,
    DeleteMyServiceAuthorizationOutputGraphQLField,
    DeleteMySlackIntegrationOutputGraphQLField,
    DeleteNoteOutputGraphQLField,
    DeleteSavedThreadsViewOutputGraphQLField,
    DeleteServiceAuthorizationOutputGraphQLField,
    DeleteServiceLevelAgreementOutputGraphQLField,
    DeleteSnippetOutputGraphQLField,
    DeleteThreadChannelAssociationOutputGraphQLField,
    DeleteThreadFieldOutputGraphQLField,
    DeleteThreadFieldSchemaOutputGraphQLField,
    DeleteThreadLinkOutputGraphQLField,
    DeleteTierOutputGraphQLField,
    DeleteUserAuthSlackIntegrationOutputGraphQLField,
    DeleteUserOutputGraphQLField,
    DeleteWebhookTargetOutputGraphQLField,
    DeleteWorkflowRuleOutputGraphQLField,
    DeleteWorkspaceDiscordChannelIntegrationOutputGraphQLField,
    DeleteWorkspaceDiscordIntegrationOutputGraphQLField,
    DeleteWorkspaceEmailDomainSettingsOutputGraphQLField,
    DeleteWorkspaceFileOutputGraphQLField,
    DeleteWorkspaceInviteOutputGraphQLField,
    DeleteWorkspaceMSTeamsIntegrationOutputGraphQLField,
    DeleteWorkspaceSlackChannelIntegrationOutputGraphQLField,
    DeleteWorkspaceSlackIntegrationOutputGraphQLField,
    DependsOnLabelTypeGraphQLField,
    DependsOnThreadFieldTypeGraphQLField,
    DiscordMessageEntryGraphQLField,
    DnsRecordGraphQLField,
    EmailActorUnion,
    EmailAddressGraphQLField,
    EmailBounceGraphQLField,
    EmailEntryGraphQLField,
    EmailGraphQLField,
    EmailParticipantGraphQLField,
    EmailPreviewUrlGraphQLField,
    EmailSignatureGraphQLField,
    EntryUnion,
    EventComponentUnion,
    FavoritePageConnectionGraphQLField,
    FavoritePageEdgeGraphQLField,
    FavoritePageGraphQLField,
    FileSizeGraphQLField,
    ForkThreadOutputGraphQLField,
    GeneratedReplyGraphQLField,
    IndexedDocumentConnectionGraphQLField,
    IndexedDocumentEdgeGraphQLField,
    IndexedDocumentGraphQLField,
    IndexedDocumentStatusFailedGraphQLField,
    IndexedDocumentStatusIndexedGraphQLField,
    IndexedDocumentStatusPendingGraphQLField,
    IndexedDocumentStatusUnion,
    InternalActorUnion,
    InviteUserToWorkspaceOutputGraphQLField,
    JiraIntegrationTokenGraphQLField,
    LabelGraphQLField,
    LabelTypeConnectionGraphQLField,
    LabelTypeEdgeGraphQLField,
    LabelTypeGraphQLField,
    LinearIntegrationTokenGraphQLField,
    LinearIssueThreadLinkStateTransitionedEntryGraphQLField,
    MachineUserActorGraphQLField,
    MachineUserConnectionGraphQLField,
    MachineUserEdgeGraphQLField,
    MachineUserGraphQLField,
    MarkCustomerAsSpamOutputGraphQLField,
    MarkThreadAsDoneOutputGraphQLField,
    MarkThreadAsTodoOutputGraphQLField,
    MarkThreadDiscussionAsResolvedOutputGraphQLField,
    MetricDimensionGraphQLField,
    MSTeamsMessageEntryGraphQLField,
    MSTeamsMessageGraphQLField,
    MutationErrorGraphQLField,
    MutationFieldErrorGraphQLField,
    NoteEntryGraphQLField,
    NoteGraphQLField,
    NumberSettingGraphQLField,
    PageInfoGraphQLField,
    PaymentMethodGraphQLField,
    PermissionsGraphQLField,
    PreviewBillingPlanChangeOutputGraphQLField,
    PriceGraphQLField,
    RegenerateWorkspaceHmacOutputGraphQLField,
    ReloadCustomerCardInstanceOutputGraphQLField,
    RemoveAdditionalAssigneesOutputGraphQLField,
    RemoveCustomerFromCustomerGroupsOutputGraphQLField,
    RemoveCustomerFromTenantsOutputGraphQLField,
    RemoveLabelsOutputGraphQLField,
    RemoveMembersFromTierOutputGraphQLField,
    RemoveUserFromActiveBillingRotaOutputGraphQLField,
    RemoveWorkspaceAlternateSupportEmailAddressOutputGraphQLField,
    ReorderAutorespondersOutputGraphQLField,
    ReorderCustomerCardConfigsOutputGraphQLField,
    ReorderThreadFieldSchemasOutputGraphQLField,
    ReplyToEmailOutputGraphQLField,
    ReplyToThreadOutputGraphQLField,
    RoleChangeCostGraphQLField,
    RoleConnectionGraphQLField,
    RoleEdgeGraphQLField,
    RoleGraphQLField,
    SavedThreadsViewConnectionGraphQLField,
    SavedThreadsViewEdgeGraphQLField,
    SavedThreadsViewFilterGraphQLField,
    SavedThreadsViewFilterThreadFieldGraphQLField,
    SavedThreadsViewGraphQLField,
    SavedThreadsViewSortGraphQLField,
    SendBulkEmailOutputGraphQLField,
    SendChatOutputGraphQLField,
    SendCustomerChatOutputGraphQLField,
    SendDiscordMessageOutputGraphQLField,
    SendMSTeamsMessageOutputGraphQLField,
    SendNewEmailOutputGraphQLField,
    SendSlackMessageOutputGraphQLField,
    SendThreadDiscussionMessageOutputGraphQLField,
    ServiceAuthorizationConnectionDetailsGraphQLField,
    ServiceAuthorizationConnectionGraphQLField,
    ServiceAuthorizationEdgeGraphQLField,
    ServiceAuthorizationGraphQLField,
    ServiceLevelAgreementStatusDetailAchievedGraphQLField,
    ServiceLevelAgreementStatusDetailBreachedGraphQLField,
    ServiceLevelAgreementStatusDetailBreachingGraphQLField,
    ServiceLevelAgreementStatusDetailCancelledGraphQLField,
    ServiceLevelAgreementStatusDetailImminentBreachGraphQLField,
    ServiceLevelAgreementStatusDetailPendingGraphQLField,
    ServiceLevelAgreementStatusDetailUnion,
    ServiceLevelAgreementStatusSummaryGraphQLField,
    ServiceLevelAgreementStatusTransitionedEntryGraphQLField,
    SetCustomerTenantsOutputGraphQLField,
    SettingScopeGraphQLField,
    SettingUnion,
    ShareThreadToUserInSlackOutputGraphQLField,
    SingleValueMetricGraphQLField,
    SingleValueMetricValueGraphQLField,
    SlackMessageEntryGraphQLField,
    SlackMessageEntryRelatedThreadGraphQLField,
    SlackReactionGraphQLField,
    SlackReplyEntryGraphQLField,
    SlackThreadChannelAssociationGraphQLField,
    SlackThreadChannelDetailsGraphQLField,
    SlackUserConnectionGraphQLField,
    SlackUserEdgeGraphQLField,
    SlackUserGraphQLField,
    SlackUserIdentityGraphQLField,
    SnippetConnectionGraphQLField,
    SnippetEdgeGraphQLField,
    SnippetGraphQLField,
    SnoozeThreadOutputGraphQLField,
    StartServiceAuthorizationOutputGraphQLField,
    StringSettingGraphQLField,
    SubscriptionEventTypeGraphQLField,
    SupportEmailAddressEmailActorGraphQLField,
    SyncBusinessHoursSlotsOutputGraphQLField,
    SystemActorGraphQLField,
    SystemGraphQLField,
    TenantConnectionGraphQLField,
    TenantEdgeGraphQLField,
    TenantGraphQLField,
    TenantSearchResultConnectionGraphQLField,
    TenantSearchResultEdgeGraphQLField,
    TenantSearchResultGraphQLField,
    TenantTierMembershipGraphQLField,
    ThreadAdditionalAssigneesTransitionedEntryGraphQLField,
    ThreadAssigneeUnion,
    ThreadAssignmentTransitionedEntryGraphQLField,
    ThreadChannelAssociationGraphQLField,
    ThreadChannelDetailsUnion,
    ThreadClusterGraphQLField,
    ThreadConnectionGraphQLField,
    ThreadDiscussionEntryGraphQLField,
    ThreadDiscussionGraphQLField,
    ThreadDiscussionMessageConnectionGraphQLField,
    ThreadDiscussionMessageEdgeGraphQLField,
    ThreadDiscussionMessageGraphQLField,
    ThreadDiscussionMessageReactionGraphQLField,
    ThreadDiscussionResolvedEntryGraphQLField,
    ThreadEdgeGraphQLField,
    ThreadEventEntryGraphQLField,
    ThreadEventGraphQLField,
    ThreadFieldGraphQLField,
    ThreadFieldSchemaConnectionGraphQLField,
    ThreadFieldSchemaEdgeGraphQLField,
    ThreadFieldSchemaGraphQLField,
    ThreadGraphQLField,
    ThreadLabelsChangedEntryGraphQLField,
    ThreadLinkConnectionGraphQLField,
    ThreadLinkEdgeGraphQLField,
    ThreadLinkGroupAggregateMetricsGraphQLField,
    ThreadLinkGroupCompanyMetricsGraphQLField,
    ThreadLinkGroupConnectionGraphQLField,
    ThreadLinkGroupEdgeGraphQLField,
    ThreadLinkGroupGraphQLField,
    ThreadLinkGroupSingleCompanyMetricsGraphQLField,
    ThreadLinkGroupSingleTierMetricsGraphQLField,
    ThreadLinkGroupTierMetricsGraphQLField,
    ThreadLinkUpdatedEntryGraphQLField,
    ThreadMessageInfoGraphQLField,
    ThreadPriorityChangedEntryGraphQLField,
    ThreadsDisplayOptionsGraphQLField,
    ThreadSearchResultConnectionGraphQLField,
    ThreadSearchResultEdgeGraphQLField,
    ThreadSearchResultGraphQLField,
    ThreadStatusDetailCreatedGraphQLField,
    ThreadStatusDetailDoneAutomaticallySetGraphQLField,
    ThreadStatusDetailDoneManuallySetGraphQLField,
    ThreadStatusDetailIgnoredGraphQLField,
    ThreadStatusDetailInProgressGraphQLField,
    ThreadStatusDetailLinearUpdatedGraphQLField,
    ThreadStatusDetailNewReplyGraphQLField,
    ThreadStatusDetailRepliedGraphQLField,
    ThreadStatusDetailSnoozedGraphQLField,
    ThreadStatusDetailThreadDiscussionResolvedGraphQLField,
    ThreadStatusDetailThreadLinkUpdatedGraphQLField,
    ThreadStatusDetailUnion,
    ThreadStatusDetailUnsnoozedGraphQLField,
    ThreadStatusDetailWaitingForCustomerGraphQLField,
    ThreadStatusDetailWaitingForDurationGraphQLField,
    ThreadStatusTransitionedEntryGraphQLField,
    ThreadWithDistanceGraphQLField,
    TierConnectionGraphQLField,
    TierEdgeGraphQLField,
    TierGraphQLField,
    TierMembershipConnectionGraphQLField,
    TierMembershipEdgeGraphQLField,
    TierMembershipUnion,
    TimeGraphQLField,
    TimelineEntryConnectionGraphQLField,
    TimelineEntryEdgeGraphQLField,
    TimelineEntryGraphQLField,
    TimelineEventEntryGraphQLField,
    TimeSeriesMetricDimensionGraphQLField,
    TimeSeriesMetricGraphQLField,
    TimeSeriesSeriesGraphQLField,
    TimezoneGraphQLField,
    ToggleSlackMessageReactionOutputGraphQLField,
    UnarchiveLabelTypeOutputGraphQLField,
    UnassignThreadOutputGraphQLField,
    UnmarkCustomerAsSpamOutputGraphQLField,
    UpdateActiveBillingRotaOutputGraphQLField,
    UpdateApiKeyOutputGraphQLField,
    UpdateAutoresponderOutputGraphQLField,
    UpdateChatAppOutputGraphQLField,
    UpdateCompanyTierOutputGraphQLField,
    UpdateConnectedSlackChannelOutputGraphQLField,
    UpdateCustomerCardConfigOutputGraphQLField,
    UpdateCustomerCompanyOutputGraphQLField,
    UpdateCustomerGroupOutputGraphQLField,
    UpdateGeneratedReplyOutputGraphQLField,
    UpdateLabelTypeOutputGraphQLField,
    UpdateMachineUserOutputGraphQLField,
    UpdateSavedThreadsViewOutputGraphQLField,
    UpdateServiceLevelAgreementOutputGraphQLField,
    UpdateSettingOutputGraphQLField,
    UpdateSnippetOutputGraphQLField,
    UpdateTenantTierOutputGraphQLField,
    UpdateThreadFieldSchemaOutputGraphQLField,
    UpdateThreadTenantOutputGraphQLField,
    UpdateThreadTierOutputGraphQLField,
    UpdateThreadTitleOutputGraphQLField,
    UpdateTierOutputGraphQLField,
    UpdateWebhookTargetOutputGraphQLField,
    UpdateWorkflowRuleOutputGraphQLField,
    UpdateWorkspaceEmailSettingsOutputGraphQLField,
    UpdateWorkspaceOutputGraphQLField,
    UploadFormDataGraphQLField,
    UpsertBusinessHoursOutputGraphQLField,
    UpsertCompanyOutputGraphQLField,
    UpsertCustomerGroupOutputGraphQLField,
    UpsertCustomerOutputGraphQLField,
    UpsertMyEmailSignatureOutputGraphQLField,
    UpsertTenantOutputGraphQLField,
    UpsertThreadFieldOutputGraphQLField,
    UserAccountGraphQLField,
    UserActorGraphQLField,
    UserAuthSlackInstallationInfoGraphQLField,
    UserAuthSlackIntegrationGraphQLField,
    UserConnectionGraphQLField,
    UserEdgeGraphQLField,
    UserEmailActorGraphQLField,
    UserGraphQLField,
    UserLinearInstallationInfoGraphQLField,
    UserLinearIntegrationGraphQLField,
    UserMSTeamsInstallationInfoGraphQLField,
    UserMSTeamsIntegrationGraphQLField,
    UserSlackInstallationInfoGraphQLField,
    UserSlackIntegrationGraphQLField,
    VerifyWorkspaceEmailDnsSettingsOutputGraphQLField,
    VerifyWorkspaceEmailForwardingSettingsOutputGraphQLField,
    WebhookTargetConnectionGraphQLField,
    WebhookTargetEdgeGraphQLField,
    WebhookTargetEventSubscriptionGraphQLField,
    WebhookTargetGraphQLField,
    WebhookVersionConnectionGraphQLField,
    WebhookVersionEdgeGraphQLField,
    WebhookVersionGraphQLField,
    WorkflowRuleConnectionGraphQLField,
    WorkflowRuleEdgeGraphQLField,
    WorkflowRuleGraphQLField,
    WorkspaceChatSettingsGraphQLField,
    WorkspaceConnectionGraphQLField,
    WorkspaceDiscordChannelInstallationInfoGraphQLField,
    WorkspaceDiscordChannelIntegrationConnectionGraphQLField,
    WorkspaceDiscordChannelIntegrationEdgeGraphQLField,
    WorkspaceDiscordChannelIntegrationGraphQLField,
    WorkspaceDiscordIntegrationConnectionGraphQLField,
    WorkspaceDiscordIntegrationEdgeGraphQLField,
    WorkspaceDiscordIntegrationGraphQLField,
    WorkspaceEdgeGraphQLField,
    WorkspaceEmailDomainSettingsGraphQLField,
    WorkspaceEmailSettingsGraphQLField,
    WorkspaceFileDownloadUrlGraphQLField,
    WorkspaceFileGraphQLField,
    WorkspaceFileUploadUrlGraphQLField,
    WorkspaceGraphQLField,
    WorkspaceHmacGraphQLField,
    WorkspaceInviteConnectionGraphQLField,
    WorkspaceInviteEdgeGraphQLField,
    WorkspaceInviteGraphQLField,
    WorkspaceMSTeamsInstallationInfoGraphQLField,
    WorkspaceMSTeamsIntegrationGraphQLField,
    WorkspaceSlackChannelInstallationInfoGraphQLField,
    WorkspaceSlackChannelIntegrationConnectionGraphQLField,
    WorkspaceSlackChannelIntegrationEdgeGraphQLField,
    WorkspaceSlackChannelIntegrationGraphQLField,
    WorkspaceSlackInstallationInfoGraphQLField,
    WorkspaceSlackIntegrationConnectionGraphQLField,
    WorkspaceSlackIntegrationEdgeGraphQLField,
    WorkspaceSlackIntegrationGraphQLField,
)
from .input_types import CustomerGroupMembershipsFilter, ThreadTimelineEntriesFilter


class AcceptWorkspaceInviteOutputFields(GraphQLField):
    @classmethod
    def invite(cls) -> "WorkspaceInviteFields":
        return WorkspaceInviteFields("invite")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            AcceptWorkspaceInviteOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceInviteFields",
        ]
    ) -> "AcceptWorkspaceInviteOutputFields":
        """Subfields should come from the AcceptWorkspaceInviteOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AcceptWorkspaceInviteOutputFields":
        self._alias = alias
        return self


class AddAdditionalAssigneesOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            AddAdditionalAssigneesOutputGraphQLField,
            "MutationErrorFields",
            "ThreadFields",
        ]
    ) -> "AddAdditionalAssigneesOutputFields":
        """Subfields should come from the AddAdditionalAssigneesOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddAdditionalAssigneesOutputFields":
        self._alias = alias
        return self


class AddCustomerToCustomerGroupsOutputFields(GraphQLField):
    @classmethod
    def customer_group_memberships(cls) -> "CustomerGroupMembershipFields":
        return CustomerGroupMembershipFields("customer_group_memberships")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            AddCustomerToCustomerGroupsOutputGraphQLField,
            "CustomerGroupMembershipFields",
            "MutationErrorFields",
        ]
    ) -> "AddCustomerToCustomerGroupsOutputFields":
        """Subfields should come from the AddCustomerToCustomerGroupsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddCustomerToCustomerGroupsOutputFields":
        self._alias = alias
        return self


class AddCustomerToTenantsOutputFields(GraphQLField):
    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            AddCustomerToTenantsOutputGraphQLField,
            "CustomerFields",
            "MutationErrorFields",
        ]
    ) -> "AddCustomerToTenantsOutputFields":
        """Subfields should come from the AddCustomerToTenantsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddCustomerToTenantsOutputFields":
        self._alias = alias
        return self


class AddLabelsOutputFields(GraphQLField):
    @classmethod
    def labels(cls) -> "LabelFields":
        return LabelFields("labels")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            AddLabelsOutputGraphQLField, "LabelFields", "MutationErrorFields"
        ]
    ) -> "AddLabelsOutputFields":
        """Subfields should come from the AddLabelsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddLabelsOutputFields":
        self._alias = alias
        return self


class AddMembersToTierOutputFields(GraphQLField):
    memberships: "TierMembershipUnion" = TierMembershipUnion("memberships")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            AddMembersToTierOutputGraphQLField,
            "MutationErrorFields",
            "TierMembershipUnion",
        ]
    ) -> "AddMembersToTierOutputFields":
        """Subfields should come from the AddMembersToTierOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddMembersToTierOutputFields":
        self._alias = alias
        return self


class AddUserToActiveBillingRotaOutputFields(GraphQLField):
    @classmethod
    def billing_rota(cls) -> "BillingRotaFields":
        return BillingRotaFields("billing_rota")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            AddUserToActiveBillingRotaOutputGraphQLField,
            "BillingRotaFields",
            "MutationErrorFields",
        ]
    ) -> "AddUserToActiveBillingRotaOutputFields":
        """Subfields should come from the AddUserToActiveBillingRotaOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AddUserToActiveBillingRotaOutputFields":
        self._alias = alias
        return self


class AddWorkspaceAlternateSupportEmailAddressOutputFields(GraphQLField):
    @classmethod
    def workspace_email_domain_settings(cls) -> "WorkspaceEmailDomainSettingsFields":
        return WorkspaceEmailDomainSettingsFields("workspace_email_domain_settings")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            AddWorkspaceAlternateSupportEmailAddressOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceEmailDomainSettingsFields",
        ]
    ) -> "AddWorkspaceAlternateSupportEmailAddressOutputFields":
        """Subfields should come from the AddWorkspaceAlternateSupportEmailAddressOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "AddWorkspaceAlternateSupportEmailAddressOutputFields":
        self._alias = alias
        return self


class ApiKeyFields(GraphQLField):
    id: "ApiKeyGraphQLField" = ApiKeyGraphQLField("id")
    description: "ApiKeyGraphQLField" = ApiKeyGraphQLField("description")
    permissions: "ApiKeyGraphQLField" = ApiKeyGraphQLField("permissions")
    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    is_deleted: "ApiKeyGraphQLField" = ApiKeyGraphQLField("isDeleted")

    @classmethod
    def deleted_at(cls) -> "DateTimeFields":
        return DateTimeFields("deleted_at")

    deleted_by: "ActorUnion" = ActorUnion("deletedBy")

    def fields(
        self,
        *subfields: Union[
            ApiKeyGraphQLField, "ActorUnion", "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "ApiKeyFields":
        """Subfields should come from the ApiKeyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ApiKeyFields":
        self._alias = alias
        return self


class ApiKeyConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ApiKeyEdgeFields":
        return ApiKeyEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            ApiKeyConnectionGraphQLField, "ApiKeyEdgeFields", "PageInfoFields"
        ]
    ) -> "ApiKeyConnectionFields":
        """Subfields should come from the ApiKeyConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ApiKeyConnectionFields":
        self._alias = alias
        return self


class ApiKeyEdgeFields(GraphQLField):
    cursor: "ApiKeyEdgeGraphQLField" = ApiKeyEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ApiKeyFields":
        return ApiKeyFields("node")

    def fields(
        self, *subfields: Union[ApiKeyEdgeGraphQLField, "ApiKeyFields"]
    ) -> "ApiKeyEdgeFields":
        """Subfields should come from the ApiKeyEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ApiKeyEdgeFields":
        self._alias = alias
        return self


class ArchiveLabelTypeOutputFields(GraphQLField):
    @classmethod
    def label_type(cls) -> "LabelTypeFields":
        return LabelTypeFields("label_type")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ArchiveLabelTypeOutputGraphQLField, "LabelTypeFields", "MutationErrorFields"
        ]
    ) -> "ArchiveLabelTypeOutputFields":
        """Subfields should come from the ArchiveLabelTypeOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ArchiveLabelTypeOutputFields":
        self._alias = alias
        return self


class AssignRolesToUserOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[AssignRolesToUserOutputGraphQLField, "MutationErrorFields"]
    ) -> "AssignRolesToUserOutputFields":
        """Subfields should come from the AssignRolesToUserOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AssignRolesToUserOutputFields":
        self._alias = alias
        return self


class AssignThreadOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            AssignThreadOutputGraphQLField, "MutationErrorFields", "ThreadFields"
        ]
    ) -> "AssignThreadOutputFields":
        """Subfields should come from the AssignThreadOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AssignThreadOutputFields":
        self._alias = alias
        return self


class AttachmentFields(GraphQLField):
    id: "AttachmentGraphQLField" = AttachmentGraphQLField("id")
    file_name: "AttachmentGraphQLField" = AttachmentGraphQLField("fileName")

    @classmethod
    def file_size(cls) -> "FileSizeFields":
        return FileSizeFields("file_size")

    file_extension: "AttachmentGraphQLField" = AttachmentGraphQLField("fileExtension")
    file_mime_type: "AttachmentGraphQLField" = AttachmentGraphQLField("fileMimeType")
    type: "AttachmentGraphQLField" = AttachmentGraphQLField("type")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "ActorUnion" = ActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "ActorUnion" = ActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            AttachmentGraphQLField, "ActorUnion", "DateTimeFields", "FileSizeFields"
        ]
    ) -> "AttachmentFields":
        """Subfields should come from the AttachmentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AttachmentFields":
        self._alias = alias
        return self


class AttachmentDownloadUrlFields(GraphQLField):
    @classmethod
    def attachment(cls) -> "AttachmentFields":
        return AttachmentFields("attachment")

    download_url: "AttachmentDownloadUrlGraphQLField" = (
        AttachmentDownloadUrlGraphQLField("downloadUrl")
    )

    @classmethod
    def expires_at(cls) -> "DateTimeFields":
        return DateTimeFields("expires_at")

    def fields(
        self,
        *subfields: Union[
            AttachmentDownloadUrlGraphQLField, "AttachmentFields", "DateTimeFields"
        ]
    ) -> "AttachmentDownloadUrlFields":
        """Subfields should come from the AttachmentDownloadUrlFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AttachmentDownloadUrlFields":
        self._alias = alias
        return self


class AttachmentUploadUrlFields(GraphQLField):
    @classmethod
    def attachment(cls) -> "AttachmentFields":
        return AttachmentFields("attachment")

    upload_form_url: "AttachmentUploadUrlGraphQLField" = (
        AttachmentUploadUrlGraphQLField("uploadFormUrl")
    )

    @classmethod
    def upload_form_data(cls) -> "UploadFormDataFields":
        return UploadFormDataFields("upload_form_data")

    @classmethod
    def expires_at(cls) -> "DateTimeFields":
        return DateTimeFields("expires_at")

    def fields(
        self,
        *subfields: Union[
            AttachmentUploadUrlGraphQLField,
            "AttachmentFields",
            "DateTimeFields",
            "UploadFormDataFields",
        ]
    ) -> "AttachmentUploadUrlFields":
        """Subfields should come from the AttachmentUploadUrlFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AttachmentUploadUrlFields":
        self._alias = alias
        return self


class AutoresponderFields(GraphQLField):
    id: "AutoresponderGraphQLField" = AutoresponderGraphQLField("id")
    name: "AutoresponderGraphQLField" = AutoresponderGraphQLField("name")
    order: "AutoresponderGraphQLField" = AutoresponderGraphQLField("order")
    message_sources: "AutoresponderGraphQLField" = AutoresponderGraphQLField(
        "messageSources"
    )
    conditions: "AutoresponderConditionUnion" = AutoresponderConditionUnion(
        "conditions"
    )
    text_content: "AutoresponderGraphQLField" = AutoresponderGraphQLField("textContent")
    markdown_content: "AutoresponderGraphQLField" = AutoresponderGraphQLField(
        "markdownContent"
    )
    is_enabled: "AutoresponderGraphQLField" = AutoresponderGraphQLField("isEnabled")
    response_delay_seconds: "AutoresponderGraphQLField" = AutoresponderGraphQLField(
        "responseDelaySeconds"
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            AutoresponderGraphQLField,
            "AutoresponderConditionUnion",
            "DateTimeFields",
            "InternalActorUnion",
        ]
    ) -> "AutoresponderFields":
        """Subfields should come from the AutoresponderFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoresponderFields":
        self._alias = alias
        return self


class AutoresponderBusinessHoursConditionFields(GraphQLField):
    is_outside_business_hours: "AutoresponderBusinessHoursConditionGraphQLField" = (
        AutoresponderBusinessHoursConditionGraphQLField("isOutsideBusinessHours")
    )

    def fields(
        self, *subfields: AutoresponderBusinessHoursConditionGraphQLField
    ) -> "AutoresponderBusinessHoursConditionFields":
        """Subfields should come from the AutoresponderBusinessHoursConditionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoresponderBusinessHoursConditionFields":
        self._alias = alias
        return self


class AutoresponderConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "AutoresponderEdgeFields":
        return AutoresponderEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            AutoresponderConnectionGraphQLField,
            "AutoresponderEdgeFields",
            "PageInfoFields",
        ]
    ) -> "AutoresponderConnectionFields":
        """Subfields should come from the AutoresponderConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoresponderConnectionFields":
        self._alias = alias
        return self


class AutoresponderEdgeFields(GraphQLField):
    cursor: "AutoresponderEdgeGraphQLField" = AutoresponderEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "AutoresponderFields":
        return AutoresponderFields("node")

    def fields(
        self, *subfields: Union[AutoresponderEdgeGraphQLField, "AutoresponderFields"]
    ) -> "AutoresponderEdgeFields":
        """Subfields should come from the AutoresponderEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoresponderEdgeFields":
        self._alias = alias
        return self


class AutoresponderLabelConditionFields(GraphQLField):
    label_type_ids: "AutoresponderLabelConditionGraphQLField" = (
        AutoresponderLabelConditionGraphQLField("labelTypeIds")
    )

    def fields(
        self, *subfields: AutoresponderLabelConditionGraphQLField
    ) -> "AutoresponderLabelConditionFields":
        """Subfields should come from the AutoresponderLabelConditionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoresponderLabelConditionFields":
        self._alias = alias
        return self


class AutoresponderSupportEmailsConditionFields(GraphQLField):
    support_email_addresses: "AutoresponderSupportEmailsConditionGraphQLField" = (
        AutoresponderSupportEmailsConditionGraphQLField("supportEmailAddresses")
    )

    def fields(
        self, *subfields: AutoresponderSupportEmailsConditionGraphQLField
    ) -> "AutoresponderSupportEmailsConditionFields":
        """Subfields should come from the AutoresponderSupportEmailsConditionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoresponderSupportEmailsConditionFields":
        self._alias = alias
        return self


class AutoresponderTierConditionFields(GraphQLField):
    tier_id: "AutoresponderTierConditionGraphQLField" = (
        AutoresponderTierConditionGraphQLField("tierId")
    )

    def fields(
        self, *subfields: AutoresponderTierConditionGraphQLField
    ) -> "AutoresponderTierConditionFields":
        """Subfields should come from the AutoresponderTierConditionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "AutoresponderTierConditionFields":
        self._alias = alias
        return self


class BillingPlanFields(GraphQLField):
    key: "BillingPlanGraphQLField" = BillingPlanGraphQLField("key")
    name: "BillingPlanGraphQLField" = BillingPlanGraphQLField("name")
    description: "BillingPlanGraphQLField" = BillingPlanGraphQLField("description")
    features: "BillingPlanGraphQLField" = BillingPlanGraphQLField("features")
    highlighted_label: "BillingPlanGraphQLField" = BillingPlanGraphQLField(
        "highlightedLabel"
    )
    is_self_checkout_eligible: "BillingPlanGraphQLField" = BillingPlanGraphQLField(
        "isSelfCheckoutEligible"
    )

    @classmethod
    def monthly_price(cls) -> "PriceFields":
        return PriceFields("monthly_price")

    @classmethod
    def yearly_price(cls) -> "PriceFields":
        return PriceFields("yearly_price")

    @classmethod
    def prices(cls) -> "RecurringPriceInterface":
        return RecurringPriceInterface("prices")

    def fields(
        self,
        *subfields: Union[
            BillingPlanGraphQLField, "PriceFields", "RecurringPriceInterface"
        ]
    ) -> "BillingPlanFields":
        """Subfields should come from the BillingPlanFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BillingPlanFields":
        self._alias = alias
        return self


class BillingPlanChangePreviewFields(GraphQLField):
    @classmethod
    def immediate_cost(cls) -> "PriceFields":
        return PriceFields("immediate_cost")

    @classmethod
    def earliest_effective_at(cls) -> "DateTimeFields":
        return DateTimeFields("earliest_effective_at")

    def fields(
        self,
        *subfields: Union[
            BillingPlanChangePreviewGraphQLField, "DateTimeFields", "PriceFields"
        ]
    ) -> "BillingPlanChangePreviewFields":
        """Subfields should come from the BillingPlanChangePreviewFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BillingPlanChangePreviewFields":
        self._alias = alias
        return self


class BillingPlanConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "BillingPlanEdgeFields":
        return BillingPlanEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            BillingPlanConnectionGraphQLField, "BillingPlanEdgeFields", "PageInfoFields"
        ]
    ) -> "BillingPlanConnectionFields":
        """Subfields should come from the BillingPlanConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BillingPlanConnectionFields":
        self._alias = alias
        return self


class BillingPlanEdgeFields(GraphQLField):
    cursor: "BillingPlanEdgeGraphQLField" = BillingPlanEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "BillingPlanFields":
        return BillingPlanFields("node")

    def fields(
        self, *subfields: Union[BillingPlanEdgeGraphQLField, "BillingPlanFields"]
    ) -> "BillingPlanEdgeFields":
        """Subfields should come from the BillingPlanEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BillingPlanEdgeFields":
        self._alias = alias
        return self


class BillingRotaFields(GraphQLField):
    on_rota_user_ids: "BillingRotaGraphQLField" = BillingRotaGraphQLField(
        "onRotaUserIds"
    )
    off_rota_user_ids: "BillingRotaGraphQLField" = BillingRotaGraphQLField(
        "offRotaUserIds"
    )

    def fields(self, *subfields: BillingRotaGraphQLField) -> "BillingRotaFields":
        """Subfields should come from the BillingRotaFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BillingRotaFields":
        self._alias = alias
        return self


class BillingSubscriptionFields(GraphQLField):
    status: "BillingSubscriptionGraphQLField" = BillingSubscriptionGraphQLField(
        "status"
    )
    plan_key: "BillingSubscriptionGraphQLField" = BillingSubscriptionGraphQLField(
        "planKey"
    )
    plan_name: "BillingSubscriptionGraphQLField" = BillingSubscriptionGraphQLField(
        "planName"
    )
    interval: "BillingSubscriptionGraphQLField" = BillingSubscriptionGraphQLField(
        "interval"
    )

    @classmethod
    def cancels_at(cls) -> "DateTimeFields":
        return DateTimeFields("cancels_at")

    @classmethod
    def trial_ends_at(cls) -> "DateTimeFields":
        return DateTimeFields("trial_ends_at")

    @classmethod
    def entitlements(cls) -> "BillingFeatureEntitlementInterface":
        return BillingFeatureEntitlementInterface("entitlements")

    @classmethod
    def ended_at(cls) -> "DateTimeFields":
        return DateTimeFields("ended_at")

    def fields(
        self,
        *subfields: Union[
            BillingSubscriptionGraphQLField,
            "BillingFeatureEntitlementInterface",
            "DateTimeFields",
        ]
    ) -> "BillingSubscriptionFields":
        """Subfields should come from the BillingSubscriptionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BillingSubscriptionFields":
        self._alias = alias
        return self


class BooleanSettingFields(GraphQLField):
    code: "BooleanSettingGraphQLField" = BooleanSettingGraphQLField("code")
    boolean_value: "BooleanSettingGraphQLField" = BooleanSettingGraphQLField(
        "booleanValue"
    )

    @classmethod
    def scope(cls) -> "SettingScopeFields":
        return SettingScopeFields("scope")

    def fields(
        self, *subfields: Union[BooleanSettingGraphQLField, "SettingScopeFields"]
    ) -> "BooleanSettingFields":
        """Subfields should come from the BooleanSettingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BooleanSettingFields":
        self._alias = alias
        return self


class BulkUpsertThreadFieldResultFields(GraphQLField):
    @classmethod
    def thread_field(cls) -> "ThreadFieldFields":
        return ThreadFieldFields("thread_field")

    result: "BulkUpsertThreadFieldResultGraphQLField" = (
        BulkUpsertThreadFieldResultGraphQLField("result")
    )

    def fields(
        self,
        *subfields: Union[BulkUpsertThreadFieldResultGraphQLField, "ThreadFieldFields"]
    ) -> "BulkUpsertThreadFieldResultFields":
        """Subfields should come from the BulkUpsertThreadFieldResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BulkUpsertThreadFieldResultFields":
        self._alias = alias
        return self


class BulkUpsertThreadFieldsOutputFields(GraphQLField):
    @classmethod
    def results(cls) -> "BulkUpsertThreadFieldResultFields":
        return BulkUpsertThreadFieldResultFields("results")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            BulkUpsertThreadFieldsOutputGraphQLField,
            "BulkUpsertThreadFieldResultFields",
            "MutationErrorFields",
        ]
    ) -> "BulkUpsertThreadFieldsOutputFields":
        """Subfields should come from the BulkUpsertThreadFieldsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BulkUpsertThreadFieldsOutputFields":
        self._alias = alias
        return self


class BusinessHoursFields(GraphQLField):
    @classmethod
    def week_days(cls) -> "BusinessHoursWeekDaysFields":
        return BusinessHoursWeekDaysFields("week_days")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            BusinessHoursGraphQLField,
            "BusinessHoursWeekDaysFields",
            "DateTimeFields",
            "InternalActorUnion",
        ]
    ) -> "BusinessHoursFields":
        """Subfields should come from the BusinessHoursFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BusinessHoursFields":
        self._alias = alias
        return self


class BusinessHoursSlotFields(GraphQLField):
    @classmethod
    def timezone(cls) -> "TimezoneFields":
        return TimezoneFields("timezone")

    weekday: "BusinessHoursSlotGraphQLField" = BusinessHoursSlotGraphQLField("weekday")
    opens_at: "BusinessHoursSlotGraphQLField" = BusinessHoursSlotGraphQLField("opensAt")
    closes_at: "BusinessHoursSlotGraphQLField" = BusinessHoursSlotGraphQLField(
        "closesAt"
    )

    def fields(
        self, *subfields: Union[BusinessHoursSlotGraphQLField, "TimezoneFields"]
    ) -> "BusinessHoursSlotFields":
        """Subfields should come from the BusinessHoursSlotFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BusinessHoursSlotFields":
        self._alias = alias
        return self


class BusinessHoursWeekDayFields(GraphQLField):
    @classmethod
    def start_time(cls) -> "TimeFields":
        return TimeFields("start_time")

    @classmethod
    def end_time(cls) -> "TimeFields":
        return TimeFields("end_time")

    def fields(
        self, *subfields: Union[BusinessHoursWeekDayGraphQLField, "TimeFields"]
    ) -> "BusinessHoursWeekDayFields":
        """Subfields should come from the BusinessHoursWeekDayFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BusinessHoursWeekDayFields":
        self._alias = alias
        return self


class BusinessHoursWeekDaysFields(GraphQLField):
    @classmethod
    def monday(cls) -> "BusinessHoursWeekDayFields":
        return BusinessHoursWeekDayFields("monday")

    @classmethod
    def tuesday(cls) -> "BusinessHoursWeekDayFields":
        return BusinessHoursWeekDayFields("tuesday")

    @classmethod
    def wednesday(cls) -> "BusinessHoursWeekDayFields":
        return BusinessHoursWeekDayFields("wednesday")

    @classmethod
    def thursday(cls) -> "BusinessHoursWeekDayFields":
        return BusinessHoursWeekDayFields("thursday")

    @classmethod
    def friday(cls) -> "BusinessHoursWeekDayFields":
        return BusinessHoursWeekDayFields("friday")

    @classmethod
    def saturday(cls) -> "BusinessHoursWeekDayFields":
        return BusinessHoursWeekDayFields("saturday")

    @classmethod
    def sunday(cls) -> "BusinessHoursWeekDayFields":
        return BusinessHoursWeekDayFields("sunday")

    def fields(
        self,
        *subfields: Union[
            BusinessHoursWeekDaysGraphQLField, "BusinessHoursWeekDayFields"
        ]
    ) -> "BusinessHoursWeekDaysFields":
        """Subfields should come from the BusinessHoursWeekDaysFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "BusinessHoursWeekDaysFields":
        self._alias = alias
        return self


class CalculateRoleChangeCostOutputFields(GraphQLField):
    @classmethod
    def role_change_cost(cls) -> "RoleChangeCostFields":
        return RoleChangeCostFields("role_change_cost")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CalculateRoleChangeCostOutputGraphQLField,
            "MutationErrorFields",
            "RoleChangeCostFields",
        ]
    ) -> "CalculateRoleChangeCostOutputFields":
        """Subfields should come from the CalculateRoleChangeCostOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CalculateRoleChangeCostOutputFields":
        self._alias = alias
        return self


class ChangeBillingPlanOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[ChangeBillingPlanOutputGraphQLField, "MutationErrorFields"]
    ) -> "ChangeBillingPlanOutputFields":
        """Subfields should come from the ChangeBillingPlanOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChangeBillingPlanOutputFields":
        self._alias = alias
        return self


class ChangeThreadCustomerOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ChangeThreadCustomerOutputGraphQLField,
            "MutationErrorFields",
            "ThreadFields",
        ]
    ) -> "ChangeThreadCustomerOutputFields":
        """Subfields should come from the ChangeThreadCustomerOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChangeThreadCustomerOutputFields":
        self._alias = alias
        return self


class ChangeThreadPriorityOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ChangeThreadPriorityOutputGraphQLField,
            "MutationErrorFields",
            "ThreadFields",
        ]
    ) -> "ChangeThreadPriorityOutputFields":
        """Subfields should come from the ChangeThreadPriorityOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChangeThreadPriorityOutputFields":
        self._alias = alias
        return self


class ChangeUserStatusOutputFields(GraphQLField):
    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ChangeUserStatusOutputGraphQLField, "MutationErrorFields", "UserFields"
        ]
    ) -> "ChangeUserStatusOutputFields":
        """Subfields should come from the ChangeUserStatusOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChangeUserStatusOutputFields":
        self._alias = alias
        return self


class ChatFields(GraphQLField):
    id: "ChatGraphQLField" = ChatGraphQLField("id")
    text: "ChatGraphQLField" = ChatGraphQLField("text")

    @classmethod
    def customer_read_at(cls) -> "DateTimeFields":
        return DateTimeFields("customer_read_at")

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "ActorUnion" = ActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "ActorUnion" = ActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            ChatGraphQLField, "ActorUnion", "AttachmentFields", "DateTimeFields"
        ]
    ) -> "ChatFields":
        """Subfields should come from the ChatFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChatFields":
        self._alias = alias
        return self


class ChatAppFields(GraphQLField):
    id: "ChatAppGraphQLField" = ChatAppGraphQLField("id")
    name: "ChatAppGraphQLField" = ChatAppGraphQLField("name")

    @classmethod
    def logo(cls) -> "WorkspaceFileFields":
        return WorkspaceFileFields("logo")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            ChatAppGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
            "WorkspaceFileFields",
        ]
    ) -> "ChatAppFields":
        """Subfields should come from the ChatAppFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChatAppFields":
        self._alias = alias
        return self


class ChatAppConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ChatAppEdgeFields":
        return ChatAppEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            ChatAppConnectionGraphQLField, "ChatAppEdgeFields", "PageInfoFields"
        ]
    ) -> "ChatAppConnectionFields":
        """Subfields should come from the ChatAppConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChatAppConnectionFields":
        self._alias = alias
        return self


class ChatAppEdgeFields(GraphQLField):
    cursor: "ChatAppEdgeGraphQLField" = ChatAppEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ChatAppFields":
        return ChatAppFields("node")

    def fields(
        self, *subfields: Union[ChatAppEdgeGraphQLField, "ChatAppFields"]
    ) -> "ChatAppEdgeFields":
        """Subfields should come from the ChatAppEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChatAppEdgeFields":
        self._alias = alias
        return self


class ChatAppHiddenSecretFields(GraphQLField):
    chat_app_id: "ChatAppHiddenSecretGraphQLField" = ChatAppHiddenSecretGraphQLField(
        "chatAppId"
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            ChatAppHiddenSecretGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "ChatAppHiddenSecretFields":
        """Subfields should come from the ChatAppHiddenSecretFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChatAppHiddenSecretFields":
        self._alias = alias
        return self


class ChatAppSecretFields(GraphQLField):
    chat_app_id: "ChatAppSecretGraphQLField" = ChatAppSecretGraphQLField("chatAppId")
    secret: "ChatAppSecretGraphQLField" = ChatAppSecretGraphQLField("secret")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            ChatAppSecretGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "ChatAppSecretFields":
        """Subfields should come from the ChatAppSecretFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChatAppSecretFields":
        self._alias = alias
        return self


class ChatEntryFields(GraphQLField):
    chat_id: "ChatEntryGraphQLField" = ChatEntryGraphQLField("chatId")
    text: "ChatEntryGraphQLField" = ChatEntryGraphQLField("text")

    @classmethod
    def customer_read_at(cls) -> "DateTimeFields":
        return DateTimeFields("customer_read_at")

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    def fields(
        self,
        *subfields: Union[ChatEntryGraphQLField, "AttachmentFields", "DateTimeFields"]
    ) -> "ChatEntryFields":
        """Subfields should come from the ChatEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChatEntryFields":
        self._alias = alias
        return self


class ChatThreadChannelDetailsFields(GraphQLField):
    @classmethod
    def customer_read_at(cls) -> "DateTimeFields":
        return DateTimeFields("customer_read_at")

    def fields(
        self, *subfields: Union[ChatThreadChannelDetailsGraphQLField, "DateTimeFields"]
    ) -> "ChatThreadChannelDetailsFields":
        """Subfields should come from the ChatThreadChannelDetailsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ChatThreadChannelDetailsFields":
        self._alias = alias
        return self


class CompanyFields(GraphQLField):
    id: "CompanyGraphQLField" = CompanyGraphQLField("id")
    name: "CompanyGraphQLField" = CompanyGraphQLField("name")

    @classmethod
    def logo_url(cls, *, size: Optional[int] = None) -> "CompanyGraphQLField":
        arguments: Dict[str, Dict[str, Any]] = {"size": {"type": "Int", "value": size}}
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CompanyGraphQLField("logo_url", arguments=cleared_arguments)

    domain_name: "CompanyGraphQLField" = CompanyGraphQLField("domainName")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    @classmethod
    def tier(cls) -> "TierFields":
        return TierFields("tier")

    @classmethod
    def thread_channel_associations(cls) -> "ThreadChannelAssociationInterface":
        return ThreadChannelAssociationInterface("thread_channel_associations")

    contract_value: "CompanyGraphQLField" = CompanyGraphQLField("contractValue")

    def fields(
        self,
        *subfields: Union[
            CompanyGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
            "ThreadChannelAssociationInterface",
            "TierFields",
        ]
    ) -> "CompanyFields":
        """Subfields should come from the CompanyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CompanyFields":
        self._alias = alias
        return self


class CompanyConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CompanyEdgeFields":
        return CompanyEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            CompanyConnectionGraphQLField, "CompanyEdgeFields", "PageInfoFields"
        ]
    ) -> "CompanyConnectionFields":
        """Subfields should come from the CompanyConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CompanyConnectionFields":
        self._alias = alias
        return self


class CompanyEdgeFields(GraphQLField):
    cursor: "CompanyEdgeGraphQLField" = CompanyEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "CompanyFields":
        return CompanyFields("node")

    def fields(
        self, *subfields: Union[CompanyEdgeGraphQLField, "CompanyFields"]
    ) -> "CompanyEdgeFields":
        """Subfields should come from the CompanyEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CompanyEdgeFields":
        self._alias = alias
        return self


class CompanySearchResultFields(GraphQLField):
    @classmethod
    def company(cls) -> "CompanyFields":
        return CompanyFields("company")

    def fields(
        self, *subfields: Union[CompanySearchResultGraphQLField, "CompanyFields"]
    ) -> "CompanySearchResultFields":
        """Subfields should come from the CompanySearchResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CompanySearchResultFields":
        self._alias = alias
        return self


class CompanySearchResultConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CompanySearchResultEdgeFields":
        return CompanySearchResultEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            CompanySearchResultConnectionGraphQLField,
            "CompanySearchResultEdgeFields",
            "PageInfoFields",
        ]
    ) -> "CompanySearchResultConnectionFields":
        """Subfields should come from the CompanySearchResultConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CompanySearchResultConnectionFields":
        self._alias = alias
        return self


class CompanySearchResultEdgeFields(GraphQLField):
    cursor: "CompanySearchResultEdgeGraphQLField" = CompanySearchResultEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "CompanySearchResultFields":
        return CompanySearchResultFields("node")

    def fields(
        self,
        *subfields: Union[
            CompanySearchResultEdgeGraphQLField, "CompanySearchResultFields"
        ]
    ) -> "CompanySearchResultEdgeFields":
        """Subfields should come from the CompanySearchResultEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CompanySearchResultEdgeFields":
        self._alias = alias
        return self


class CompanyTierMembershipFields(GraphQLField):
    id: "CompanyTierMembershipGraphQLField" = CompanyTierMembershipGraphQLField("id")
    tier_id: "CompanyTierMembershipGraphQLField" = CompanyTierMembershipGraphQLField(
        "tierId"
    )
    company_id: "CompanyTierMembershipGraphQLField" = CompanyTierMembershipGraphQLField(
        "companyId"
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            CompanyTierMembershipGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "CompanyTierMembershipFields":
        """Subfields should come from the CompanyTierMembershipFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CompanyTierMembershipFields":
        self._alias = alias
        return self


class CompleteServiceAuthorizationOutputFields(GraphQLField):
    @classmethod
    def service_authorization(cls) -> "ServiceAuthorizationFields":
        return ServiceAuthorizationFields("service_authorization")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CompleteServiceAuthorizationOutputGraphQLField,
            "MutationErrorFields",
            "ServiceAuthorizationFields",
        ]
    ) -> "CompleteServiceAuthorizationOutputFields":
        """Subfields should come from the CompleteServiceAuthorizationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CompleteServiceAuthorizationOutputFields":
        self._alias = alias
        return self


class ComponentBadgeFields(GraphQLField):
    badge_label: "ComponentBadgeGraphQLField" = ComponentBadgeGraphQLField("badgeLabel")
    badge_color: "ComponentBadgeGraphQLField" = ComponentBadgeGraphQLField("badgeColor")

    def fields(self, *subfields: ComponentBadgeGraphQLField) -> "ComponentBadgeFields":
        """Subfields should come from the ComponentBadgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComponentBadgeFields":
        self._alias = alias
        return self


class ComponentContainerFields(GraphQLField):
    container_content: "ComponentContainerContentUnion" = (
        ComponentContainerContentUnion("containerContent")
    )

    def fields(
        self,
        *subfields: Union[
            ComponentContainerGraphQLField, "ComponentContainerContentUnion"
        ]
    ) -> "ComponentContainerFields":
        """Subfields should come from the ComponentContainerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComponentContainerFields":
        self._alias = alias
        return self


class ComponentCopyButtonFields(GraphQLField):
    copy_button_value: "ComponentCopyButtonGraphQLField" = (
        ComponentCopyButtonGraphQLField("copyButtonValue")
    )
    copy_button_tooltip_label: "ComponentCopyButtonGraphQLField" = (
        ComponentCopyButtonGraphQLField("copyButtonTooltipLabel")
    )

    def fields(
        self, *subfields: ComponentCopyButtonGraphQLField
    ) -> "ComponentCopyButtonFields":
        """Subfields should come from the ComponentCopyButtonFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComponentCopyButtonFields":
        self._alias = alias
        return self


class ComponentDividerFields(GraphQLField):
    divider_spacing_size: "ComponentDividerGraphQLField" = ComponentDividerGraphQLField(
        "dividerSpacingSize"
    )
    spacing_size: "ComponentDividerGraphQLField" = ComponentDividerGraphQLField(
        "spacingSize"
    )

    def fields(
        self, *subfields: ComponentDividerGraphQLField
    ) -> "ComponentDividerFields":
        """Subfields should come from the ComponentDividerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComponentDividerFields":
        self._alias = alias
        return self


class ComponentLinkButtonFields(GraphQLField):
    link_button_url: "ComponentLinkButtonGraphQLField" = (
        ComponentLinkButtonGraphQLField("linkButtonUrl")
    )
    link_button_label: "ComponentLinkButtonGraphQLField" = (
        ComponentLinkButtonGraphQLField("linkButtonLabel")
    )
    url: "ComponentLinkButtonGraphQLField" = ComponentLinkButtonGraphQLField("url")
    label: "ComponentLinkButtonGraphQLField" = ComponentLinkButtonGraphQLField("label")

    def fields(
        self, *subfields: ComponentLinkButtonGraphQLField
    ) -> "ComponentLinkButtonFields":
        """Subfields should come from the ComponentLinkButtonFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComponentLinkButtonFields":
        self._alias = alias
        return self


class ComponentPlainTextFields(GraphQLField):
    plain_text_size: "ComponentPlainTextGraphQLField" = ComponentPlainTextGraphQLField(
        "plainTextSize"
    )
    plain_text_color: "ComponentPlainTextGraphQLField" = ComponentPlainTextGraphQLField(
        "plainTextColor"
    )
    plain_text: "ComponentPlainTextGraphQLField" = ComponentPlainTextGraphQLField(
        "plainText"
    )

    def fields(
        self, *subfields: ComponentPlainTextGraphQLField
    ) -> "ComponentPlainTextFields":
        """Subfields should come from the ComponentPlainTextFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComponentPlainTextFields":
        self._alias = alias
        return self


class ComponentRowFields(GraphQLField):
    row_main_content: "ComponentRowContentUnion" = ComponentRowContentUnion(
        "rowMainContent"
    )
    row_aside_content: "ComponentRowContentUnion" = ComponentRowContentUnion(
        "rowAsideContent"
    )

    def fields(
        self, *subfields: Union[ComponentRowGraphQLField, "ComponentRowContentUnion"]
    ) -> "ComponentRowFields":
        """Subfields should come from the ComponentRowFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComponentRowFields":
        self._alias = alias
        return self


class ComponentSpacerFields(GraphQLField):
    spacer_size: "ComponentSpacerGraphQLField" = ComponentSpacerGraphQLField(
        "spacerSize"
    )
    size: "ComponentSpacerGraphQLField" = ComponentSpacerGraphQLField("size")

    def fields(
        self, *subfields: ComponentSpacerGraphQLField
    ) -> "ComponentSpacerFields":
        """Subfields should come from the ComponentSpacerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComponentSpacerFields":
        self._alias = alias
        return self


class ComponentTextFields(GraphQLField):
    text_size: "ComponentTextGraphQLField" = ComponentTextGraphQLField("textSize")
    text_color: "ComponentTextGraphQLField" = ComponentTextGraphQLField("textColor")
    text: "ComponentTextGraphQLField" = ComponentTextGraphQLField("text")
    color: "ComponentTextGraphQLField" = ComponentTextGraphQLField("color")
    size: "ComponentTextGraphQLField" = ComponentTextGraphQLField("size")

    def fields(self, *subfields: ComponentTextGraphQLField) -> "ComponentTextFields":
        """Subfields should come from the ComponentTextFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ComponentTextFields":
        self._alias = alias
        return self


class ConnectedSlackChannelFields(GraphQLField):
    id: "ConnectedSlackChannelGraphQLField" = ConnectedSlackChannelGraphQLField("id")
    slack_team_id: "ConnectedSlackChannelGraphQLField" = (
        ConnectedSlackChannelGraphQLField("slackTeamId")
    )
    slack_channel_id: "ConnectedSlackChannelGraphQLField" = (
        ConnectedSlackChannelGraphQLField("slackChannelId")
    )
    name: "ConnectedSlackChannelGraphQLField" = ConnectedSlackChannelGraphQLField(
        "name"
    )
    channel_type: "ConnectedSlackChannelGraphQLField" = (
        ConnectedSlackChannelGraphQLField("channelType")
    )
    is_enabled: "ConnectedSlackChannelGraphQLField" = ConnectedSlackChannelGraphQLField(
        "isEnabled"
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    @classmethod
    def thread_channel_associations(cls) -> "SlackThreadChannelAssociationFields":
        return SlackThreadChannelAssociationFields("thread_channel_associations")

    def fields(
        self,
        *subfields: Union[
            ConnectedSlackChannelGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
            "SlackThreadChannelAssociationFields",
        ]
    ) -> "ConnectedSlackChannelFields":
        """Subfields should come from the ConnectedSlackChannelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConnectedSlackChannelFields":
        self._alias = alias
        return self


class ConnectedSlackChannelConnectionFields(GraphQLField):
    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    @classmethod
    def edges(cls) -> "ConnectedSlackChannelEdgeFields":
        return ConnectedSlackChannelEdgeFields("edges")

    total_count: "ConnectedSlackChannelConnectionGraphQLField" = (
        ConnectedSlackChannelConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            ConnectedSlackChannelConnectionGraphQLField,
            "ConnectedSlackChannelEdgeFields",
            "PageInfoFields",
        ]
    ) -> "ConnectedSlackChannelConnectionFields":
        """Subfields should come from the ConnectedSlackChannelConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConnectedSlackChannelConnectionFields":
        self._alias = alias
        return self


class ConnectedSlackChannelEdgeFields(GraphQLField):
    cursor: "ConnectedSlackChannelEdgeGraphQLField" = (
        ConnectedSlackChannelEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "ConnectedSlackChannelFields":
        return ConnectedSlackChannelFields("node")

    def fields(
        self,
        *subfields: Union[
            ConnectedSlackChannelEdgeGraphQLField, "ConnectedSlackChannelFields"
        ]
    ) -> "ConnectedSlackChannelEdgeFields":
        """Subfields should come from the ConnectedSlackChannelEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ConnectedSlackChannelEdgeFields":
        self._alias = alias
        return self


class CreateApiKeyOutputFields(GraphQLField):
    @classmethod
    def api_key(cls) -> "ApiKeyFields":
        return ApiKeyFields("api_key")

    api_key_secret: "CreateApiKeyOutputGraphQLField" = CreateApiKeyOutputGraphQLField(
        "apiKeySecret"
    )

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateApiKeyOutputGraphQLField, "ApiKeyFields", "MutationErrorFields"
        ]
    ) -> "CreateApiKeyOutputFields":
        """Subfields should come from the CreateApiKeyOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateApiKeyOutputFields":
        self._alias = alias
        return self


class CreateAttachmentDownloadUrlOutputFields(GraphQLField):
    @classmethod
    def attachment_download_url(cls) -> "AttachmentDownloadUrlFields":
        return AttachmentDownloadUrlFields("attachment_download_url")

    attachment_virus_scan_result: "CreateAttachmentDownloadUrlOutputGraphQLField" = (
        CreateAttachmentDownloadUrlOutputGraphQLField("attachmentVirusScanResult")
    )

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateAttachmentDownloadUrlOutputGraphQLField,
            "AttachmentDownloadUrlFields",
            "MutationErrorFields",
        ]
    ) -> "CreateAttachmentDownloadUrlOutputFields":
        """Subfields should come from the CreateAttachmentDownloadUrlOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateAttachmentDownloadUrlOutputFields":
        self._alias = alias
        return self


class CreateAttachmentUploadUrlOutputFields(GraphQLField):
    @classmethod
    def attachment_upload_url(cls) -> "AttachmentUploadUrlFields":
        return AttachmentUploadUrlFields("attachment_upload_url")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateAttachmentUploadUrlOutputGraphQLField,
            "AttachmentUploadUrlFields",
            "MutationErrorFields",
        ]
    ) -> "CreateAttachmentUploadUrlOutputFields":
        """Subfields should come from the CreateAttachmentUploadUrlOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateAttachmentUploadUrlOutputFields":
        self._alias = alias
        return self


class CreateAutoresponderOutputFields(GraphQLField):
    @classmethod
    def autoresponder(cls) -> "AutoresponderFields":
        return AutoresponderFields("autoresponder")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateAutoresponderOutputGraphQLField,
            "AutoresponderFields",
            "MutationErrorFields",
        ]
    ) -> "CreateAutoresponderOutputFields":
        """Subfields should come from the CreateAutoresponderOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateAutoresponderOutputFields":
        self._alias = alias
        return self


class CreateBillingPortalSessionOutputFields(GraphQLField):
    billing_portal_session_url: "CreateBillingPortalSessionOutputGraphQLField" = (
        CreateBillingPortalSessionOutputGraphQLField("billingPortalSessionUrl")
    )

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateBillingPortalSessionOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "CreateBillingPortalSessionOutputFields":
        """Subfields should come from the CreateBillingPortalSessionOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateBillingPortalSessionOutputFields":
        self._alias = alias
        return self


class CreateChatAppOutputFields(GraphQLField):
    @classmethod
    def chat_app(cls) -> "ChatAppFields":
        return ChatAppFields("chat_app")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateChatAppOutputGraphQLField, "ChatAppFields", "MutationErrorFields"
        ]
    ) -> "CreateChatAppOutputFields":
        """Subfields should come from the CreateChatAppOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateChatAppOutputFields":
        self._alias = alias
        return self


class CreateChatAppSecretOutputFields(GraphQLField):
    @classmethod
    def chat_app_secret(cls) -> "ChatAppSecretFields":
        return ChatAppSecretFields("chat_app_secret")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateChatAppSecretOutputGraphQLField,
            "ChatAppSecretFields",
            "MutationErrorFields",
        ]
    ) -> "CreateChatAppSecretOutputFields":
        """Subfields should come from the CreateChatAppSecretOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateChatAppSecretOutputFields":
        self._alias = alias
        return self


class CreateCheckoutSessionOutputFields(GraphQLField):
    session_client_secret: "CreateCheckoutSessionOutputGraphQLField" = (
        CreateCheckoutSessionOutputGraphQLField("sessionClientSecret")
    )

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateCheckoutSessionOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "CreateCheckoutSessionOutputFields":
        """Subfields should come from the CreateCheckoutSessionOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateCheckoutSessionOutputFields":
        self._alias = alias
        return self


class CreateCustomerCardConfigOutputFields(GraphQLField):
    @classmethod
    def customer_card_config(cls) -> "CustomerCardConfigFields":
        return CustomerCardConfigFields("customer_card_config")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateCustomerCardConfigOutputGraphQLField,
            "CustomerCardConfigFields",
            "MutationErrorFields",
        ]
    ) -> "CreateCustomerCardConfigOutputFields":
        """Subfields should come from the CreateCustomerCardConfigOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateCustomerCardConfigOutputFields":
        self._alias = alias
        return self


class CreateCustomerEventOutputFields(GraphQLField):
    @classmethod
    def customer_event(cls) -> "CustomerEventFields":
        return CustomerEventFields("customer_event")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateCustomerEventOutputGraphQLField,
            "CustomerEventFields",
            "MutationErrorFields",
        ]
    ) -> "CreateCustomerEventOutputFields":
        """Subfields should come from the CreateCustomerEventOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateCustomerEventOutputFields":
        self._alias = alias
        return self


class CreateCustomerGroupOutputFields(GraphQLField):
    @classmethod
    def customer_group(cls) -> "CustomerGroupFields":
        return CustomerGroupFields("customer_group")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateCustomerGroupOutputGraphQLField,
            "CustomerGroupFields",
            "MutationErrorFields",
        ]
    ) -> "CreateCustomerGroupOutputFields":
        """Subfields should come from the CreateCustomerGroupOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateCustomerGroupOutputFields":
        self._alias = alias
        return self


class CreateEmailPreviewUrlOutputFields(GraphQLField):
    @classmethod
    def email_preview_url(cls) -> "EmailPreviewUrlFields":
        return EmailPreviewUrlFields("email_preview_url")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateEmailPreviewUrlOutputGraphQLField,
            "EmailPreviewUrlFields",
            "MutationErrorFields",
        ]
    ) -> "CreateEmailPreviewUrlOutputFields":
        """Subfields should come from the CreateEmailPreviewUrlOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateEmailPreviewUrlOutputFields":
        self._alias = alias
        return self


class CreateIndexedDocumentOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    @classmethod
    def indexed_document(cls) -> "IndexedDocumentFields":
        return IndexedDocumentFields("indexed_document")

    def fields(
        self,
        *subfields: Union[
            CreateIndexedDocumentOutputGraphQLField,
            "IndexedDocumentFields",
            "MutationErrorFields",
        ]
    ) -> "CreateIndexedDocumentOutputFields":
        """Subfields should come from the CreateIndexedDocumentOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateIndexedDocumentOutputFields":
        self._alias = alias
        return self


class CreateLabelTypeOutputFields(GraphQLField):
    @classmethod
    def label_type(cls) -> "LabelTypeFields":
        return LabelTypeFields("label_type")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateLabelTypeOutputGraphQLField, "LabelTypeFields", "MutationErrorFields"
        ]
    ) -> "CreateLabelTypeOutputFields":
        """Subfields should come from the CreateLabelTypeOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateLabelTypeOutputFields":
        self._alias = alias
        return self


class CreateMachineUserOutputFields(GraphQLField):
    @classmethod
    def machine_user(cls) -> "MachineUserFields":
        return MachineUserFields("machine_user")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateMachineUserOutputGraphQLField,
            "MachineUserFields",
            "MutationErrorFields",
        ]
    ) -> "CreateMachineUserOutputFields":
        """Subfields should come from the CreateMachineUserOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateMachineUserOutputFields":
        self._alias = alias
        return self


class CreateMyFavoritePageOutputFields(GraphQLField):
    @classmethod
    def favorite_page(cls) -> "FavoritePageFields":
        return FavoritePageFields("favorite_page")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateMyFavoritePageOutputGraphQLField,
            "FavoritePageFields",
            "MutationErrorFields",
        ]
    ) -> "CreateMyFavoritePageOutputFields":
        """Subfields should come from the CreateMyFavoritePageOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateMyFavoritePageOutputFields":
        self._alias = alias
        return self


class CreateMyLinearIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "UserLinearIntegrationFields":
        return UserLinearIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateMyLinearIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "UserLinearIntegrationFields",
        ]
    ) -> "CreateMyLinearIntegrationOutputFields":
        """Subfields should come from the CreateMyLinearIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateMyLinearIntegrationOutputFields":
        self._alias = alias
        return self


class CreateMyMSTeamsIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "UserMSTeamsIntegrationFields":
        return UserMSTeamsIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateMyMSTeamsIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "UserMSTeamsIntegrationFields",
        ]
    ) -> "CreateMyMSTeamsIntegrationOutputFields":
        """Subfields should come from the CreateMyMSTeamsIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateMyMSTeamsIntegrationOutputFields":
        self._alias = alias
        return self


class CreateMySlackIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "UserSlackIntegrationFields":
        return UserSlackIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateMySlackIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "UserSlackIntegrationFields",
        ]
    ) -> "CreateMySlackIntegrationOutputFields":
        """Subfields should come from the CreateMySlackIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateMySlackIntegrationOutputFields":
        self._alias = alias
        return self


class CreateNoteOutputFields(GraphQLField):
    @classmethod
    def note(cls) -> "NoteFields":
        return NoteFields("note")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateNoteOutputGraphQLField, "MutationErrorFields", "NoteFields"
        ]
    ) -> "CreateNoteOutputFields":
        """Subfields should come from the CreateNoteOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateNoteOutputFields":
        self._alias = alias
        return self


class CreateSavedThreadsViewOutputFields(GraphQLField):
    @classmethod
    def saved_threads_view(cls) -> "SavedThreadsViewFields":
        return SavedThreadsViewFields("saved_threads_view")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateSavedThreadsViewOutputGraphQLField,
            "MutationErrorFields",
            "SavedThreadsViewFields",
        ]
    ) -> "CreateSavedThreadsViewOutputFields":
        """Subfields should come from the CreateSavedThreadsViewOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateSavedThreadsViewOutputFields":
        self._alias = alias
        return self


class CreateServiceLevelAgreementOutputFields(GraphQLField):
    @classmethod
    def service_level_agreement(cls) -> "ServiceLevelAgreementInterface":
        return ServiceLevelAgreementInterface("service_level_agreement")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateServiceLevelAgreementOutputGraphQLField,
            "MutationErrorFields",
            "ServiceLevelAgreementInterface",
        ]
    ) -> "CreateServiceLevelAgreementOutputFields":
        """Subfields should come from the CreateServiceLevelAgreementOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateServiceLevelAgreementOutputFields":
        self._alias = alias
        return self


class CreateSnippetOutputFields(GraphQLField):
    @classmethod
    def snippet(cls) -> "SnippetFields":
        return SnippetFields("snippet")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateSnippetOutputGraphQLField, "MutationErrorFields", "SnippetFields"
        ]
    ) -> "CreateSnippetOutputFields":
        """Subfields should come from the CreateSnippetOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateSnippetOutputFields":
        self._alias = alias
        return self


class CreateThreadChannelAssociationOutputFields(GraphQLField):
    @classmethod
    def thread_channel_association(cls) -> "ThreadChannelAssociationInterface":
        return ThreadChannelAssociationInterface("thread_channel_association")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateThreadChannelAssociationOutputGraphQLField,
            "MutationErrorFields",
            "ThreadChannelAssociationInterface",
        ]
    ) -> "CreateThreadChannelAssociationOutputFields":
        """Subfields should come from the CreateThreadChannelAssociationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateThreadChannelAssociationOutputFields":
        self._alias = alias
        return self


class CreateThreadDiscussionOutputFields(GraphQLField):
    @classmethod
    def thread_discussion(cls) -> "ThreadDiscussionFields":
        return ThreadDiscussionFields("thread_discussion")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateThreadDiscussionOutputGraphQLField,
            "MutationErrorFields",
            "ThreadDiscussionFields",
        ]
    ) -> "CreateThreadDiscussionOutputFields":
        """Subfields should come from the CreateThreadDiscussionOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateThreadDiscussionOutputFields":
        self._alias = alias
        return self


class CreateThreadEventOutputFields(GraphQLField):
    @classmethod
    def thread_event(cls) -> "ThreadEventFields":
        return ThreadEventFields("thread_event")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateThreadEventOutputGraphQLField,
            "MutationErrorFields",
            "ThreadEventFields",
        ]
    ) -> "CreateThreadEventOutputFields":
        """Subfields should come from the CreateThreadEventOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateThreadEventOutputFields":
        self._alias = alias
        return self


class CreateThreadFieldSchemaOutputFields(GraphQLField):
    @classmethod
    def thread_field_schema(cls) -> "ThreadFieldSchemaFields":
        return ThreadFieldSchemaFields("thread_field_schema")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateThreadFieldSchemaOutputGraphQLField,
            "MutationErrorFields",
            "ThreadFieldSchemaFields",
        ]
    ) -> "CreateThreadFieldSchemaOutputFields":
        """Subfields should come from the CreateThreadFieldSchemaOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateThreadFieldSchemaOutputFields":
        self._alias = alias
        return self


class CreateThreadLinkOutputFields(GraphQLField):
    @classmethod
    def thread_link(cls) -> "ThreadLinkInterface":
        return ThreadLinkInterface("thread_link")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateThreadLinkOutputGraphQLField,
            "MutationErrorFields",
            "ThreadLinkInterface",
        ]
    ) -> "CreateThreadLinkOutputFields":
        """Subfields should come from the CreateThreadLinkOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateThreadLinkOutputFields":
        self._alias = alias
        return self


class CreateThreadOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateThreadOutputGraphQLField, "MutationErrorFields", "ThreadFields"
        ]
    ) -> "CreateThreadOutputFields":
        """Subfields should come from the CreateThreadOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateThreadOutputFields":
        self._alias = alias
        return self


class CreateTierOutputFields(GraphQLField):
    @classmethod
    def tier(cls) -> "TierFields":
        return TierFields("tier")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateTierOutputGraphQLField, "MutationErrorFields", "TierFields"
        ]
    ) -> "CreateTierOutputFields":
        """Subfields should come from the CreateTierOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateTierOutputFields":
        self._alias = alias
        return self


class CreateUserAccountOutputFields(GraphQLField):
    @classmethod
    def user_account(cls) -> "UserAccountFields":
        return UserAccountFields("user_account")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateUserAccountOutputGraphQLField,
            "MutationErrorFields",
            "UserAccountFields",
        ]
    ) -> "CreateUserAccountOutputFields":
        """Subfields should come from the CreateUserAccountOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateUserAccountOutputFields":
        self._alias = alias
        return self


class CreateUserAuthSlackIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "UserAuthSlackIntegrationFields":
        return UserAuthSlackIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateUserAuthSlackIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "UserAuthSlackIntegrationFields",
        ]
    ) -> "CreateUserAuthSlackIntegrationOutputFields":
        """Subfields should come from the CreateUserAuthSlackIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateUserAuthSlackIntegrationOutputFields":
        self._alias = alias
        return self


class CreateWebhookTargetOutputFields(GraphQLField):
    @classmethod
    def webhook_target(cls) -> "WebhookTargetFields":
        return WebhookTargetFields("webhook_target")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateWebhookTargetOutputGraphQLField,
            "MutationErrorFields",
            "WebhookTargetFields",
        ]
    ) -> "CreateWebhookTargetOutputFields":
        """Subfields should come from the CreateWebhookTargetOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateWebhookTargetOutputFields":
        self._alias = alias
        return self


class CreateWorkflowRuleOutputFields(GraphQLField):
    @classmethod
    def workflow_rule(cls) -> "WorkflowRuleFields":
        return WorkflowRuleFields("workflow_rule")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateWorkflowRuleOutputGraphQLField,
            "MutationErrorFields",
            "WorkflowRuleFields",
        ]
    ) -> "CreateWorkflowRuleOutputFields":
        """Subfields should come from the CreateWorkflowRuleOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateWorkflowRuleOutputFields":
        self._alias = alias
        return self


class CreateWorkspaceDiscordChannelIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "WorkspaceDiscordChannelIntegrationFields":
        return WorkspaceDiscordChannelIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateWorkspaceDiscordChannelIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceDiscordChannelIntegrationFields",
        ]
    ) -> "CreateWorkspaceDiscordChannelIntegrationOutputFields":
        """Subfields should come from the CreateWorkspaceDiscordChannelIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "CreateWorkspaceDiscordChannelIntegrationOutputFields":
        self._alias = alias
        return self


class CreateWorkspaceDiscordIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "WorkspaceDiscordIntegrationFields":
        return WorkspaceDiscordIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateWorkspaceDiscordIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceDiscordIntegrationFields",
        ]
    ) -> "CreateWorkspaceDiscordIntegrationOutputFields":
        """Subfields should come from the CreateWorkspaceDiscordIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateWorkspaceDiscordIntegrationOutputFields":
        self._alias = alias
        return self


class CreateWorkspaceEmailDomainSettingsOutputFields(GraphQLField):
    @classmethod
    def workspace_email_domain_settings(cls) -> "WorkspaceEmailDomainSettingsFields":
        return WorkspaceEmailDomainSettingsFields("workspace_email_domain_settings")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateWorkspaceEmailDomainSettingsOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceEmailDomainSettingsFields",
        ]
    ) -> "CreateWorkspaceEmailDomainSettingsOutputFields":
        """Subfields should come from the CreateWorkspaceEmailDomainSettingsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateWorkspaceEmailDomainSettingsOutputFields":
        self._alias = alias
        return self


class CreateWorkspaceFileUploadUrlOutputFields(GraphQLField):
    @classmethod
    def workspace_file_upload_url(cls) -> "WorkspaceFileUploadUrlFields":
        return WorkspaceFileUploadUrlFields("workspace_file_upload_url")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateWorkspaceFileUploadUrlOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceFileUploadUrlFields",
        ]
    ) -> "CreateWorkspaceFileUploadUrlOutputFields":
        """Subfields should come from the CreateWorkspaceFileUploadUrlOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateWorkspaceFileUploadUrlOutputFields":
        self._alias = alias
        return self


class CreateWorkspaceMSTeamsIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "WorkspaceMSTeamsIntegrationFields":
        return WorkspaceMSTeamsIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateWorkspaceMSTeamsIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceMSTeamsIntegrationFields",
        ]
    ) -> "CreateWorkspaceMSTeamsIntegrationOutputFields":
        """Subfields should come from the CreateWorkspaceMSTeamsIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateWorkspaceMSTeamsIntegrationOutputFields":
        self._alias = alias
        return self


class CreateWorkspaceOutputFields(GraphQLField):
    @classmethod
    def workspace(cls) -> "WorkspaceFields":
        return WorkspaceFields("workspace")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateWorkspaceOutputGraphQLField, "MutationErrorFields", "WorkspaceFields"
        ]
    ) -> "CreateWorkspaceOutputFields":
        """Subfields should come from the CreateWorkspaceOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateWorkspaceOutputFields":
        self._alias = alias
        return self


class CreateWorkspaceSlackChannelIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "WorkspaceSlackChannelIntegrationFields":
        return WorkspaceSlackChannelIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateWorkspaceSlackChannelIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceSlackChannelIntegrationFields",
        ]
    ) -> "CreateWorkspaceSlackChannelIntegrationOutputFields":
        """Subfields should come from the CreateWorkspaceSlackChannelIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateWorkspaceSlackChannelIntegrationOutputFields":
        self._alias = alias
        return self


class CreateWorkspaceSlackIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "WorkspaceSlackIntegrationFields":
        return WorkspaceSlackIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            CreateWorkspaceSlackIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceSlackIntegrationFields",
        ]
    ) -> "CreateWorkspaceSlackIntegrationOutputFields":
        """Subfields should come from the CreateWorkspaceSlackIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CreateWorkspaceSlackIntegrationOutputFields":
        self._alias = alias
        return self


class CustomEntryFields(GraphQLField):
    external_id: "CustomEntryGraphQLField" = CustomEntryGraphQLField("externalId")
    title: "CustomEntryGraphQLField" = CustomEntryGraphQLField("title")
    type: "CustomEntryGraphQLField" = CustomEntryGraphQLField("type")
    components: "CustomTimelineEntryComponentUnion" = CustomTimelineEntryComponentUnion(
        "components"
    )

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    def fields(
        self,
        *subfields: Union[
            CustomEntryGraphQLField,
            "AttachmentFields",
            "CustomTimelineEntryComponentUnion",
        ]
    ) -> "CustomEntryFields":
        """Subfields should come from the CustomEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomEntryFields":
        self._alias = alias
        return self


class CustomerFields(GraphQLField):
    id: "CustomerGraphQLField" = CustomerGraphQLField("id")
    external_id: "CustomerGraphQLField" = CustomerGraphQLField("externalId")
    full_name: "CustomerGraphQLField" = CustomerGraphQLField("fullName")
    short_name: "CustomerGraphQLField" = CustomerGraphQLField("shortName")

    @classmethod
    def email(cls) -> "EmailAddressFields":
        return EmailAddressFields("email")

    avatar_url: "CustomerGraphQLField" = CustomerGraphQLField("avatarUrl")

    @classmethod
    def assigned_to_user(cls) -> "UserActorFields":
        return UserActorFields("assigned_to_user")

    @classmethod
    def assigned_at(cls) -> "DateTimeFields":
        return DateTimeFields("assigned_at")

    @classmethod
    def customer_group_memberships(
        cls,
        *,
        filters: Optional[CustomerGroupMembershipsFilter] = None,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> "CustomerGroupMembershipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filters": {"type": "CustomerGroupMembershipsFilter", "value": filters},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomerGroupMembershipConnectionFields(
            "customer_group_memberships", arguments=cleared_arguments
        )

    @classmethod
    def tenant_memberships(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> "CustomerTenantMembershipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return CustomerTenantMembershipConnectionFields(
            "tenant_memberships", arguments=cleared_arguments
        )

    @classmethod
    def company(cls) -> "CompanyFields":
        return CompanyFields("company")

    is_anonymous: "CustomerGraphQLField" = CustomerGraphQLField("isAnonymous")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "ActorUnion" = ActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "ActorUnion" = ActorUnion("updatedBy")

    @classmethod
    def marked_as_spam_at(cls) -> "DateTimeFields":
        return DateTimeFields("marked_as_spam_at")

    marked_as_spam_by: "InternalActorUnion" = InternalActorUnion("markedAsSpamBy")
    status: "CustomerGraphQLField" = CustomerGraphQLField("status")

    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    @classmethod
    def last_idle_at(cls) -> "DateTimeFields":
        return DateTimeFields("last_idle_at")

    def fields(
        self,
        *subfields: Union[
            CustomerGraphQLField,
            "ActorUnion",
            "CompanyFields",
            "CustomerGroupMembershipConnectionFields",
            "CustomerTenantMembershipConnectionFields",
            "DateTimeFields",
            "EmailAddressFields",
            "InternalActorUnion",
            "UserActorFields",
        ]
    ) -> "CustomerFields":
        """Subfields should come from the CustomerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerFields":
        self._alias = alias
        return self


class CustomerActorFields(GraphQLField):
    customer_id: "CustomerActorGraphQLField" = CustomerActorGraphQLField("customerId")

    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    def fields(
        self, *subfields: Union[CustomerActorGraphQLField, "CustomerFields"]
    ) -> "CustomerActorFields":
        """Subfields should come from the CustomerActorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerActorFields":
        self._alias = alias
        return self


class CustomerCardConfigFields(GraphQLField):
    id: "CustomerCardConfigGraphQLField" = CustomerCardConfigGraphQLField("id")
    order: "CustomerCardConfigGraphQLField" = CustomerCardConfigGraphQLField("order")
    title: "CustomerCardConfigGraphQLField" = CustomerCardConfigGraphQLField("title")
    key: "CustomerCardConfigGraphQLField" = CustomerCardConfigGraphQLField("key")
    default_time_to_live_seconds: "CustomerCardConfigGraphQLField" = (
        CustomerCardConfigGraphQLField("defaultTimeToLiveSeconds")
    )
    api_url: "CustomerCardConfigGraphQLField" = CustomerCardConfigGraphQLField("apiUrl")

    @classmethod
    def api_headers(cls) -> "CustomerCardConfigApiHeaderFields":
        return CustomerCardConfigApiHeaderFields("api_headers")

    is_enabled: "CustomerCardConfigGraphQLField" = CustomerCardConfigGraphQLField(
        "isEnabled"
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            CustomerCardConfigGraphQLField,
            "CustomerCardConfigApiHeaderFields",
            "DateTimeFields",
            "InternalActorUnion",
        ]
    ) -> "CustomerCardConfigFields":
        """Subfields should come from the CustomerCardConfigFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerCardConfigFields":
        self._alias = alias
        return self


class CustomerCardConfigApiHeaderFields(GraphQLField):
    name: "CustomerCardConfigApiHeaderGraphQLField" = (
        CustomerCardConfigApiHeaderGraphQLField("name")
    )
    value: "CustomerCardConfigApiHeaderGraphQLField" = (
        CustomerCardConfigApiHeaderGraphQLField("value")
    )

    def fields(
        self, *subfields: CustomerCardConfigApiHeaderGraphQLField
    ) -> "CustomerCardConfigApiHeaderFields":
        """Subfields should come from the CustomerCardConfigApiHeaderFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerCardConfigApiHeaderFields":
        self._alias = alias
        return self


class CustomerCardInstanceInterface(GraphQLField):
    id: "CustomerCardInstanceGraphQLField" = CustomerCardInstanceGraphQLField("id")
    customer_id: "CustomerCardInstanceGraphQLField" = CustomerCardInstanceGraphQLField(
        "customerId"
    )
    thread_id: "CustomerCardInstanceGraphQLField" = CustomerCardInstanceGraphQLField(
        "threadId"
    )

    @classmethod
    def customer_card_config(cls) -> "CustomerCardConfigFields":
        return CustomerCardConfigFields("customer_card_config")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "ActorUnion" = ActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "ActorUnion" = ActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            CustomerCardInstanceGraphQLField,
            "ActorUnion",
            "CustomerCardConfigFields",
            "DateTimeFields",
        ]
    ) -> "CustomerCardInstanceInterface":
        """Subfields should come from the CustomerCardInstanceInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerCardInstanceInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "CustomerCardInstanceInterface":
        self._inline_fragments[type_name] = subfields
        return self


class CustomerConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CustomerEdgeFields":
        return CustomerEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "CustomerConnectionGraphQLField" = CustomerConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            CustomerConnectionGraphQLField, "CustomerEdgeFields", "PageInfoFields"
        ]
    ) -> "CustomerConnectionFields":
        """Subfields should come from the CustomerConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerConnectionFields":
        self._alias = alias
        return self


class CustomerEdgeFields(GraphQLField):
    cursor: "CustomerEdgeGraphQLField" = CustomerEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "CustomerFields":
        return CustomerFields("node")

    def fields(
        self, *subfields: Union[CustomerEdgeGraphQLField, "CustomerFields"]
    ) -> "CustomerEdgeFields":
        """Subfields should come from the CustomerEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerEdgeFields":
        self._alias = alias
        return self


class CustomerEmailActorFields(GraphQLField):
    customer_id: "CustomerEmailActorGraphQLField" = CustomerEmailActorGraphQLField(
        "customerId"
    )

    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    def fields(
        self, *subfields: Union[CustomerEmailActorGraphQLField, "CustomerFields"]
    ) -> "CustomerEmailActorFields":
        """Subfields should come from the CustomerEmailActorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerEmailActorFields":
        self._alias = alias
        return self


class CustomerEventFields(GraphQLField):
    id: "CustomerEventGraphQLField" = CustomerEventGraphQLField("id")
    customer_id: "CustomerEventGraphQLField" = CustomerEventGraphQLField("customerId")
    title: "CustomerEventGraphQLField" = CustomerEventGraphQLField("title")
    components: "EventComponentUnion" = EventComponentUnion("components")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "ActorUnion" = ActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "ActorUnion" = ActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            CustomerEventGraphQLField,
            "ActorUnion",
            "DateTimeFields",
            "EventComponentUnion",
        ]
    ) -> "CustomerEventFields":
        """Subfields should come from the CustomerEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerEventFields":
        self._alias = alias
        return self


class CustomerEventEntryFields(GraphQLField):
    timeline_event_id: "CustomerEventEntryGraphQLField" = (
        CustomerEventEntryGraphQLField("timelineEventId")
    )
    title: "CustomerEventEntryGraphQLField" = CustomerEventEntryGraphQLField("title")
    components: "EventComponentUnion" = EventComponentUnion("components")
    customer_id: "CustomerEventEntryGraphQLField" = CustomerEventEntryGraphQLField(
        "customerId"
    )
    external_id: "CustomerEventEntryGraphQLField" = CustomerEventEntryGraphQLField(
        "externalId"
    )

    def fields(
        self, *subfields: Union[CustomerEventEntryGraphQLField, "EventComponentUnion"]
    ) -> "CustomerEventEntryFields":
        """Subfields should come from the CustomerEventEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerEventEntryFields":
        self._alias = alias
        return self


class CustomerGroupFields(GraphQLField):
    id: "CustomerGroupGraphQLField" = CustomerGroupGraphQLField("id")
    name: "CustomerGroupGraphQLField" = CustomerGroupGraphQLField("name")
    key: "CustomerGroupGraphQLField" = CustomerGroupGraphQLField("key")
    color: "CustomerGroupGraphQLField" = CustomerGroupGraphQLField("color")
    external_id: "CustomerGroupGraphQLField" = CustomerGroupGraphQLField("externalId")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            CustomerGroupGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "CustomerGroupFields":
        """Subfields should come from the CustomerGroupFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerGroupFields":
        self._alias = alias
        return self


class CustomerGroupConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CustomerGroupEdgeFields":
        return CustomerGroupEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            CustomerGroupConnectionGraphQLField,
            "CustomerGroupEdgeFields",
            "PageInfoFields",
        ]
    ) -> "CustomerGroupConnectionFields":
        """Subfields should come from the CustomerGroupConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerGroupConnectionFields":
        self._alias = alias
        return self


class CustomerGroupEdgeFields(GraphQLField):
    cursor: "CustomerGroupEdgeGraphQLField" = CustomerGroupEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "CustomerGroupFields":
        return CustomerGroupFields("node")

    def fields(
        self, *subfields: Union[CustomerGroupEdgeGraphQLField, "CustomerGroupFields"]
    ) -> "CustomerGroupEdgeFields":
        """Subfields should come from the CustomerGroupEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerGroupEdgeFields":
        self._alias = alias
        return self


class CustomerGroupMembershipFields(GraphQLField):
    customer_id: "CustomerGroupMembershipGraphQLField" = (
        CustomerGroupMembershipGraphQLField("customerId")
    )

    @classmethod
    def customer_group(cls) -> "CustomerGroupFields":
        return CustomerGroupFields("customer_group")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            CustomerGroupMembershipGraphQLField,
            "CustomerGroupFields",
            "DateTimeFields",
            "InternalActorUnion",
        ]
    ) -> "CustomerGroupMembershipFields":
        """Subfields should come from the CustomerGroupMembershipFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerGroupMembershipFields":
        self._alias = alias
        return self


class CustomerGroupMembershipConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CustomerGroupMembershipEdgeFields":
        return CustomerGroupMembershipEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            CustomerGroupMembershipConnectionGraphQLField,
            "CustomerGroupMembershipEdgeFields",
            "PageInfoFields",
        ]
    ) -> "CustomerGroupMembershipConnectionFields":
        """Subfields should come from the CustomerGroupMembershipConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerGroupMembershipConnectionFields":
        self._alias = alias
        return self


class CustomerGroupMembershipEdgeFields(GraphQLField):
    cursor: "CustomerGroupMembershipEdgeGraphQLField" = (
        CustomerGroupMembershipEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "CustomerGroupMembershipFields":
        return CustomerGroupMembershipFields("node")

    def fields(
        self,
        *subfields: Union[
            CustomerGroupMembershipEdgeGraphQLField, "CustomerGroupMembershipFields"
        ]
    ) -> "CustomerGroupMembershipEdgeFields":
        """Subfields should come from the CustomerGroupMembershipEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerGroupMembershipEdgeFields":
        self._alias = alias
        return self


class CustomerSearchConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CustomerSearchEdgeFields":
        return CustomerSearchEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            CustomerSearchConnectionGraphQLField,
            "CustomerSearchEdgeFields",
            "PageInfoFields",
        ]
    ) -> "CustomerSearchConnectionFields":
        """Subfields should come from the CustomerSearchConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerSearchConnectionFields":
        self._alias = alias
        return self


class CustomerSearchEdgeFields(GraphQLField):
    cursor: "CustomerSearchEdgeGraphQLField" = CustomerSearchEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "CustomerFields":
        return CustomerFields("node")

    def fields(
        self, *subfields: Union[CustomerSearchEdgeGraphQLField, "CustomerFields"]
    ) -> "CustomerSearchEdgeFields":
        """Subfields should come from the CustomerSearchEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerSearchEdgeFields":
        self._alias = alias
        return self


class CustomerTenantMembershipFields(GraphQLField):
    @classmethod
    def tenant(cls) -> "TenantFields":
        return TenantFields("tenant")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            CustomerTenantMembershipGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
            "TenantFields",
        ]
    ) -> "CustomerTenantMembershipFields":
        """Subfields should come from the CustomerTenantMembershipFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerTenantMembershipFields":
        self._alias = alias
        return self


class CustomerTenantMembershipConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "CustomerTenantMembershipEdgeFields":
        return CustomerTenantMembershipEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            CustomerTenantMembershipConnectionGraphQLField,
            "CustomerTenantMembershipEdgeFields",
            "PageInfoFields",
        ]
    ) -> "CustomerTenantMembershipConnectionFields":
        """Subfields should come from the CustomerTenantMembershipConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerTenantMembershipConnectionFields":
        self._alias = alias
        return self


class CustomerTenantMembershipEdgeFields(GraphQLField):
    cursor: "CustomerTenantMembershipEdgeGraphQLField" = (
        CustomerTenantMembershipEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "CustomerTenantMembershipFields":
        return CustomerTenantMembershipFields("node")

    def fields(
        self,
        *subfields: Union[
            CustomerTenantMembershipEdgeGraphQLField, "CustomerTenantMembershipFields"
        ]
    ) -> "CustomerTenantMembershipEdgeFields":
        """Subfields should come from the CustomerTenantMembershipEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "CustomerTenantMembershipEdgeFields":
        self._alias = alias
        return self


class DateTimeFields(GraphQLField):
    unix_timestamp: "DateTimeGraphQLField" = DateTimeGraphQLField("unixTimestamp")
    iso_8601: "DateTimeGraphQLField" = DateTimeGraphQLField("iso8601")

    def fields(self, *subfields: DateTimeGraphQLField) -> "DateTimeFields":
        """Subfields should come from the DateTimeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DateTimeFields":
        self._alias = alias
        return self


class DeleteApiKeyOutputFields(GraphQLField):
    @classmethod
    def api_key(cls) -> "ApiKeyFields":
        return ApiKeyFields("api_key")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteApiKeyOutputGraphQLField, "ApiKeyFields", "MutationErrorFields"
        ]
    ) -> "DeleteApiKeyOutputFields":
        """Subfields should come from the DeleteApiKeyOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteApiKeyOutputFields":
        self._alias = alias
        return self


class DeleteAutoresponderOutputFields(GraphQLField):
    @classmethod
    def autoresponder(cls) -> "AutoresponderFields":
        return AutoresponderFields("autoresponder")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteAutoresponderOutputGraphQLField,
            "AutoresponderFields",
            "MutationErrorFields",
        ]
    ) -> "DeleteAutoresponderOutputFields":
        """Subfields should come from the DeleteAutoresponderOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteAutoresponderOutputFields":
        self._alias = alias
        return self


class DeleteBusinessHoursOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[DeleteBusinessHoursOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteBusinessHoursOutputFields":
        """Subfields should come from the DeleteBusinessHoursOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteBusinessHoursOutputFields":
        self._alias = alias
        return self


class DeleteChatAppOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self, *subfields: Union[DeleteChatAppOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteChatAppOutputFields":
        """Subfields should come from the DeleteChatAppOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteChatAppOutputFields":
        self._alias = alias
        return self


class DeleteChatAppSecretOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[DeleteChatAppSecretOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteChatAppSecretOutputFields":
        """Subfields should come from the DeleteChatAppSecretOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteChatAppSecretOutputFields":
        self._alias = alias
        return self


class DeleteCustomerCardConfigOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteCustomerCardConfigOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "DeleteCustomerCardConfigOutputFields":
        """Subfields should come from the DeleteCustomerCardConfigOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteCustomerCardConfigOutputFields":
        self._alias = alias
        return self


class DeleteCustomerGroupOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[DeleteCustomerGroupOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteCustomerGroupOutputFields":
        """Subfields should come from the DeleteCustomerGroupOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteCustomerGroupOutputFields":
        self._alias = alias
        return self


class DeleteCustomerOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self, *subfields: Union[DeleteCustomerOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteCustomerOutputFields":
        """Subfields should come from the DeleteCustomerOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteCustomerOutputFields":
        self._alias = alias
        return self


class DeleteIndexedDocumentOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteIndexedDocumentOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "DeleteIndexedDocumentOutputFields":
        """Subfields should come from the DeleteIndexedDocumentOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteIndexedDocumentOutputFields":
        self._alias = alias
        return self


class DeleteMachineUserOutputFields(GraphQLField):
    @classmethod
    def machine_user(cls) -> "MachineUserFields":
        return MachineUserFields("machine_user")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteMachineUserOutputGraphQLField,
            "MachineUserFields",
            "MutationErrorFields",
        ]
    ) -> "DeleteMachineUserOutputFields":
        """Subfields should come from the DeleteMachineUserOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteMachineUserOutputFields":
        self._alias = alias
        return self


class DeleteMyFavoritePageOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[DeleteMyFavoritePageOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteMyFavoritePageOutputFields":
        """Subfields should come from the DeleteMyFavoritePageOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteMyFavoritePageOutputFields":
        self._alias = alias
        return self


class DeleteMyLinearIntegrationOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteMyLinearIntegrationOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "DeleteMyLinearIntegrationOutputFields":
        """Subfields should come from the DeleteMyLinearIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteMyLinearIntegrationOutputFields":
        self._alias = alias
        return self


class DeleteMyMSTeamsIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "UserMSTeamsIntegrationFields":
        return UserMSTeamsIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteMyMSTeamsIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "UserMSTeamsIntegrationFields",
        ]
    ) -> "DeleteMyMSTeamsIntegrationOutputFields":
        """Subfields should come from the DeleteMyMSTeamsIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteMyMSTeamsIntegrationOutputFields":
        self._alias = alias
        return self


class DeleteMyServiceAuthorizationOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteMyServiceAuthorizationOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "DeleteMyServiceAuthorizationOutputFields":
        """Subfields should come from the DeleteMyServiceAuthorizationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteMyServiceAuthorizationOutputFields":
        self._alias = alias
        return self


class DeleteMySlackIntegrationOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteMySlackIntegrationOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "DeleteMySlackIntegrationOutputFields":
        """Subfields should come from the DeleteMySlackIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteMySlackIntegrationOutputFields":
        self._alias = alias
        return self


class DeleteNoteOutputFields(GraphQLField):
    @classmethod
    def note(cls) -> "NoteFields":
        return NoteFields("note")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteNoteOutputGraphQLField, "MutationErrorFields", "NoteFields"
        ]
    ) -> "DeleteNoteOutputFields":
        """Subfields should come from the DeleteNoteOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteNoteOutputFields":
        self._alias = alias
        return self


class DeleteSavedThreadsViewOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteSavedThreadsViewOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "DeleteSavedThreadsViewOutputFields":
        """Subfields should come from the DeleteSavedThreadsViewOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteSavedThreadsViewOutputFields":
        self._alias = alias
        return self


class DeleteServiceAuthorizationOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteServiceAuthorizationOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "DeleteServiceAuthorizationOutputFields":
        """Subfields should come from the DeleteServiceAuthorizationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteServiceAuthorizationOutputFields":
        self._alias = alias
        return self


class DeleteServiceLevelAgreementOutputFields(GraphQLField):
    @classmethod
    def service_level_agreement(cls) -> "ServiceLevelAgreementInterface":
        return ServiceLevelAgreementInterface("service_level_agreement")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteServiceLevelAgreementOutputGraphQLField,
            "MutationErrorFields",
            "ServiceLevelAgreementInterface",
        ]
    ) -> "DeleteServiceLevelAgreementOutputFields":
        """Subfields should come from the DeleteServiceLevelAgreementOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteServiceLevelAgreementOutputFields":
        self._alias = alias
        return self


class DeleteSnippetOutputFields(GraphQLField):
    @classmethod
    def snippet(cls) -> "SnippetFields":
        return SnippetFields("snippet")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteSnippetOutputGraphQLField, "MutationErrorFields", "SnippetFields"
        ]
    ) -> "DeleteSnippetOutputFields":
        """Subfields should come from the DeleteSnippetOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteSnippetOutputFields":
        self._alias = alias
        return self


class DeleteThreadChannelAssociationOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteThreadChannelAssociationOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "DeleteThreadChannelAssociationOutputFields":
        """Subfields should come from the DeleteThreadChannelAssociationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteThreadChannelAssociationOutputFields":
        self._alias = alias
        return self


class DeleteThreadFieldOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[DeleteThreadFieldOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteThreadFieldOutputFields":
        """Subfields should come from the DeleteThreadFieldOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteThreadFieldOutputFields":
        self._alias = alias
        return self


class DeleteThreadFieldSchemaOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteThreadFieldSchemaOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "DeleteThreadFieldSchemaOutputFields":
        """Subfields should come from the DeleteThreadFieldSchemaOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteThreadFieldSchemaOutputFields":
        self._alias = alias
        return self


class DeleteThreadLinkOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[DeleteThreadLinkOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteThreadLinkOutputFields":
        """Subfields should come from the DeleteThreadLinkOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteThreadLinkOutputFields":
        self._alias = alias
        return self


class DeleteTierOutputFields(GraphQLField):
    @classmethod
    def tier(cls) -> "TierFields":
        return TierFields("tier")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteTierOutputGraphQLField, "MutationErrorFields", "TierFields"
        ]
    ) -> "DeleteTierOutputFields":
        """Subfields should come from the DeleteTierOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteTierOutputFields":
        self._alias = alias
        return self


class DeleteUserAuthSlackIntegrationOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteUserAuthSlackIntegrationOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "DeleteUserAuthSlackIntegrationOutputFields":
        """Subfields should come from the DeleteUserAuthSlackIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteUserAuthSlackIntegrationOutputFields":
        self._alias = alias
        return self


class DeleteUserOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self, *subfields: Union[DeleteUserOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteUserOutputFields":
        """Subfields should come from the DeleteUserOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteUserOutputFields":
        self._alias = alias
        return self


class DeleteWebhookTargetOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[DeleteWebhookTargetOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteWebhookTargetOutputFields":
        """Subfields should come from the DeleteWebhookTargetOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteWebhookTargetOutputFields":
        self._alias = alias
        return self


class DeleteWorkflowRuleOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[DeleteWorkflowRuleOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteWorkflowRuleOutputFields":
        """Subfields should come from the DeleteWorkflowRuleOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteWorkflowRuleOutputFields":
        self._alias = alias
        return self


class DeleteWorkspaceDiscordChannelIntegrationOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteWorkspaceDiscordChannelIntegrationOutputGraphQLField,
            "MutationErrorFields",
        ]
    ) -> "DeleteWorkspaceDiscordChannelIntegrationOutputFields":
        """Subfields should come from the DeleteWorkspaceDiscordChannelIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "DeleteWorkspaceDiscordChannelIntegrationOutputFields":
        self._alias = alias
        return self


class DeleteWorkspaceDiscordIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "WorkspaceDiscordIntegrationFields":
        return WorkspaceDiscordIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteWorkspaceDiscordIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceDiscordIntegrationFields",
        ]
    ) -> "DeleteWorkspaceDiscordIntegrationOutputFields":
        """Subfields should come from the DeleteWorkspaceDiscordIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteWorkspaceDiscordIntegrationOutputFields":
        self._alias = alias
        return self


class DeleteWorkspaceEmailDomainSettingsOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteWorkspaceEmailDomainSettingsOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "DeleteWorkspaceEmailDomainSettingsOutputFields":
        """Subfields should come from the DeleteWorkspaceEmailDomainSettingsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteWorkspaceEmailDomainSettingsOutputFields":
        self._alias = alias
        return self


class DeleteWorkspaceFileOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[DeleteWorkspaceFileOutputGraphQLField, "MutationErrorFields"]
    ) -> "DeleteWorkspaceFileOutputFields":
        """Subfields should come from the DeleteWorkspaceFileOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteWorkspaceFileOutputFields":
        self._alias = alias
        return self


class DeleteWorkspaceInviteOutputFields(GraphQLField):
    @classmethod
    def invite(cls) -> "WorkspaceInviteFields":
        return WorkspaceInviteFields("invite")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteWorkspaceInviteOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceInviteFields",
        ]
    ) -> "DeleteWorkspaceInviteOutputFields":
        """Subfields should come from the DeleteWorkspaceInviteOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteWorkspaceInviteOutputFields":
        self._alias = alias
        return self


class DeleteWorkspaceMSTeamsIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "WorkspaceMSTeamsIntegrationFields":
        return WorkspaceMSTeamsIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteWorkspaceMSTeamsIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceMSTeamsIntegrationFields",
        ]
    ) -> "DeleteWorkspaceMSTeamsIntegrationOutputFields":
        """Subfields should come from the DeleteWorkspaceMSTeamsIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteWorkspaceMSTeamsIntegrationOutputFields":
        self._alias = alias
        return self


class DeleteWorkspaceSlackChannelIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "WorkspaceSlackChannelIntegrationFields":
        return WorkspaceSlackChannelIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteWorkspaceSlackChannelIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceSlackChannelIntegrationFields",
        ]
    ) -> "DeleteWorkspaceSlackChannelIntegrationOutputFields":
        """Subfields should come from the DeleteWorkspaceSlackChannelIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteWorkspaceSlackChannelIntegrationOutputFields":
        self._alias = alias
        return self


class DeleteWorkspaceSlackIntegrationOutputFields(GraphQLField):
    @classmethod
    def integration(cls) -> "WorkspaceSlackIntegrationFields":
        return WorkspaceSlackIntegrationFields("integration")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            DeleteWorkspaceSlackIntegrationOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceSlackIntegrationFields",
        ]
    ) -> "DeleteWorkspaceSlackIntegrationOutputFields":
        """Subfields should come from the DeleteWorkspaceSlackIntegrationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeleteWorkspaceSlackIntegrationOutputFields":
        self._alias = alias
        return self


class DeletedCustomerActorFields(GraphQLField):
    customer_id: "DeletedCustomerActorGraphQLField" = DeletedCustomerActorGraphQLField(
        "customerId"
    )

    def fields(
        self, *subfields: DeletedCustomerActorGraphQLField
    ) -> "DeletedCustomerActorFields":
        """Subfields should come from the DeletedCustomerActorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeletedCustomerActorFields":
        self._alias = alias
        return self


class DeletedCustomerEmailActorFields(GraphQLField):
    customer_id: "DeletedCustomerEmailActorGraphQLField" = (
        DeletedCustomerEmailActorGraphQLField("customerId")
    )

    def fields(
        self, *subfields: DeletedCustomerEmailActorGraphQLField
    ) -> "DeletedCustomerEmailActorFields":
        """Subfields should come from the DeletedCustomerEmailActorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DeletedCustomerEmailActorFields":
        self._alias = alias
        return self


class DependsOnLabelTypeFields(GraphQLField):
    label_type_id: "DependsOnLabelTypeGraphQLField" = DependsOnLabelTypeGraphQLField(
        "labelTypeId"
    )

    def fields(
        self, *subfields: DependsOnLabelTypeGraphQLField
    ) -> "DependsOnLabelTypeFields":
        """Subfields should come from the DependsOnLabelTypeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DependsOnLabelTypeFields":
        self._alias = alias
        return self


class DependsOnThreadFieldTypeFields(GraphQLField):
    thread_field_schema_id: "DependsOnThreadFieldTypeGraphQLField" = (
        DependsOnThreadFieldTypeGraphQLField("threadFieldSchemaId")
    )
    thread_field_schema_value: "DependsOnThreadFieldTypeGraphQLField" = (
        DependsOnThreadFieldTypeGraphQLField("threadFieldSchemaValue")
    )

    def fields(
        self, *subfields: DependsOnThreadFieldTypeGraphQLField
    ) -> "DependsOnThreadFieldTypeFields":
        """Subfields should come from the DependsOnThreadFieldTypeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DependsOnThreadFieldTypeFields":
        self._alias = alias
        return self


class DiscordMessageEntryFields(GraphQLField):
    customer_id: "DiscordMessageEntryGraphQLField" = DiscordMessageEntryGraphQLField(
        "customerId"
    )
    discord_message_id: "DiscordMessageEntryGraphQLField" = (
        DiscordMessageEntryGraphQLField("discordMessageId")
    )
    text_content: "DiscordMessageEntryGraphQLField" = DiscordMessageEntryGraphQLField(
        "textContent"
    )

    def fields(
        self, *subfields: DiscordMessageEntryGraphQLField
    ) -> "DiscordMessageEntryFields":
        """Subfields should come from the DiscordMessageEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DiscordMessageEntryFields":
        self._alias = alias
        return self


class DnsRecordFields(GraphQLField):
    type: "DnsRecordGraphQLField" = DnsRecordGraphQLField("type")
    name: "DnsRecordGraphQLField" = DnsRecordGraphQLField("name")
    value: "DnsRecordGraphQLField" = DnsRecordGraphQLField("value")
    is_verified: "DnsRecordGraphQLField" = DnsRecordGraphQLField("isVerified")

    @classmethod
    def verified_at(cls) -> "DateTimeFields":
        return DateTimeFields("verified_at")

    @classmethod
    def last_checked_at(cls) -> "DateTimeFields":
        return DateTimeFields("last_checked_at")

    def fields(
        self, *subfields: Union[DnsRecordGraphQLField, "DateTimeFields"]
    ) -> "DnsRecordFields":
        """Subfields should come from the DnsRecordFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "DnsRecordFields":
        self._alias = alias
        return self


class EmailFields(GraphQLField):
    id: "EmailGraphQLField" = EmailGraphQLField("id")

    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    in_reply_to_email_id: "EmailGraphQLField" = EmailGraphQLField("inReplyToEmailId")

    @classmethod
    def from_(cls) -> "EmailParticipantFields":
        return EmailParticipantFields("from_")

    @classmethod
    def to(cls) -> "EmailParticipantFields":
        return EmailParticipantFields("to")

    subject: "EmailGraphQLField" = EmailGraphQLField("subject")
    text_content: "EmailGraphQLField" = EmailGraphQLField("textContent")
    markdown_content: "EmailGraphQLField" = EmailGraphQLField("markdownContent")

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    @classmethod
    def additional_recipients(cls) -> "EmailParticipantFields":
        return EmailParticipantFields("additional_recipients")

    @classmethod
    def hidden_recipients(cls) -> "EmailParticipantFields":
        return EmailParticipantFields("hidden_recipients")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "ActorUnion" = ActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "ActorUnion" = ActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            EmailGraphQLField,
            "ActorUnion",
            "AttachmentFields",
            "CustomerFields",
            "DateTimeFields",
            "EmailParticipantFields",
            "ThreadFields",
        ]
    ) -> "EmailFields":
        """Subfields should come from the EmailFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmailFields":
        self._alias = alias
        return self


class EmailAddressFields(GraphQLField):
    email: "EmailAddressGraphQLField" = EmailAddressGraphQLField("email")
    is_verified: "EmailAddressGraphQLField" = EmailAddressGraphQLField("isVerified")

    @classmethod
    def verified_at(cls) -> "DateTimeFields":
        return DateTimeFields("verified_at")

    def fields(
        self, *subfields: Union[EmailAddressGraphQLField, "DateTimeFields"]
    ) -> "EmailAddressFields":
        """Subfields should come from the EmailAddressFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmailAddressFields":
        self._alias = alias
        return self


class EmailBounceFields(GraphQLField):
    @classmethod
    def bounced_at(cls) -> "DateTimeFields":
        return DateTimeFields("bounced_at")

    @classmethod
    def recipient(cls) -> "EmailParticipantFields":
        return EmailParticipantFields("recipient")

    is_send_retriable: "EmailBounceGraphQLField" = EmailBounceGraphQLField(
        "isSendRetriable"
    )

    def fields(
        self,
        *subfields: Union[
            EmailBounceGraphQLField, "DateTimeFields", "EmailParticipantFields"
        ]
    ) -> "EmailBounceFields":
        """Subfields should come from the EmailBounceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmailBounceFields":
        self._alias = alias
        return self


class EmailEntryFields(GraphQLField):
    email_id: "EmailEntryGraphQLField" = EmailEntryGraphQLField("emailId")

    @classmethod
    def to(cls) -> "EmailParticipantFields":
        return EmailParticipantFields("to")

    @classmethod
    def from_(cls) -> "EmailParticipantFields":
        return EmailParticipantFields("from_")

    @classmethod
    def additional_recipients(cls) -> "EmailParticipantFields":
        return EmailParticipantFields("additional_recipients")

    @classmethod
    def hidden_recipients(cls) -> "EmailParticipantFields":
        return EmailParticipantFields("hidden_recipients")

    subject: "EmailEntryGraphQLField" = EmailEntryGraphQLField("subject")
    text_content: "EmailEntryGraphQLField" = EmailEntryGraphQLField("textContent")
    has_more_text_content: "EmailEntryGraphQLField" = EmailEntryGraphQLField(
        "hasMoreTextContent"
    )
    full_text_content: "EmailEntryGraphQLField" = EmailEntryGraphQLField(
        "fullTextContent"
    )
    markdown_content: "EmailEntryGraphQLField" = EmailEntryGraphQLField(
        "markdownContent"
    )
    has_more_markdown_content: "EmailEntryGraphQLField" = EmailEntryGraphQLField(
        "hasMoreMarkdownContent"
    )
    full_markdown_content: "EmailEntryGraphQLField" = EmailEntryGraphQLField(
        "fullMarkdownContent"
    )
    authenticity: "EmailEntryGraphQLField" = EmailEntryGraphQLField("authenticity")

    @classmethod
    def sent_at(cls) -> "DateTimeFields":
        return DateTimeFields("sent_at")

    send_status: "EmailEntryGraphQLField" = EmailEntryGraphQLField("sendStatus")

    @classmethod
    def received_at(cls) -> "DateTimeFields":
        return DateTimeFields("received_at")

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    is_start_of_thread: "EmailEntryGraphQLField" = EmailEntryGraphQLField(
        "isStartOfThread"
    )

    @classmethod
    def bounces(cls) -> "EmailBounceFields":
        return EmailBounceFields("bounces")

    def fields(
        self,
        *subfields: Union[
            EmailEntryGraphQLField,
            "AttachmentFields",
            "DateTimeFields",
            "EmailBounceFields",
            "EmailParticipantFields",
        ]
    ) -> "EmailEntryFields":
        """Subfields should come from the EmailEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmailEntryFields":
        self._alias = alias
        return self


class EmailParticipantFields(GraphQLField):
    name: "EmailParticipantGraphQLField" = EmailParticipantGraphQLField("name")
    email: "EmailParticipantGraphQLField" = EmailParticipantGraphQLField("email")
    email_actor: "EmailActorUnion" = EmailActorUnion("emailActor")

    def fields(
        self, *subfields: Union[EmailParticipantGraphQLField, "EmailActorUnion"]
    ) -> "EmailParticipantFields":
        """Subfields should come from the EmailParticipantFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmailParticipantFields":
        self._alias = alias
        return self


class EmailPreviewUrlFields(GraphQLField):
    preview_url: "EmailPreviewUrlGraphQLField" = EmailPreviewUrlGraphQLField(
        "previewUrl"
    )

    @classmethod
    def expires_at(cls) -> "DateTimeFields":
        return DateTimeFields("expires_at")

    def fields(
        self, *subfields: Union[EmailPreviewUrlGraphQLField, "DateTimeFields"]
    ) -> "EmailPreviewUrlFields":
        """Subfields should come from the EmailPreviewUrlFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmailPreviewUrlFields":
        self._alias = alias
        return self


class EmailSignatureFields(GraphQLField):
    text: "EmailSignatureGraphQLField" = EmailSignatureGraphQLField("text")
    markdown: "EmailSignatureGraphQLField" = EmailSignatureGraphQLField("markdown")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            EmailSignatureGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "EmailSignatureFields":
        """Subfields should come from the EmailSignatureFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "EmailSignatureFields":
        self._alias = alias
        return self


class FavoritePageFields(GraphQLField):
    id: "FavoritePageGraphQLField" = FavoritePageGraphQLField("id")
    key: "FavoritePageGraphQLField" = FavoritePageGraphQLField("key")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            FavoritePageGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "FavoritePageFields":
        """Subfields should come from the FavoritePageFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FavoritePageFields":
        self._alias = alias
        return self


class FavoritePageConnectionFields(GraphQLField):
    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    @classmethod
    def edges(cls) -> "FavoritePageEdgeFields":
        return FavoritePageEdgeFields("edges")

    def fields(
        self,
        *subfields: Union[
            FavoritePageConnectionGraphQLField,
            "FavoritePageEdgeFields",
            "PageInfoFields",
        ]
    ) -> "FavoritePageConnectionFields":
        """Subfields should come from the FavoritePageConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FavoritePageConnectionFields":
        self._alias = alias
        return self


class FavoritePageEdgeFields(GraphQLField):
    cursor: "FavoritePageEdgeGraphQLField" = FavoritePageEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "FavoritePageFields":
        return FavoritePageFields("node")

    def fields(
        self, *subfields: Union[FavoritePageEdgeGraphQLField, "FavoritePageFields"]
    ) -> "FavoritePageEdgeFields":
        """Subfields should come from the FavoritePageEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FavoritePageEdgeFields":
        self._alias = alias
        return self


class FileSizeFields(GraphQLField):
    bytes: "FileSizeGraphQLField" = FileSizeGraphQLField("bytes")
    kilo_bytes: "FileSizeGraphQLField" = FileSizeGraphQLField("kiloBytes")
    mega_bytes: "FileSizeGraphQLField" = FileSizeGraphQLField("megaBytes")

    def fields(self, *subfields: FileSizeGraphQLField) -> "FileSizeFields":
        """Subfields should come from the FileSizeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "FileSizeFields":
        self._alias = alias
        return self


class ForkThreadOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ForkThreadOutputGraphQLField, "MutationErrorFields", "ThreadFields"
        ]
    ) -> "ForkThreadOutputFields":
        """Subfields should come from the ForkThreadOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ForkThreadOutputFields":
        self._alias = alias
        return self


class GeneratedReplyFields(GraphQLField):
    id: "GeneratedReplyGraphQLField" = GeneratedReplyGraphQLField("id")
    text: "GeneratedReplyGraphQLField" = GeneratedReplyGraphQLField("text")

    @classmethod
    def for_timeline_entry_timestamp(cls) -> "DateTimeFields":
        return DateTimeFields("for_timeline_entry_timestamp")

    def fields(
        self, *subfields: Union[GeneratedReplyGraphQLField, "DateTimeFields"]
    ) -> "GeneratedReplyFields":
        """Subfields should come from the GeneratedReplyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "GeneratedReplyFields":
        self._alias = alias
        return self


class IndexedDocumentFields(GraphQLField):
    id: "IndexedDocumentGraphQLField" = IndexedDocumentGraphQLField("id")
    url: "IndexedDocumentGraphQLField" = IndexedDocumentGraphQLField("url")

    @classmethod
    def label_types(cls) -> "LabelTypeFields":
        return LabelTypeFields("label_types")

    status: "IndexedDocumentStatusUnion" = IndexedDocumentStatusUnion("status")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            IndexedDocumentGraphQLField,
            "DateTimeFields",
            "IndexedDocumentStatusUnion",
            "InternalActorUnion",
            "LabelTypeFields",
        ]
    ) -> "IndexedDocumentFields":
        """Subfields should come from the IndexedDocumentFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IndexedDocumentFields":
        self._alias = alias
        return self


class IndexedDocumentConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "IndexedDocumentEdgeFields":
        return IndexedDocumentEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            IndexedDocumentConnectionGraphQLField,
            "IndexedDocumentEdgeFields",
            "PageInfoFields",
        ]
    ) -> "IndexedDocumentConnectionFields":
        """Subfields should come from the IndexedDocumentConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IndexedDocumentConnectionFields":
        self._alias = alias
        return self


class IndexedDocumentEdgeFields(GraphQLField):
    cursor: "IndexedDocumentEdgeGraphQLField" = IndexedDocumentEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "IndexedDocumentFields":
        return IndexedDocumentFields("node")

    def fields(
        self,
        *subfields: Union[IndexedDocumentEdgeGraphQLField, "IndexedDocumentFields"]
    ) -> "IndexedDocumentEdgeFields":
        """Subfields should come from the IndexedDocumentEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IndexedDocumentEdgeFields":
        self._alias = alias
        return self


class IndexedDocumentStatusFailedFields(GraphQLField):
    reason: "IndexedDocumentStatusFailedGraphQLField" = (
        IndexedDocumentStatusFailedGraphQLField("reason")
    )

    @classmethod
    def failed_at(cls) -> "DateTimeFields":
        return DateTimeFields("failed_at")

    def fields(
        self,
        *subfields: Union[IndexedDocumentStatusFailedGraphQLField, "DateTimeFields"]
    ) -> "IndexedDocumentStatusFailedFields":
        """Subfields should come from the IndexedDocumentStatusFailedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IndexedDocumentStatusFailedFields":
        self._alias = alias
        return self


class IndexedDocumentStatusIndexedFields(GraphQLField):
    @classmethod
    def indexed_at(cls) -> "DateTimeFields":
        return DateTimeFields("indexed_at")

    def fields(
        self,
        *subfields: Union[IndexedDocumentStatusIndexedGraphQLField, "DateTimeFields"]
    ) -> "IndexedDocumentStatusIndexedFields":
        """Subfields should come from the IndexedDocumentStatusIndexedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IndexedDocumentStatusIndexedFields":
        self._alias = alias
        return self


class IndexedDocumentStatusPendingFields(GraphQLField):
    @classmethod
    def started_at(cls) -> "DateTimeFields":
        return DateTimeFields("started_at")

    def fields(
        self,
        *subfields: Union[IndexedDocumentStatusPendingGraphQLField, "DateTimeFields"]
    ) -> "IndexedDocumentStatusPendingFields":
        """Subfields should come from the IndexedDocumentStatusPendingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "IndexedDocumentStatusPendingFields":
        self._alias = alias
        return self


class InviteUserToWorkspaceOutputFields(GraphQLField):
    @classmethod
    def invite(cls) -> "WorkspaceInviteFields":
        return WorkspaceInviteFields("invite")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            InviteUserToWorkspaceOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceInviteFields",
        ]
    ) -> "InviteUserToWorkspaceOutputFields":
        """Subfields should come from the InviteUserToWorkspaceOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "InviteUserToWorkspaceOutputFields":
        self._alias = alias
        return self


class JiraIntegrationTokenFields(GraphQLField):
    token: "JiraIntegrationTokenGraphQLField" = JiraIntegrationTokenGraphQLField(
        "token"
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    def fields(
        self, *subfields: Union[JiraIntegrationTokenGraphQLField, "DateTimeFields"]
    ) -> "JiraIntegrationTokenFields":
        """Subfields should come from the JiraIntegrationTokenFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "JiraIntegrationTokenFields":
        self._alias = alias
        return self


class LabelFields(GraphQLField):
    id: "LabelGraphQLField" = LabelGraphQLField("id")

    @classmethod
    def label_type(cls) -> "LabelTypeFields":
        return LabelTypeFields("label_type")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            LabelGraphQLField, "DateTimeFields", "InternalActorUnion", "LabelTypeFields"
        ]
    ) -> "LabelFields":
        """Subfields should come from the LabelFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelFields":
        self._alias = alias
        return self


class LabelTypeFields(GraphQLField):
    id: "LabelTypeGraphQLField" = LabelTypeGraphQLField("id")
    name: "LabelTypeGraphQLField" = LabelTypeGraphQLField("name")
    icon: "LabelTypeGraphQLField" = LabelTypeGraphQLField("icon")
    is_archived: "LabelTypeGraphQLField" = LabelTypeGraphQLField("isArchived")
    archived_by: "InternalActorUnion" = InternalActorUnion("archivedBy")

    @classmethod
    def archived_at(cls) -> "DateTimeFields":
        return DateTimeFields("archived_at")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[LabelTypeGraphQLField, "DateTimeFields", "InternalActorUnion"]
    ) -> "LabelTypeFields":
        """Subfields should come from the LabelTypeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelTypeFields":
        self._alias = alias
        return self


class LabelTypeConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "LabelTypeEdgeFields":
        return LabelTypeEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            LabelTypeConnectionGraphQLField, "LabelTypeEdgeFields", "PageInfoFields"
        ]
    ) -> "LabelTypeConnectionFields":
        """Subfields should come from the LabelTypeConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelTypeConnectionFields":
        self._alias = alias
        return self


class LabelTypeEdgeFields(GraphQLField):
    cursor: "LabelTypeEdgeGraphQLField" = LabelTypeEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "LabelTypeFields":
        return LabelTypeFields("node")

    def fields(
        self, *subfields: Union[LabelTypeEdgeGraphQLField, "LabelTypeFields"]
    ) -> "LabelTypeEdgeFields":
        """Subfields should come from the LabelTypeEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LabelTypeEdgeFields":
        self._alias = alias
        return self


class LinearIntegrationTokenFields(GraphQLField):
    token: "LinearIntegrationTokenGraphQLField" = LinearIntegrationTokenGraphQLField(
        "token"
    )

    def fields(
        self, *subfields: LinearIntegrationTokenGraphQLField
    ) -> "LinearIntegrationTokenFields":
        """Subfields should come from the LinearIntegrationTokenFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LinearIntegrationTokenFields":
        self._alias = alias
        return self


class LinearIssueThreadLinkStateTransitionedEntryFields(GraphQLField):
    linear_issue_id: "LinearIssueThreadLinkStateTransitionedEntryGraphQLField" = (
        LinearIssueThreadLinkStateTransitionedEntryGraphQLField("linearIssueId")
    )
    previous_linear_state_id: (
        "LinearIssueThreadLinkStateTransitionedEntryGraphQLField"
    ) = LinearIssueThreadLinkStateTransitionedEntryGraphQLField("previousLinearStateId")
    next_linear_state_id: "LinearIssueThreadLinkStateTransitionedEntryGraphQLField" = (
        LinearIssueThreadLinkStateTransitionedEntryGraphQLField("nextLinearStateId")
    )

    def fields(
        self, *subfields: LinearIssueThreadLinkStateTransitionedEntryGraphQLField
    ) -> "LinearIssueThreadLinkStateTransitionedEntryFields":
        """Subfields should come from the LinearIssueThreadLinkStateTransitionedEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "LinearIssueThreadLinkStateTransitionedEntryFields":
        self._alias = alias
        return self


class MSTeamsMessageFields(GraphQLField):
    id: "MSTeamsMessageGraphQLField" = MSTeamsMessageGraphQLField("id")
    thread_id: "MSTeamsMessageGraphQLField" = MSTeamsMessageGraphQLField("threadId")
    ms_teams_tenant_id: "MSTeamsMessageGraphQLField" = MSTeamsMessageGraphQLField(
        "msTeamsTenantId"
    )
    ms_teams_conversation_id: "MSTeamsMessageGraphQLField" = MSTeamsMessageGraphQLField(
        "msTeamsConversationId"
    )
    ms_teams_message_id: "MSTeamsMessageGraphQLField" = MSTeamsMessageGraphQLField(
        "msTeamsMessageId"
    )
    ms_teams_team_id: "MSTeamsMessageGraphQLField" = MSTeamsMessageGraphQLField(
        "msTeamsTeamId"
    )
    text: "MSTeamsMessageGraphQLField" = MSTeamsMessageGraphQLField("text")
    html: "MSTeamsMessageGraphQLField" = MSTeamsMessageGraphQLField("html")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "ActorUnion" = ActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "ActorUnion" = ActorUnion("updatedBy")

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    @classmethod
    def last_edited_on_ms_teams_at(cls) -> "DateTimeFields":
        return DateTimeFields("last_edited_on_ms_teams_at")

    @classmethod
    def deleted_on_ms_teams_at(cls) -> "DateTimeFields":
        return DateTimeFields("deleted_on_ms_teams_at")

    def fields(
        self,
        *subfields: Union[
            MSTeamsMessageGraphQLField,
            "ActorUnion",
            "AttachmentFields",
            "DateTimeFields",
        ]
    ) -> "MSTeamsMessageFields":
        """Subfields should come from the MSTeamsMessageFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MSTeamsMessageFields":
        self._alias = alias
        return self


class MSTeamsMessageEntryFields(GraphQLField):
    text: "MSTeamsMessageEntryGraphQLField" = MSTeamsMessageEntryGraphQLField("text")
    customer_id: "MSTeamsMessageEntryGraphQLField" = MSTeamsMessageEntryGraphQLField(
        "customerId"
    )
    ms_teams_message_id: "MSTeamsMessageEntryGraphQLField" = (
        MSTeamsMessageEntryGraphQLField("msTeamsMessageId")
    )

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    @classmethod
    def last_edited_on_ms_teams_at(cls) -> "DateTimeFields":
        return DateTimeFields("last_edited_on_ms_teams_at")

    @classmethod
    def deleted_on_ms_teams_at(cls) -> "DateTimeFields":
        return DateTimeFields("deleted_on_ms_teams_at")

    def fields(
        self,
        *subfields: Union[
            MSTeamsMessageEntryGraphQLField, "AttachmentFields", "DateTimeFields"
        ]
    ) -> "MSTeamsMessageEntryFields":
        """Subfields should come from the MSTeamsMessageEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MSTeamsMessageEntryFields":
        self._alias = alias
        return self


class MachineUserFields(GraphQLField):
    id: "MachineUserGraphQLField" = MachineUserGraphQLField("id")
    full_name: "MachineUserGraphQLField" = MachineUserGraphQLField("fullName")
    public_name: "MachineUserGraphQLField" = MachineUserGraphQLField("publicName")
    description: "MachineUserGraphQLField" = MachineUserGraphQLField("description")

    @classmethod
    def api_key(cls, api_key_id: str) -> "ApiKeyFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "apiKeyId": {"type": "ID!", "value": api_key_id}
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ApiKeyFields("api_key", arguments=cleared_arguments)

    @classmethod
    def api_keys(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> "ApiKeyConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ApiKeyConnectionFields("api_keys", arguments=cleared_arguments)

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    is_deleted: "MachineUserGraphQLField" = MachineUserGraphQLField("isDeleted")

    @classmethod
    def deleted_at(cls) -> "DateTimeFields":
        return DateTimeFields("deleted_at")

    deleted_by: "ActorUnion" = ActorUnion("deletedBy")

    def fields(
        self,
        *subfields: Union[
            MachineUserGraphQLField,
            "ActorUnion",
            "ApiKeyConnectionFields",
            "ApiKeyFields",
            "DateTimeFields",
            "InternalActorUnion",
        ]
    ) -> "MachineUserFields":
        """Subfields should come from the MachineUserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineUserFields":
        self._alias = alias
        return self


class MachineUserActorFields(GraphQLField):
    machine_user_id: "MachineUserActorGraphQLField" = MachineUserActorGraphQLField(
        "machineUserId"
    )

    @classmethod
    def machine_user(cls) -> "MachineUserFields":
        return MachineUserFields("machine_user")

    def fields(
        self, *subfields: Union[MachineUserActorGraphQLField, "MachineUserFields"]
    ) -> "MachineUserActorFields":
        """Subfields should come from the MachineUserActorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineUserActorFields":
        self._alias = alias
        return self


class MachineUserConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "MachineUserEdgeFields":
        return MachineUserEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            MachineUserConnectionGraphQLField, "MachineUserEdgeFields", "PageInfoFields"
        ]
    ) -> "MachineUserConnectionFields":
        """Subfields should come from the MachineUserConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineUserConnectionFields":
        self._alias = alias
        return self


class MachineUserEdgeFields(GraphQLField):
    cursor: "MachineUserEdgeGraphQLField" = MachineUserEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "MachineUserFields":
        return MachineUserFields("node")

    def fields(
        self, *subfields: Union[MachineUserEdgeGraphQLField, "MachineUserFields"]
    ) -> "MachineUserEdgeFields":
        """Subfields should come from the MachineUserEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MachineUserEdgeFields":
        self._alias = alias
        return self


class MarkCustomerAsSpamOutputFields(GraphQLField):
    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            MarkCustomerAsSpamOutputGraphQLField,
            "CustomerFields",
            "MutationErrorFields",
        ]
    ) -> "MarkCustomerAsSpamOutputFields":
        """Subfields should come from the MarkCustomerAsSpamOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarkCustomerAsSpamOutputFields":
        self._alias = alias
        return self


class MarkThreadAsDoneOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            MarkThreadAsDoneOutputGraphQLField, "MutationErrorFields", "ThreadFields"
        ]
    ) -> "MarkThreadAsDoneOutputFields":
        """Subfields should come from the MarkThreadAsDoneOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarkThreadAsDoneOutputFields":
        self._alias = alias
        return self


class MarkThreadAsTodoOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            MarkThreadAsTodoOutputGraphQLField, "MutationErrorFields", "ThreadFields"
        ]
    ) -> "MarkThreadAsTodoOutputFields":
        """Subfields should come from the MarkThreadAsTodoOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarkThreadAsTodoOutputFields":
        self._alias = alias
        return self


class MarkThreadDiscussionAsResolvedOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            MarkThreadDiscussionAsResolvedOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "MarkThreadDiscussionAsResolvedOutputFields":
        """Subfields should come from the MarkThreadDiscussionAsResolvedOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MarkThreadDiscussionAsResolvedOutputFields":
        self._alias = alias
        return self


class MetricDimensionFields(GraphQLField):
    type: "MetricDimensionGraphQLField" = MetricDimensionGraphQLField("type")
    value: "MetricDimensionGraphQLField" = MetricDimensionGraphQLField("value")

    def fields(
        self, *subfields: MetricDimensionGraphQLField
    ) -> "MetricDimensionFields":
        """Subfields should come from the MetricDimensionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MetricDimensionFields":
        self._alias = alias
        return self


class MutationErrorFields(GraphQLField):
    message: "MutationErrorGraphQLField" = MutationErrorGraphQLField("message")
    type: "MutationErrorGraphQLField" = MutationErrorGraphQLField("type")
    code: "MutationErrorGraphQLField" = MutationErrorGraphQLField("code")

    @classmethod
    def fields(cls) -> "MutationFieldErrorFields":
        return MutationFieldErrorFields("fields")

    def fields(
        self, *subfields: Union[MutationErrorGraphQLField, "MutationFieldErrorFields"]
    ) -> "MutationErrorFields":
        """Subfields should come from the MutationErrorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MutationErrorFields":
        self._alias = alias
        return self


class MutationFieldErrorFields(GraphQLField):
    field: "MutationFieldErrorGraphQLField" = MutationFieldErrorGraphQLField("field")
    message: "MutationFieldErrorGraphQLField" = MutationFieldErrorGraphQLField(
        "message"
    )
    type: "MutationFieldErrorGraphQLField" = MutationFieldErrorGraphQLField("type")

    def fields(
        self, *subfields: MutationFieldErrorGraphQLField
    ) -> "MutationFieldErrorFields":
        """Subfields should come from the MutationFieldErrorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "MutationFieldErrorFields":
        self._alias = alias
        return self


class NoteFields(GraphQLField):
    id: "NoteGraphQLField" = NoteGraphQLField("id")
    text: "NoteGraphQLField" = NoteGraphQLField("text")
    markdown: "NoteGraphQLField" = NoteGraphQLField("markdown")

    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    is_deleted: "NoteGraphQLField" = NoteGraphQLField("isDeleted")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def deleted_at(cls) -> "DateTimeFields":
        return DateTimeFields("deleted_at")

    deleted_by: "InternalActorUnion" = InternalActorUnion("deletedBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            NoteGraphQLField, "CustomerFields", "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "NoteFields":
        """Subfields should come from the NoteFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "NoteFields":
        self._alias = alias
        return self


class NoteEntryFields(GraphQLField):
    note_id: "NoteEntryGraphQLField" = NoteEntryGraphQLField("noteId")
    text: "NoteEntryGraphQLField" = NoteEntryGraphQLField("text")
    markdown: "NoteEntryGraphQLField" = NoteEntryGraphQLField("markdown")

    def fields(self, *subfields: NoteEntryGraphQLField) -> "NoteEntryFields":
        """Subfields should come from the NoteEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "NoteEntryFields":
        self._alias = alias
        return self


class NumberSettingFields(GraphQLField):
    code: "NumberSettingGraphQLField" = NumberSettingGraphQLField("code")
    number_value: "NumberSettingGraphQLField" = NumberSettingGraphQLField("numberValue")

    @classmethod
    def scope(cls) -> "SettingScopeFields":
        return SettingScopeFields("scope")

    def fields(
        self, *subfields: Union[NumberSettingGraphQLField, "SettingScopeFields"]
    ) -> "NumberSettingFields":
        """Subfields should come from the NumberSettingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "NumberSettingFields":
        self._alias = alias
        return self


class PageInfoFields(GraphQLField):
    has_previous_page: "PageInfoGraphQLField" = PageInfoGraphQLField("hasPreviousPage")
    has_next_page: "PageInfoGraphQLField" = PageInfoGraphQLField("hasNextPage")
    start_cursor: "PageInfoGraphQLField" = PageInfoGraphQLField("startCursor")
    end_cursor: "PageInfoGraphQLField" = PageInfoGraphQLField("endCursor")

    def fields(self, *subfields: PageInfoGraphQLField) -> "PageInfoFields":
        """Subfields should come from the PageInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PageInfoFields":
        self._alias = alias
        return self


class PaymentMethodFields(GraphQLField):
    is_available: "PaymentMethodGraphQLField" = PaymentMethodGraphQLField("isAvailable")

    def fields(self, *subfields: PaymentMethodGraphQLField) -> "PaymentMethodFields":
        """Subfields should come from the PaymentMethodFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PaymentMethodFields":
        self._alias = alias
        return self


class PermissionsFields(GraphQLField):
    permissions: "PermissionsGraphQLField" = PermissionsGraphQLField("permissions")

    def fields(self, *subfields: PermissionsGraphQLField) -> "PermissionsFields":
        """Subfields should come from the PermissionsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PermissionsFields":
        self._alias = alias
        return self


class PreviewBillingPlanChangeOutputFields(GraphQLField):
    @classmethod
    def preview(cls) -> "BillingPlanChangePreviewFields":
        return BillingPlanChangePreviewFields("preview")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            PreviewBillingPlanChangeOutputGraphQLField,
            "BillingPlanChangePreviewFields",
            "MutationErrorFields",
        ]
    ) -> "PreviewBillingPlanChangeOutputFields":
        """Subfields should come from the PreviewBillingPlanChangeOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PreviewBillingPlanChangeOutputFields":
        self._alias = alias
        return self


class PriceFields(GraphQLField):
    amount: "PriceGraphQLField" = PriceGraphQLField("amount")
    currency: "PriceGraphQLField" = PriceGraphQLField("currency")

    def fields(self, *subfields: PriceGraphQLField) -> "PriceFields":
        """Subfields should come from the PriceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "PriceFields":
        self._alias = alias
        return self


class RegenerateWorkspaceHmacOutputFields(GraphQLField):
    @classmethod
    def workspace_hmac(cls) -> "WorkspaceHmacFields":
        return WorkspaceHmacFields("workspace_hmac")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            RegenerateWorkspaceHmacOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceHmacFields",
        ]
    ) -> "RegenerateWorkspaceHmacOutputFields":
        """Subfields should come from the RegenerateWorkspaceHmacOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RegenerateWorkspaceHmacOutputFields":
        self._alias = alias
        return self


class ReloadCustomerCardInstanceOutputFields(GraphQLField):
    @classmethod
    def customer_card_instance(cls) -> "CustomerCardInstanceInterface":
        return CustomerCardInstanceInterface("customer_card_instance")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ReloadCustomerCardInstanceOutputGraphQLField,
            "CustomerCardInstanceInterface",
            "MutationErrorFields",
        ]
    ) -> "ReloadCustomerCardInstanceOutputFields":
        """Subfields should come from the ReloadCustomerCardInstanceOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReloadCustomerCardInstanceOutputFields":
        self._alias = alias
        return self


class RemoveAdditionalAssigneesOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            RemoveAdditionalAssigneesOutputGraphQLField,
            "MutationErrorFields",
            "ThreadFields",
        ]
    ) -> "RemoveAdditionalAssigneesOutputFields":
        """Subfields should come from the RemoveAdditionalAssigneesOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveAdditionalAssigneesOutputFields":
        self._alias = alias
        return self


class RemoveCustomerFromCustomerGroupsOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            RemoveCustomerFromCustomerGroupsOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "RemoveCustomerFromCustomerGroupsOutputFields":
        """Subfields should come from the RemoveCustomerFromCustomerGroupsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveCustomerFromCustomerGroupsOutputFields":
        self._alias = alias
        return self


class RemoveCustomerFromTenantsOutputFields(GraphQLField):
    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            RemoveCustomerFromTenantsOutputGraphQLField,
            "CustomerFields",
            "MutationErrorFields",
        ]
    ) -> "RemoveCustomerFromTenantsOutputFields":
        """Subfields should come from the RemoveCustomerFromTenantsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveCustomerFromTenantsOutputFields":
        self._alias = alias
        return self


class RemoveLabelsOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self, *subfields: Union[RemoveLabelsOutputGraphQLField, "MutationErrorFields"]
    ) -> "RemoveLabelsOutputFields":
        """Subfields should come from the RemoveLabelsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveLabelsOutputFields":
        self._alias = alias
        return self


class RemoveMembersFromTierOutputFields(GraphQLField):
    memberships: "TierMembershipUnion" = TierMembershipUnion("memberships")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            RemoveMembersFromTierOutputGraphQLField,
            "MutationErrorFields",
            "TierMembershipUnion",
        ]
    ) -> "RemoveMembersFromTierOutputFields":
        """Subfields should come from the RemoveMembersFromTierOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveMembersFromTierOutputFields":
        self._alias = alias
        return self


class RemoveUserFromActiveBillingRotaOutputFields(GraphQLField):
    @classmethod
    def billing_rota(cls) -> "BillingRotaFields":
        return BillingRotaFields("billing_rota")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            RemoveUserFromActiveBillingRotaOutputGraphQLField,
            "BillingRotaFields",
            "MutationErrorFields",
        ]
    ) -> "RemoveUserFromActiveBillingRotaOutputFields":
        """Subfields should come from the RemoveUserFromActiveBillingRotaOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RemoveUserFromActiveBillingRotaOutputFields":
        self._alias = alias
        return self


class RemoveWorkspaceAlternateSupportEmailAddressOutputFields(GraphQLField):
    @classmethod
    def workspace_email_domain_settings(cls) -> "WorkspaceEmailDomainSettingsFields":
        return WorkspaceEmailDomainSettingsFields("workspace_email_domain_settings")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            RemoveWorkspaceAlternateSupportEmailAddressOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceEmailDomainSettingsFields",
        ]
    ) -> "RemoveWorkspaceAlternateSupportEmailAddressOutputFields":
        """Subfields should come from the RemoveWorkspaceAlternateSupportEmailAddressOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "RemoveWorkspaceAlternateSupportEmailAddressOutputFields":
        self._alias = alias
        return self


class ReorderAutorespondersOutputFields(GraphQLField):
    @classmethod
    def autoresponders(cls) -> "AutoresponderFields":
        return AutoresponderFields("autoresponders")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ReorderAutorespondersOutputGraphQLField,
            "AutoresponderFields",
            "MutationErrorFields",
        ]
    ) -> "ReorderAutorespondersOutputFields":
        """Subfields should come from the ReorderAutorespondersOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReorderAutorespondersOutputFields":
        self._alias = alias
        return self


class ReorderCustomerCardConfigsOutputFields(GraphQLField):
    @classmethod
    def customer_card_configs(cls) -> "CustomerCardConfigFields":
        return CustomerCardConfigFields("customer_card_configs")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ReorderCustomerCardConfigsOutputGraphQLField,
            "CustomerCardConfigFields",
            "MutationErrorFields",
        ]
    ) -> "ReorderCustomerCardConfigsOutputFields":
        """Subfields should come from the ReorderCustomerCardConfigsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReorderCustomerCardConfigsOutputFields":
        self._alias = alias
        return self


class ReorderThreadFieldSchemasOutputFields(GraphQLField):
    @classmethod
    def thread_field_schemas(cls) -> "ThreadFieldSchemaFields":
        return ThreadFieldSchemaFields("thread_field_schemas")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ReorderThreadFieldSchemasOutputGraphQLField,
            "MutationErrorFields",
            "ThreadFieldSchemaFields",
        ]
    ) -> "ReorderThreadFieldSchemasOutputFields":
        """Subfields should come from the ReorderThreadFieldSchemasOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReorderThreadFieldSchemasOutputFields":
        self._alias = alias
        return self


class ReplyToEmailOutputFields(GraphQLField):
    @classmethod
    def email(cls) -> "EmailFields":
        return EmailFields("email")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ReplyToEmailOutputGraphQLField, "EmailFields", "MutationErrorFields"
        ]
    ) -> "ReplyToEmailOutputFields":
        """Subfields should come from the ReplyToEmailOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReplyToEmailOutputFields":
        self._alias = alias
        return self


class ReplyToThreadOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self, *subfields: Union[ReplyToThreadOutputGraphQLField, "MutationErrorFields"]
    ) -> "ReplyToThreadOutputFields":
        """Subfields should come from the ReplyToThreadOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ReplyToThreadOutputFields":
        self._alias = alias
        return self


class RoleFields(GraphQLField):
    id: "RoleGraphQLField" = RoleGraphQLField("id")
    name: "RoleGraphQLField" = RoleGraphQLField("name")
    description: "RoleGraphQLField" = RoleGraphQLField("description")
    permissions: "RoleGraphQLField" = RoleGraphQLField("permissions")
    is_assignable_to_customer: "RoleGraphQLField" = RoleGraphQLField(
        "isAssignableToCustomer"
    )
    is_assignable_to_thread: "RoleGraphQLField" = RoleGraphQLField(
        "isAssignableToThread"
    )
    assignable_billing_seats: "RoleGraphQLField" = RoleGraphQLField(
        "assignableBillingSeats"
    )
    requires_billable_seat: "RoleGraphQLField" = RoleGraphQLField(
        "requiresBillableSeat"
    )
    key: "RoleGraphQLField" = RoleGraphQLField("key")

    def fields(self, *subfields: RoleGraphQLField) -> "RoleFields":
        """Subfields should come from the RoleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RoleFields":
        self._alias = alias
        return self


class RoleChangeCostFields(GraphQLField):
    @classmethod
    def total_price(cls) -> "PriceFields":
        return PriceFields("total_price")

    @classmethod
    def full_price(cls) -> "PriceFields":
        return PriceFields("full_price")

    @classmethod
    def adjusted_price(cls) -> "PriceFields":
        return PriceFields("adjusted_price")

    @classmethod
    def due_now_price(cls) -> "PriceFields":
        return PriceFields("due_now_price")

    quantity: "RoleChangeCostGraphQLField" = RoleChangeCostGraphQLField("quantity")
    interval_unit: "RoleChangeCostGraphQLField" = RoleChangeCostGraphQLField(
        "intervalUnit"
    )
    interval_count: "RoleChangeCostGraphQLField" = RoleChangeCostGraphQLField(
        "intervalCount"
    )
    adding_seat_type: "RoleChangeCostGraphQLField" = RoleChangeCostGraphQLField(
        "addingSeatType"
    )
    removing_seat_type: "RoleChangeCostGraphQLField" = RoleChangeCostGraphQLField(
        "removingSeatType"
    )

    def fields(
        self, *subfields: Union[RoleChangeCostGraphQLField, "PriceFields"]
    ) -> "RoleChangeCostFields":
        """Subfields should come from the RoleChangeCostFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RoleChangeCostFields":
        self._alias = alias
        return self


class RoleConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "RoleEdgeFields":
        return RoleEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            RoleConnectionGraphQLField, "PageInfoFields", "RoleEdgeFields"
        ]
    ) -> "RoleConnectionFields":
        """Subfields should come from the RoleConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RoleConnectionFields":
        self._alias = alias
        return self


class RoleEdgeFields(GraphQLField):
    cursor: "RoleEdgeGraphQLField" = RoleEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "RoleFields":
        return RoleFields("node")

    def fields(
        self, *subfields: Union[RoleEdgeGraphQLField, "RoleFields"]
    ) -> "RoleEdgeFields":
        """Subfields should come from the RoleEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "RoleEdgeFields":
        self._alias = alias
        return self


class SavedThreadsViewFields(GraphQLField):
    id: "SavedThreadsViewGraphQLField" = SavedThreadsViewGraphQLField("id")
    name: "SavedThreadsViewGraphQLField" = SavedThreadsViewGraphQLField("name")
    icon: "SavedThreadsViewGraphQLField" = SavedThreadsViewGraphQLField("icon")
    color: "SavedThreadsViewGraphQLField" = SavedThreadsViewGraphQLField("color")

    @classmethod
    def threads_filter(cls) -> "SavedThreadsViewFilterFields":
        return SavedThreadsViewFilterFields("threads_filter")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            SavedThreadsViewGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
            "SavedThreadsViewFilterFields",
        ]
    ) -> "SavedThreadsViewFields":
        """Subfields should come from the SavedThreadsViewFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavedThreadsViewFields":
        self._alias = alias
        return self


class SavedThreadsViewConnectionFields(GraphQLField):
    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    @classmethod
    def edges(cls) -> "SavedThreadsViewEdgeFields":
        return SavedThreadsViewEdgeFields("edges")

    def fields(
        self,
        *subfields: Union[
            SavedThreadsViewConnectionGraphQLField,
            "PageInfoFields",
            "SavedThreadsViewEdgeFields",
        ]
    ) -> "SavedThreadsViewConnectionFields":
        """Subfields should come from the SavedThreadsViewConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavedThreadsViewConnectionFields":
        self._alias = alias
        return self


class SavedThreadsViewEdgeFields(GraphQLField):
    cursor: "SavedThreadsViewEdgeGraphQLField" = SavedThreadsViewEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "SavedThreadsViewFields":
        return SavedThreadsViewFields("node")

    def fields(
        self,
        *subfields: Union[SavedThreadsViewEdgeGraphQLField, "SavedThreadsViewFields"]
    ) -> "SavedThreadsViewEdgeFields":
        """Subfields should come from the SavedThreadsViewEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavedThreadsViewEdgeFields":
        self._alias = alias
        return self


class SavedThreadsViewFilterFields(GraphQLField):
    statuses: "SavedThreadsViewFilterGraphQLField" = SavedThreadsViewFilterGraphQLField(
        "statuses"
    )
    status_details: "SavedThreadsViewFilterGraphQLField" = (
        SavedThreadsViewFilterGraphQLField("statusDetails")
    )
    priorities: "SavedThreadsViewFilterGraphQLField" = (
        SavedThreadsViewFilterGraphQLField("priorities")
    )
    assigned_to_user: "SavedThreadsViewFilterGraphQLField" = (
        SavedThreadsViewFilterGraphQLField("assignedToUser")
    )
    customer_groups: "SavedThreadsViewFilterGraphQLField" = (
        SavedThreadsViewFilterGraphQLField("customerGroups")
    )
    companies: "SavedThreadsViewFilterGraphQLField" = (
        SavedThreadsViewFilterGraphQLField("companies")
    )
    tenants: "SavedThreadsViewFilterGraphQLField" = SavedThreadsViewFilterGraphQLField(
        "tenants"
    )
    tiers: "SavedThreadsViewFilterGraphQLField" = SavedThreadsViewFilterGraphQLField(
        "tiers"
    )
    label_type_ids: "SavedThreadsViewFilterGraphQLField" = (
        SavedThreadsViewFilterGraphQLField("labelTypeIds")
    )
    message_source: "SavedThreadsViewFilterGraphQLField" = (
        SavedThreadsViewFilterGraphQLField("messageSource")
    )
    support_email_addresses: "SavedThreadsViewFilterGraphQLField" = (
        SavedThreadsViewFilterGraphQLField("supportEmailAddresses")
    )
    sla_types: "SavedThreadsViewFilterGraphQLField" = (
        SavedThreadsViewFilterGraphQLField("slaTypes")
    )
    sla_statuses: "SavedThreadsViewFilterGraphQLField" = (
        SavedThreadsViewFilterGraphQLField("slaStatuses")
    )

    @classmethod
    def thread_fields(cls) -> "SavedThreadsViewFilterThreadFieldFields":
        return SavedThreadsViewFilterThreadFieldFields("thread_fields")

    thread_link_group_ids: "SavedThreadsViewFilterGraphQLField" = (
        SavedThreadsViewFilterGraphQLField("threadLinkGroupIds")
    )

    @classmethod
    def sort(cls) -> "SavedThreadsViewSortFields":
        return SavedThreadsViewSortFields("sort")

    @classmethod
    def display_options(cls) -> "ThreadsDisplayOptionsFields":
        return ThreadsDisplayOptionsFields("display_options")

    group_by: "SavedThreadsViewFilterGraphQLField" = SavedThreadsViewFilterGraphQLField(
        "groupBy"
    )
    layout: "SavedThreadsViewFilterGraphQLField" = SavedThreadsViewFilterGraphQLField(
        "layout"
    )

    def fields(
        self,
        *subfields: Union[
            SavedThreadsViewFilterGraphQLField,
            "SavedThreadsViewFilterThreadFieldFields",
            "SavedThreadsViewSortFields",
            "ThreadsDisplayOptionsFields",
        ]
    ) -> "SavedThreadsViewFilterFields":
        """Subfields should come from the SavedThreadsViewFilterFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavedThreadsViewFilterFields":
        self._alias = alias
        return self


class SavedThreadsViewFilterThreadFieldFields(GraphQLField):
    key: "SavedThreadsViewFilterThreadFieldGraphQLField" = (
        SavedThreadsViewFilterThreadFieldGraphQLField("key")
    )
    string_value: "SavedThreadsViewFilterThreadFieldGraphQLField" = (
        SavedThreadsViewFilterThreadFieldGraphQLField("stringValue")
    )
    boolean_value: "SavedThreadsViewFilterThreadFieldGraphQLField" = (
        SavedThreadsViewFilterThreadFieldGraphQLField("booleanValue")
    )

    def fields(
        self, *subfields: SavedThreadsViewFilterThreadFieldGraphQLField
    ) -> "SavedThreadsViewFilterThreadFieldFields":
        """Subfields should come from the SavedThreadsViewFilterThreadFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavedThreadsViewFilterThreadFieldFields":
        self._alias = alias
        return self


class SavedThreadsViewSortFields(GraphQLField):
    field: "SavedThreadsViewSortGraphQLField" = SavedThreadsViewSortGraphQLField(
        "field"
    )
    direction: "SavedThreadsViewSortGraphQLField" = SavedThreadsViewSortGraphQLField(
        "direction"
    )

    def fields(
        self, *subfields: SavedThreadsViewSortGraphQLField
    ) -> "SavedThreadsViewSortFields":
        """Subfields should come from the SavedThreadsViewSortFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SavedThreadsViewSortFields":
        self._alias = alias
        return self


class SendBulkEmailOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self, *subfields: Union[SendBulkEmailOutputGraphQLField, "MutationErrorFields"]
    ) -> "SendBulkEmailOutputFields":
        """Subfields should come from the SendBulkEmailOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SendBulkEmailOutputFields":
        self._alias = alias
        return self


class SendChatOutputFields(GraphQLField):
    @classmethod
    def chat(cls) -> "ChatFields":
        return ChatFields("chat")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            SendChatOutputGraphQLField, "ChatFields", "MutationErrorFields"
        ]
    ) -> "SendChatOutputFields":
        """Subfields should come from the SendChatOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SendChatOutputFields":
        self._alias = alias
        return self


class SendCustomerChatOutputFields(GraphQLField):
    @classmethod
    def chat(cls) -> "ChatFields":
        return ChatFields("chat")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            SendCustomerChatOutputGraphQLField, "ChatFields", "MutationErrorFields"
        ]
    ) -> "SendCustomerChatOutputFields":
        """Subfields should come from the SendCustomerChatOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SendCustomerChatOutputFields":
        self._alias = alias
        return self


class SendDiscordMessageOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[SendDiscordMessageOutputGraphQLField, "MutationErrorFields"]
    ) -> "SendDiscordMessageOutputFields":
        """Subfields should come from the SendDiscordMessageOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SendDiscordMessageOutputFields":
        self._alias = alias
        return self


class SendMSTeamsMessageOutputFields(GraphQLField):
    @classmethod
    def ms_teams_message(cls) -> "MSTeamsMessageFields":
        return MSTeamsMessageFields("ms_teams_message")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            SendMSTeamsMessageOutputGraphQLField,
            "MSTeamsMessageFields",
            "MutationErrorFields",
        ]
    ) -> "SendMSTeamsMessageOutputFields":
        """Subfields should come from the SendMSTeamsMessageOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SendMSTeamsMessageOutputFields":
        self._alias = alias
        return self


class SendNewEmailOutputFields(GraphQLField):
    @classmethod
    def email(cls) -> "EmailFields":
        return EmailFields("email")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            SendNewEmailOutputGraphQLField, "EmailFields", "MutationErrorFields"
        ]
    ) -> "SendNewEmailOutputFields":
        """Subfields should come from the SendNewEmailOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SendNewEmailOutputFields":
        self._alias = alias
        return self


class SendSlackMessageOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[SendSlackMessageOutputGraphQLField, "MutationErrorFields"]
    ) -> "SendSlackMessageOutputFields":
        """Subfields should come from the SendSlackMessageOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SendSlackMessageOutputFields":
        self._alias = alias
        return self


class SendThreadDiscussionMessageOutputFields(GraphQLField):
    @classmethod
    def thread_discussion_message(cls) -> "ThreadDiscussionMessageFields":
        return ThreadDiscussionMessageFields("thread_discussion_message")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            SendThreadDiscussionMessageOutputGraphQLField,
            "MutationErrorFields",
            "ThreadDiscussionMessageFields",
        ]
    ) -> "SendThreadDiscussionMessageOutputFields":
        """Subfields should come from the SendThreadDiscussionMessageOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SendThreadDiscussionMessageOutputFields":
        self._alias = alias
        return self


class ServiceAuthorizationFields(GraphQLField):
    id: "ServiceAuthorizationGraphQLField" = ServiceAuthorizationGraphQLField("id")

    @classmethod
    def service_integration(cls) -> "ServiceIntegrationInterface":
        return ServiceIntegrationInterface("service_integration")

    status: "ServiceAuthorizationGraphQLField" = ServiceAuthorizationGraphQLField(
        "status"
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    @classmethod
    def connected_at(cls) -> "DateTimeFields":
        return DateTimeFields("connected_at")

    connected_by: "InternalActorUnion" = InternalActorUnion("connectedBy")

    def fields(
        self,
        *subfields: Union[
            ServiceAuthorizationGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
            "ServiceIntegrationInterface",
        ]
    ) -> "ServiceAuthorizationFields":
        """Subfields should come from the ServiceAuthorizationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ServiceAuthorizationFields":
        self._alias = alias
        return self


class ServiceAuthorizationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ServiceAuthorizationEdgeFields":
        return ServiceAuthorizationEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            ServiceAuthorizationConnectionGraphQLField,
            "PageInfoFields",
            "ServiceAuthorizationEdgeFields",
        ]
    ) -> "ServiceAuthorizationConnectionFields":
        """Subfields should come from the ServiceAuthorizationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ServiceAuthorizationConnectionFields":
        self._alias = alias
        return self


class ServiceAuthorizationConnectionDetailsFields(GraphQLField):
    service_integration_key: "ServiceAuthorizationConnectionDetailsGraphQLField" = (
        ServiceAuthorizationConnectionDetailsGraphQLField("serviceIntegrationKey")
    )
    service_authorization_id: "ServiceAuthorizationConnectionDetailsGraphQLField" = (
        ServiceAuthorizationConnectionDetailsGraphQLField("serviceAuthorizationId")
    )
    hmac_digest: "ServiceAuthorizationConnectionDetailsGraphQLField" = (
        ServiceAuthorizationConnectionDetailsGraphQLField("hmacDigest")
    )

    def fields(
        self, *subfields: ServiceAuthorizationConnectionDetailsGraphQLField
    ) -> "ServiceAuthorizationConnectionDetailsFields":
        """Subfields should come from the ServiceAuthorizationConnectionDetailsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ServiceAuthorizationConnectionDetailsFields":
        self._alias = alias
        return self


class ServiceAuthorizationEdgeFields(GraphQLField):
    cursor: "ServiceAuthorizationEdgeGraphQLField" = (
        ServiceAuthorizationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "ServiceAuthorizationFields":
        return ServiceAuthorizationFields("node")

    def fields(
        self,
        *subfields: Union[
            ServiceAuthorizationEdgeGraphQLField, "ServiceAuthorizationFields"
        ]
    ) -> "ServiceAuthorizationEdgeFields":
        """Subfields should come from the ServiceAuthorizationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ServiceAuthorizationEdgeFields":
        self._alias = alias
        return self


class ServiceLevelAgreementStatusDetailAchievedFields(GraphQLField):
    @classmethod
    def achieved_at(cls) -> "DateTimeFields":
        return DateTimeFields("achieved_at")

    def fields(
        self,
        *subfields: Union[
            ServiceLevelAgreementStatusDetailAchievedGraphQLField, "DateTimeFields"
        ]
    ) -> "ServiceLevelAgreementStatusDetailAchievedFields":
        """Subfields should come from the ServiceLevelAgreementStatusDetailAchievedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ServiceLevelAgreementStatusDetailAchievedFields":
        self._alias = alias
        return self


class ServiceLevelAgreementStatusDetailBreachedFields(GraphQLField):
    @classmethod
    def breached_at(cls) -> "DateTimeFields":
        return DateTimeFields("breached_at")

    @classmethod
    def completed_at(cls) -> "DateTimeFields":
        return DateTimeFields("completed_at")

    def fields(
        self,
        *subfields: Union[
            ServiceLevelAgreementStatusDetailBreachedGraphQLField, "DateTimeFields"
        ]
    ) -> "ServiceLevelAgreementStatusDetailBreachedFields":
        """Subfields should come from the ServiceLevelAgreementStatusDetailBreachedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ServiceLevelAgreementStatusDetailBreachedFields":
        self._alias = alias
        return self


class ServiceLevelAgreementStatusDetailBreachingFields(GraphQLField):
    @classmethod
    def breached_at(cls) -> "DateTimeFields":
        return DateTimeFields("breached_at")

    def fields(
        self,
        *subfields: Union[
            ServiceLevelAgreementStatusDetailBreachingGraphQLField, "DateTimeFields"
        ]
    ) -> "ServiceLevelAgreementStatusDetailBreachingFields":
        """Subfields should come from the ServiceLevelAgreementStatusDetailBreachingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ServiceLevelAgreementStatusDetailBreachingFields":
        self._alias = alias
        return self


class ServiceLevelAgreementStatusDetailCancelledFields(GraphQLField):
    @classmethod
    def cancelled_at(cls) -> "DateTimeFields":
        return DateTimeFields("cancelled_at")

    def fields(
        self,
        *subfields: Union[
            ServiceLevelAgreementStatusDetailCancelledGraphQLField, "DateTimeFields"
        ]
    ) -> "ServiceLevelAgreementStatusDetailCancelledFields":
        """Subfields should come from the ServiceLevelAgreementStatusDetailCancelledFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ServiceLevelAgreementStatusDetailCancelledFields":
        self._alias = alias
        return self


class ServiceLevelAgreementStatusDetailImminentBreachFields(GraphQLField):
    @classmethod
    def breaching_at(cls) -> "DateTimeFields":
        return DateTimeFields("breaching_at")

    def fields(
        self,
        *subfields: Union[
            ServiceLevelAgreementStatusDetailImminentBreachGraphQLField,
            "DateTimeFields",
        ]
    ) -> "ServiceLevelAgreementStatusDetailImminentBreachFields":
        """Subfields should come from the ServiceLevelAgreementStatusDetailImminentBreachFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(
        self, alias: str
    ) -> "ServiceLevelAgreementStatusDetailImminentBreachFields":
        self._alias = alias
        return self


class ServiceLevelAgreementStatusDetailPendingFields(GraphQLField):
    @classmethod
    def breaching_at(cls) -> "DateTimeFields":
        return DateTimeFields("breaching_at")

    def fields(
        self,
        *subfields: Union[
            ServiceLevelAgreementStatusDetailPendingGraphQLField, "DateTimeFields"
        ]
    ) -> "ServiceLevelAgreementStatusDetailPendingFields":
        """Subfields should come from the ServiceLevelAgreementStatusDetailPendingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ServiceLevelAgreementStatusDetailPendingFields":
        self._alias = alias
        return self


class ServiceLevelAgreementStatusSummaryFields(GraphQLField):
    first_response_time: "ServiceLevelAgreementStatusDetailUnion" = (
        ServiceLevelAgreementStatusDetailUnion("firstResponseTime")
    )
    next_response_time: "ServiceLevelAgreementStatusDetailUnion" = (
        ServiceLevelAgreementStatusDetailUnion("nextResponseTime")
    )

    def fields(
        self,
        *subfields: Union[
            ServiceLevelAgreementStatusSummaryGraphQLField,
            "ServiceLevelAgreementStatusDetailUnion",
        ]
    ) -> "ServiceLevelAgreementStatusSummaryFields":
        """Subfields should come from the ServiceLevelAgreementStatusSummaryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ServiceLevelAgreementStatusSummaryFields":
        self._alias = alias
        return self


class ServiceLevelAgreementStatusTransitionedEntryFields(GraphQLField):
    previous_status: "ServiceLevelAgreementStatusTransitionedEntryGraphQLField" = (
        ServiceLevelAgreementStatusTransitionedEntryGraphQLField("previousStatus")
    )
    next_status: "ServiceLevelAgreementStatusTransitionedEntryGraphQLField" = (
        ServiceLevelAgreementStatusTransitionedEntryGraphQLField("nextStatus")
    )

    @classmethod
    def service_level_agreement(cls) -> "ServiceLevelAgreementInterface":
        return ServiceLevelAgreementInterface("service_level_agreement")

    def fields(
        self,
        *subfields: Union[
            ServiceLevelAgreementStatusTransitionedEntryGraphQLField,
            "ServiceLevelAgreementInterface",
        ]
    ) -> "ServiceLevelAgreementStatusTransitionedEntryFields":
        """Subfields should come from the ServiceLevelAgreementStatusTransitionedEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ServiceLevelAgreementStatusTransitionedEntryFields":
        self._alias = alias
        return self


class SetCustomerTenantsOutputFields(GraphQLField):
    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            SetCustomerTenantsOutputGraphQLField,
            "CustomerFields",
            "MutationErrorFields",
        ]
    ) -> "SetCustomerTenantsOutputFields":
        """Subfields should come from the SetCustomerTenantsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SetCustomerTenantsOutputFields":
        self._alias = alias
        return self


class SettingScopeFields(GraphQLField):
    id: "SettingScopeGraphQLField" = SettingScopeGraphQLField("id")
    scope_type: "SettingScopeGraphQLField" = SettingScopeGraphQLField("scopeType")

    def fields(self, *subfields: SettingScopeGraphQLField) -> "SettingScopeFields":
        """Subfields should come from the SettingScopeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SettingScopeFields":
        self._alias = alias
        return self


class ShareThreadToUserInSlackOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ShareThreadToUserInSlackOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "ShareThreadToUserInSlackOutputFields":
        """Subfields should come from the ShareThreadToUserInSlackOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ShareThreadToUserInSlackOutputFields":
        self._alias = alias
        return self


class SingleValueMetricFields(GraphQLField):
    @classmethod
    def values(cls) -> "SingleValueMetricValueFields":
        return SingleValueMetricValueFields("values")

    def fields(
        self,
        *subfields: Union[SingleValueMetricGraphQLField, "SingleValueMetricValueFields"]
    ) -> "SingleValueMetricFields":
        """Subfields should come from the SingleValueMetricFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SingleValueMetricFields":
        self._alias = alias
        return self


class SingleValueMetricValueFields(GraphQLField):
    value: "SingleValueMetricValueGraphQLField" = SingleValueMetricValueGraphQLField(
        "value"
    )

    @classmethod
    def dimension(cls) -> "MetricDimensionFields":
        return MetricDimensionFields("dimension")

    user_id: "SingleValueMetricValueGraphQLField" = SingleValueMetricValueGraphQLField(
        "userId"
    )

    def fields(
        self,
        *subfields: Union[SingleValueMetricValueGraphQLField, "MetricDimensionFields"]
    ) -> "SingleValueMetricValueFields":
        """Subfields should come from the SingleValueMetricValueFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SingleValueMetricValueFields":
        self._alias = alias
        return self


class SlackMessageEntryFields(GraphQLField):
    slack_message_link: "SlackMessageEntryGraphQLField" = SlackMessageEntryGraphQLField(
        "slackMessageLink"
    )
    text: "SlackMessageEntryGraphQLField" = SlackMessageEntryGraphQLField("text")
    customer_id: "SlackMessageEntryGraphQLField" = SlackMessageEntryGraphQLField(
        "customerId"
    )

    @classmethod
    def related_thread(cls) -> "SlackMessageEntryRelatedThreadFields":
        return SlackMessageEntryRelatedThreadFields("related_thread")

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    @classmethod
    def last_edited_on_slack_at(cls) -> "DateTimeFields":
        return DateTimeFields("last_edited_on_slack_at")

    @classmethod
    def deleted_on_slack_at(cls) -> "DateTimeFields":
        return DateTimeFields("deleted_on_slack_at")

    @classmethod
    def reactions(cls) -> "SlackReactionFields":
        return SlackReactionFields("reactions")

    def fields(
        self,
        *subfields: Union[
            SlackMessageEntryGraphQLField,
            "AttachmentFields",
            "DateTimeFields",
            "SlackMessageEntryRelatedThreadFields",
            "SlackReactionFields",
        ]
    ) -> "SlackMessageEntryFields":
        """Subfields should come from the SlackMessageEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SlackMessageEntryFields":
        self._alias = alias
        return self


class SlackMessageEntryRelatedThreadFields(GraphQLField):
    thread_id: "SlackMessageEntryRelatedThreadGraphQLField" = (
        SlackMessageEntryRelatedThreadGraphQLField("threadId")
    )

    def fields(
        self, *subfields: SlackMessageEntryRelatedThreadGraphQLField
    ) -> "SlackMessageEntryRelatedThreadFields":
        """Subfields should come from the SlackMessageEntryRelatedThreadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SlackMessageEntryRelatedThreadFields":
        self._alias = alias
        return self


class SlackReactionFields(GraphQLField):
    name: "SlackReactionGraphQLField" = SlackReactionGraphQLField("name")
    actors: "ActorUnion" = ActorUnion("actors")
    image_url: "SlackReactionGraphQLField" = SlackReactionGraphQLField("imageUrl")

    def fields(
        self, *subfields: Union[SlackReactionGraphQLField, "ActorUnion"]
    ) -> "SlackReactionFields":
        """Subfields should come from the SlackReactionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SlackReactionFields":
        self._alias = alias
        return self


class SlackReplyEntryFields(GraphQLField):
    slack_message_link: "SlackReplyEntryGraphQLField" = SlackReplyEntryGraphQLField(
        "slackMessageLink"
    )
    customer_id: "SlackReplyEntryGraphQLField" = SlackReplyEntryGraphQLField(
        "customerId"
    )
    text: "SlackReplyEntryGraphQLField" = SlackReplyEntryGraphQLField("text")

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    @classmethod
    def last_edited_on_slack_at(cls) -> "DateTimeFields":
        return DateTimeFields("last_edited_on_slack_at")

    @classmethod
    def deleted_on_slack_at(cls) -> "DateTimeFields":
        return DateTimeFields("deleted_on_slack_at")

    @classmethod
    def reactions(cls) -> "SlackReactionFields":
        return SlackReactionFields("reactions")

    def fields(
        self,
        *subfields: Union[
            SlackReplyEntryGraphQLField,
            "AttachmentFields",
            "DateTimeFields",
            "SlackReactionFields",
        ]
    ) -> "SlackReplyEntryFields":
        """Subfields should come from the SlackReplyEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SlackReplyEntryFields":
        self._alias = alias
        return self


class SlackThreadChannelAssociationFields(GraphQLField):
    id: "SlackThreadChannelAssociationGraphQLField" = (
        SlackThreadChannelAssociationGraphQLField("id")
    )
    company_id: "SlackThreadChannelAssociationGraphQLField" = (
        SlackThreadChannelAssociationGraphQLField("companyId")
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")
    connected_slack_channel_id: "SlackThreadChannelAssociationGraphQLField" = (
        SlackThreadChannelAssociationGraphQLField("connectedSlackChannelId")
    )

    def fields(
        self,
        *subfields: Union[
            SlackThreadChannelAssociationGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
        ]
    ) -> "SlackThreadChannelAssociationFields":
        """Subfields should come from the SlackThreadChannelAssociationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SlackThreadChannelAssociationFields":
        self._alias = alias
        return self


class SlackThreadChannelDetailsFields(GraphQLField):
    slack_channel_id: "SlackThreadChannelDetailsGraphQLField" = (
        SlackThreadChannelDetailsGraphQLField("slackChannelId")
    )
    slack_channel_name: "SlackThreadChannelDetailsGraphQLField" = (
        SlackThreadChannelDetailsGraphQLField("slackChannelName")
    )
    slack_team_id: "SlackThreadChannelDetailsGraphQLField" = (
        SlackThreadChannelDetailsGraphQLField("slackTeamId")
    )
    slack_team_name: "SlackThreadChannelDetailsGraphQLField" = (
        SlackThreadChannelDetailsGraphQLField("slackTeamName")
    )

    def fields(
        self, *subfields: SlackThreadChannelDetailsGraphQLField
    ) -> "SlackThreadChannelDetailsFields":
        """Subfields should come from the SlackThreadChannelDetailsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SlackThreadChannelDetailsFields":
        self._alias = alias
        return self


class SlackUserFields(GraphQLField):
    id: "SlackUserGraphQLField" = SlackUserGraphQLField("id")
    slack_user_id: "SlackUserGraphQLField" = SlackUserGraphQLField("slackUserId")
    slack_avatar_url_72_px: "SlackUserGraphQLField" = SlackUserGraphQLField(
        "slackAvatarUrl72px"
    )
    slack_handle: "SlackUserGraphQLField" = SlackUserGraphQLField("slackHandle")
    full_name: "SlackUserGraphQLField" = SlackUserGraphQLField("fullName")
    is_in_channel: "SlackUserGraphQLField" = SlackUserGraphQLField("isInChannel")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[SlackUserGraphQLField, "DateTimeFields", "InternalActorUnion"]
    ) -> "SlackUserFields":
        """Subfields should come from the SlackUserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SlackUserFields":
        self._alias = alias
        return self


class SlackUserConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SlackUserEdgeFields":
        return SlackUserEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            SlackUserConnectionGraphQLField, "PageInfoFields", "SlackUserEdgeFields"
        ]
    ) -> "SlackUserConnectionFields":
        """Subfields should come from the SlackUserConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SlackUserConnectionFields":
        self._alias = alias
        return self


class SlackUserEdgeFields(GraphQLField):
    cursor: "SlackUserEdgeGraphQLField" = SlackUserEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "SlackUserFields":
        return SlackUserFields("node")

    def fields(
        self, *subfields: Union[SlackUserEdgeGraphQLField, "SlackUserFields"]
    ) -> "SlackUserEdgeFields":
        """Subfields should come from the SlackUserEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SlackUserEdgeFields":
        self._alias = alias
        return self


class SlackUserIdentityFields(GraphQLField):
    slack_team_id: "SlackUserIdentityGraphQLField" = SlackUserIdentityGraphQLField(
        "slackTeamId"
    )
    slack_user_id: "SlackUserIdentityGraphQLField" = SlackUserIdentityGraphQLField(
        "slackUserId"
    )

    def fields(
        self, *subfields: SlackUserIdentityGraphQLField
    ) -> "SlackUserIdentityFields":
        """Subfields should come from the SlackUserIdentityFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SlackUserIdentityFields":
        self._alias = alias
        return self


class SnippetFields(GraphQLField):
    id: "SnippetGraphQLField" = SnippetGraphQLField("id")
    name: "SnippetGraphQLField" = SnippetGraphQLField("name")
    text: "SnippetGraphQLField" = SnippetGraphQLField("text")
    markdown: "SnippetGraphQLField" = SnippetGraphQLField("markdown")
    path: "SnippetGraphQLField" = SnippetGraphQLField("path")
    is_deleted: "SnippetGraphQLField" = SnippetGraphQLField("isDeleted")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    @classmethod
    def deleted_at(cls) -> "DateTimeFields":
        return DateTimeFields("deleted_at")

    deleted_by: "InternalActorUnion" = InternalActorUnion("deletedBy")

    def fields(
        self,
        *subfields: Union[SnippetGraphQLField, "DateTimeFields", "InternalActorUnion"]
    ) -> "SnippetFields":
        """Subfields should come from the SnippetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SnippetFields":
        self._alias = alias
        return self


class SnippetConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "SnippetEdgeFields":
        return SnippetEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            SnippetConnectionGraphQLField, "PageInfoFields", "SnippetEdgeFields"
        ]
    ) -> "SnippetConnectionFields":
        """Subfields should come from the SnippetConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SnippetConnectionFields":
        self._alias = alias
        return self


class SnippetEdgeFields(GraphQLField):
    cursor: "SnippetEdgeGraphQLField" = SnippetEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "SnippetFields":
        return SnippetFields("node")

    def fields(
        self, *subfields: Union[SnippetEdgeGraphQLField, "SnippetFields"]
    ) -> "SnippetEdgeFields":
        """Subfields should come from the SnippetEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SnippetEdgeFields":
        self._alias = alias
        return self


class SnoozeThreadOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            SnoozeThreadOutputGraphQLField, "MutationErrorFields", "ThreadFields"
        ]
    ) -> "SnoozeThreadOutputFields":
        """Subfields should come from the SnoozeThreadOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SnoozeThreadOutputFields":
        self._alias = alias
        return self


class StartServiceAuthorizationOutputFields(GraphQLField):
    @classmethod
    def connection_details(cls) -> "ServiceAuthorizationConnectionDetailsFields":
        return ServiceAuthorizationConnectionDetailsFields("connection_details")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            StartServiceAuthorizationOutputGraphQLField,
            "MutationErrorFields",
            "ServiceAuthorizationConnectionDetailsFields",
        ]
    ) -> "StartServiceAuthorizationOutputFields":
        """Subfields should come from the StartServiceAuthorizationOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StartServiceAuthorizationOutputFields":
        self._alias = alias
        return self


class StringSettingFields(GraphQLField):
    code: "StringSettingGraphQLField" = StringSettingGraphQLField("code")
    string_value: "StringSettingGraphQLField" = StringSettingGraphQLField("stringValue")

    @classmethod
    def scope(cls) -> "SettingScopeFields":
        return SettingScopeFields("scope")

    def fields(
        self, *subfields: Union[StringSettingGraphQLField, "SettingScopeFields"]
    ) -> "StringSettingFields":
        """Subfields should come from the StringSettingFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "StringSettingFields":
        self._alias = alias
        return self


class SubscriptionEventTypeFields(GraphQLField):
    event_type: "SubscriptionEventTypeGraphQLField" = SubscriptionEventTypeGraphQLField(
        "eventType"
    )
    description: "SubscriptionEventTypeGraphQLField" = (
        SubscriptionEventTypeGraphQLField("description")
    )

    def fields(
        self, *subfields: SubscriptionEventTypeGraphQLField
    ) -> "SubscriptionEventTypeFields":
        """Subfields should come from the SubscriptionEventTypeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SubscriptionEventTypeFields":
        self._alias = alias
        return self


class SupportEmailAddressEmailActorFields(GraphQLField):
    support_email_address: "SupportEmailAddressEmailActorGraphQLField" = (
        SupportEmailAddressEmailActorGraphQLField("supportEmailAddress")
    )

    def fields(
        self, *subfields: SupportEmailAddressEmailActorGraphQLField
    ) -> "SupportEmailAddressEmailActorFields":
        """Subfields should come from the SupportEmailAddressEmailActorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SupportEmailAddressEmailActorFields":
        self._alias = alias
        return self


class SyncBusinessHoursSlotsOutputFields(GraphQLField):
    @classmethod
    def slots(cls) -> "BusinessHoursSlotFields":
        return BusinessHoursSlotFields("slots")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            SyncBusinessHoursSlotsOutputGraphQLField,
            "BusinessHoursSlotFields",
            "MutationErrorFields",
        ]
    ) -> "SyncBusinessHoursSlotsOutputFields":
        """Subfields should come from the SyncBusinessHoursSlotsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SyncBusinessHoursSlotsOutputFields":
        self._alias = alias
        return self


class SystemFields(GraphQLField):
    id: "SystemGraphQLField" = SystemGraphQLField("id")

    def fields(self, *subfields: SystemGraphQLField) -> "SystemFields":
        """Subfields should come from the SystemFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SystemFields":
        self._alias = alias
        return self


class SystemActorFields(GraphQLField):
    system_id: "SystemActorGraphQLField" = SystemActorGraphQLField("systemId")

    def fields(self, *subfields: SystemActorGraphQLField) -> "SystemActorFields":
        """Subfields should come from the SystemActorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "SystemActorFields":
        self._alias = alias
        return self


class TenantFields(GraphQLField):
    id: "TenantGraphQLField" = TenantGraphQLField("id")
    name: "TenantGraphQLField" = TenantGraphQLField("name")
    external_id: "TenantGraphQLField" = TenantGraphQLField("externalId")
    url: "TenantGraphQLField" = TenantGraphQLField("url")

    @classmethod
    def tier(cls) -> "TierFields":
        return TierFields("tier")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            TenantGraphQLField, "DateTimeFields", "InternalActorUnion", "TierFields"
        ]
    ) -> "TenantFields":
        """Subfields should come from the TenantFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TenantFields":
        self._alias = alias
        return self


class TenantConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "TenantEdgeFields":
        return TenantEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            TenantConnectionGraphQLField, "PageInfoFields", "TenantEdgeFields"
        ]
    ) -> "TenantConnectionFields":
        """Subfields should come from the TenantConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TenantConnectionFields":
        self._alias = alias
        return self


class TenantEdgeFields(GraphQLField):
    cursor: "TenantEdgeGraphQLField" = TenantEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "TenantFields":
        return TenantFields("node")

    def fields(
        self, *subfields: Union[TenantEdgeGraphQLField, "TenantFields"]
    ) -> "TenantEdgeFields":
        """Subfields should come from the TenantEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TenantEdgeFields":
        self._alias = alias
        return self


class TenantSearchResultFields(GraphQLField):
    @classmethod
    def tenant(cls) -> "TenantFields":
        return TenantFields("tenant")

    def fields(
        self, *subfields: Union[TenantSearchResultGraphQLField, "TenantFields"]
    ) -> "TenantSearchResultFields":
        """Subfields should come from the TenantSearchResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TenantSearchResultFields":
        self._alias = alias
        return self


class TenantSearchResultConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "TenantSearchResultEdgeFields":
        return TenantSearchResultEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            TenantSearchResultConnectionGraphQLField,
            "PageInfoFields",
            "TenantSearchResultEdgeFields",
        ]
    ) -> "TenantSearchResultConnectionFields":
        """Subfields should come from the TenantSearchResultConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TenantSearchResultConnectionFields":
        self._alias = alias
        return self


class TenantSearchResultEdgeFields(GraphQLField):
    cursor: "TenantSearchResultEdgeGraphQLField" = TenantSearchResultEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "TenantSearchResultFields":
        return TenantSearchResultFields("node")

    def fields(
        self,
        *subfields: Union[
            TenantSearchResultEdgeGraphQLField, "TenantSearchResultFields"
        ]
    ) -> "TenantSearchResultEdgeFields":
        """Subfields should come from the TenantSearchResultEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TenantSearchResultEdgeFields":
        self._alias = alias
        return self


class TenantTierMembershipFields(GraphQLField):
    id: "TenantTierMembershipGraphQLField" = TenantTierMembershipGraphQLField("id")
    tier_id: "TenantTierMembershipGraphQLField" = TenantTierMembershipGraphQLField(
        "tierId"
    )
    tenant_id: "TenantTierMembershipGraphQLField" = TenantTierMembershipGraphQLField(
        "tenantId"
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            TenantTierMembershipGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "TenantTierMembershipFields":
        """Subfields should come from the TenantTierMembershipFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TenantTierMembershipFields":
        self._alias = alias
        return self


class ThreadFields(GraphQLField):
    id: "ThreadGraphQLField" = ThreadGraphQLField("id")

    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    title: "ThreadGraphQLField" = ThreadGraphQLField("title")
    description: "ThreadGraphQLField" = ThreadGraphQLField("description")
    preview_text: "ThreadGraphQLField" = ThreadGraphQLField("previewText")
    priority: "ThreadGraphQLField" = ThreadGraphQLField("priority")
    external_id: "ThreadGraphQLField" = ThreadGraphQLField("externalId")
    status: "ThreadGraphQLField" = ThreadGraphQLField("status")

    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    status_changed_by: "ActorUnion" = ActorUnion("statusChangedBy")
    status_detail: "ThreadStatusDetailUnion" = ThreadStatusDetailUnion("statusDetail")
    assigned_to: "ThreadAssigneeUnion" = ThreadAssigneeUnion("assignedTo")

    @classmethod
    def assigned_at(cls) -> "DateTimeFields":
        return DateTimeFields("assigned_at")

    additional_assignees: "ThreadAssigneeUnion" = ThreadAssigneeUnion(
        "additionalAssignees"
    )

    @classmethod
    def labels(cls) -> "LabelFields":
        return LabelFields("labels")

    @classmethod
    def links(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> "ThreadLinkConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadLinkConnectionFields("links", arguments=cleared_arguments)

    @classmethod
    def thread_fields(cls) -> "ThreadFieldFields":
        return ThreadFieldFields("thread_fields")

    @classmethod
    def thread_discussions(cls) -> "ThreadDiscussionFields":
        return ThreadDiscussionFields("thread_discussions")

    @classmethod
    def timeline_entries(
        cls,
        *,
        filters: Optional[ThreadTimelineEntriesFilter] = None,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> "TimelineEntryConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "filters": {"type": "ThreadTimelineEntriesFilter", "value": filters},
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TimelineEntryConnectionFields(
            "timeline_entries", arguments=cleared_arguments
        )

    @classmethod
    def first_inbound_message_info(cls) -> "ThreadMessageInfoFields":
        return ThreadMessageInfoFields("first_inbound_message_info")

    @classmethod
    def first_outbound_message_info(cls) -> "ThreadMessageInfoFields":
        return ThreadMessageInfoFields("first_outbound_message_info")

    @classmethod
    def last_inbound_message_info(cls) -> "ThreadMessageInfoFields":
        return ThreadMessageInfoFields("last_inbound_message_info")

    @classmethod
    def last_outbound_message_info(cls) -> "ThreadMessageInfoFields":
        return ThreadMessageInfoFields("last_outbound_message_info")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "ActorUnion" = ActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "ActorUnion" = ActorUnion("updatedBy")
    support_email_addresses: "ThreadGraphQLField" = ThreadGraphQLField(
        "supportEmailAddresses"
    )

    @classmethod
    def tenant(cls) -> "TenantFields":
        return TenantFields("tenant")

    @classmethod
    def tier(cls) -> "TierFields":
        return TierFields("tier")

    @classmethod
    def service_level_agreement_status_summary(
        cls,
    ) -> "ServiceLevelAgreementStatusSummaryFields":
        return ServiceLevelAgreementStatusSummaryFields(
            "service_level_agreement_status_summary"
        )

    channel: "ThreadGraphQLField" = ThreadGraphQLField("channel")
    channel_details: "ThreadChannelDetailsUnion" = ThreadChannelDetailsUnion(
        "channelDetails"
    )

    def fields(
        self,
        *subfields: Union[
            ThreadGraphQLField,
            "ActorUnion",
            "CustomerFields",
            "DateTimeFields",
            "LabelFields",
            "ServiceLevelAgreementStatusSummaryFields",
            "TenantFields",
            "ThreadAssigneeUnion",
            "ThreadChannelDetailsUnion",
            "ThreadDiscussionFields",
            "ThreadFieldFields",
            "ThreadLinkConnectionFields",
            "ThreadMessageInfoFields",
            "ThreadStatusDetailUnion",
            "TierFields",
            "TimelineEntryConnectionFields",
        ]
    ) -> "ThreadFields":
        """Subfields should come from the ThreadFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadFields":
        self._alias = alias
        return self


class ThreadAdditionalAssigneesTransitionedEntryFields(GraphQLField):
    previous_assignees: "ThreadAssigneeUnion" = ThreadAssigneeUnion("previousAssignees")
    next_assignees: "ThreadAssigneeUnion" = ThreadAssigneeUnion("nextAssignees")

    def fields(
        self,
        *subfields: Union[
            ThreadAdditionalAssigneesTransitionedEntryGraphQLField,
            "ThreadAssigneeUnion",
        ]
    ) -> "ThreadAdditionalAssigneesTransitionedEntryFields":
        """Subfields should come from the ThreadAdditionalAssigneesTransitionedEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadAdditionalAssigneesTransitionedEntryFields":
        self._alias = alias
        return self


class ThreadAssignmentTransitionedEntryFields(GraphQLField):
    previous_assignee: "ThreadAssigneeUnion" = ThreadAssigneeUnion("previousAssignee")
    next_assignee: "ThreadAssigneeUnion" = ThreadAssigneeUnion("nextAssignee")

    def fields(
        self,
        *subfields: Union[
            ThreadAssignmentTransitionedEntryGraphQLField, "ThreadAssigneeUnion"
        ]
    ) -> "ThreadAssignmentTransitionedEntryFields":
        """Subfields should come from the ThreadAssignmentTransitionedEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadAssignmentTransitionedEntryFields":
        self._alias = alias
        return self


class ThreadChannelAssociationInterface(GraphQLField):
    id: "ThreadChannelAssociationGraphQLField" = ThreadChannelAssociationGraphQLField(
        "id"
    )
    company_id: "ThreadChannelAssociationGraphQLField" = (
        ThreadChannelAssociationGraphQLField("companyId")
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            ThreadChannelAssociationGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "ThreadChannelAssociationInterface":
        """Subfields should come from the ThreadChannelAssociationInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadChannelAssociationInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "ThreadChannelAssociationInterface":
        self._inline_fragments[type_name] = subfields
        return self


class ThreadClusterFields(GraphQLField):
    id: "ThreadClusterGraphQLField" = ThreadClusterGraphQLField("id")
    title: "ThreadClusterGraphQLField" = ThreadClusterGraphQLField("title")
    description: "ThreadClusterGraphQLField" = ThreadClusterGraphQLField("description")
    category: "ThreadClusterGraphQLField" = ThreadClusterGraphQLField("category")
    sentiment: "ThreadClusterGraphQLField" = ThreadClusterGraphQLField("sentiment")
    emoji: "ThreadClusterGraphQLField" = ThreadClusterGraphQLField("emoji")
    mean_distance: "ThreadClusterGraphQLField" = ThreadClusterGraphQLField(
        "meanDistance"
    )

    @classmethod
    def threads(cls) -> "ThreadWithDistanceFields":
        return ThreadWithDistanceFields("threads")

    def fields(
        self, *subfields: Union[ThreadClusterGraphQLField, "ThreadWithDistanceFields"]
    ) -> "ThreadClusterFields":
        """Subfields should come from the ThreadClusterFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadClusterFields":
        self._alias = alias
        return self


class ThreadConnectionFields(GraphQLField):
    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    @classmethod
    def edges(cls) -> "ThreadEdgeFields":
        return ThreadEdgeFields("edges")

    total_count: "ThreadConnectionGraphQLField" = ThreadConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            ThreadConnectionGraphQLField, "PageInfoFields", "ThreadEdgeFields"
        ]
    ) -> "ThreadConnectionFields":
        """Subfields should come from the ThreadConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadConnectionFields":
        self._alias = alias
        return self


class ThreadDiscussionFields(GraphQLField):
    id: "ThreadDiscussionGraphQLField" = ThreadDiscussionGraphQLField("id")
    thread_id: "ThreadDiscussionGraphQLField" = ThreadDiscussionGraphQLField("threadId")
    title: "ThreadDiscussionGraphQLField" = ThreadDiscussionGraphQLField("title")
    slack_team_id: "ThreadDiscussionGraphQLField" = ThreadDiscussionGraphQLField(
        "slackTeamId"
    )
    slack_channel_id: "ThreadDiscussionGraphQLField" = ThreadDiscussionGraphQLField(
        "slackChannelId"
    )
    slack_channel_name: "ThreadDiscussionGraphQLField" = ThreadDiscussionGraphQLField(
        "slackChannelName"
    )
    slack_message_link: "ThreadDiscussionGraphQLField" = ThreadDiscussionGraphQLField(
        "slackMessageLink"
    )

    @classmethod
    def messages(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> "ThreadDiscussionMessageConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadDiscussionMessageConnectionFields(
            "messages", arguments=cleared_arguments
        )

    @classmethod
    def resolved_at(cls) -> "DateTimeFields":
        return DateTimeFields("resolved_at")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "ActorUnion" = ActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "ActorUnion" = ActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            ThreadDiscussionGraphQLField,
            "ActorUnion",
            "DateTimeFields",
            "ThreadDiscussionMessageConnectionFields",
        ]
    ) -> "ThreadDiscussionFields":
        """Subfields should come from the ThreadDiscussionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadDiscussionFields":
        self._alias = alias
        return self


class ThreadDiscussionEntryFields(GraphQLField):
    customer_id: "ThreadDiscussionEntryGraphQLField" = (
        ThreadDiscussionEntryGraphQLField("customerId")
    )
    thread_discussion_id: "ThreadDiscussionEntryGraphQLField" = (
        ThreadDiscussionEntryGraphQLField("threadDiscussionId")
    )
    slack_channel_name: "ThreadDiscussionEntryGraphQLField" = (
        ThreadDiscussionEntryGraphQLField("slackChannelName")
    )
    slack_message_link: "ThreadDiscussionEntryGraphQLField" = (
        ThreadDiscussionEntryGraphQLField("slackMessageLink")
    )

    def fields(
        self, *subfields: ThreadDiscussionEntryGraphQLField
    ) -> "ThreadDiscussionEntryFields":
        """Subfields should come from the ThreadDiscussionEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadDiscussionEntryFields":
        self._alias = alias
        return self


class ThreadDiscussionMessageFields(GraphQLField):
    id: "ThreadDiscussionMessageGraphQLField" = ThreadDiscussionMessageGraphQLField(
        "id"
    )
    thread_discussion_id: "ThreadDiscussionMessageGraphQLField" = (
        ThreadDiscussionMessageGraphQLField("threadDiscussionId")
    )
    text: "ThreadDiscussionMessageGraphQLField" = ThreadDiscussionMessageGraphQLField(
        "text"
    )
    slack_message_link: "ThreadDiscussionMessageGraphQLField" = (
        ThreadDiscussionMessageGraphQLField("slackMessageLink")
    )

    @classmethod
    def attachments(cls) -> "AttachmentFields":
        return AttachmentFields("attachments")

    @classmethod
    def last_edited_on_slack_at(cls) -> "DateTimeFields":
        return DateTimeFields("last_edited_on_slack_at")

    @classmethod
    def deleted_on_slack_at(cls) -> "DateTimeFields":
        return DateTimeFields("deleted_on_slack_at")

    @classmethod
    def reactions(cls) -> "ThreadDiscussionMessageReactionFields":
        return ThreadDiscussionMessageReactionFields("reactions")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "ActorUnion" = ActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "ActorUnion" = ActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            ThreadDiscussionMessageGraphQLField,
            "ActorUnion",
            "AttachmentFields",
            "DateTimeFields",
            "ThreadDiscussionMessageReactionFields",
        ]
    ) -> "ThreadDiscussionMessageFields":
        """Subfields should come from the ThreadDiscussionMessageFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadDiscussionMessageFields":
        self._alias = alias
        return self


class ThreadDiscussionMessageConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ThreadDiscussionMessageEdgeFields":
        return ThreadDiscussionMessageEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            ThreadDiscussionMessageConnectionGraphQLField,
            "PageInfoFields",
            "ThreadDiscussionMessageEdgeFields",
        ]
    ) -> "ThreadDiscussionMessageConnectionFields":
        """Subfields should come from the ThreadDiscussionMessageConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadDiscussionMessageConnectionFields":
        self._alias = alias
        return self


class ThreadDiscussionMessageEdgeFields(GraphQLField):
    @classmethod
    def node(cls) -> "ThreadDiscussionMessageFields":
        return ThreadDiscussionMessageFields("node")

    cursor: "ThreadDiscussionMessageEdgeGraphQLField" = (
        ThreadDiscussionMessageEdgeGraphQLField("cursor")
    )

    def fields(
        self,
        *subfields: Union[
            ThreadDiscussionMessageEdgeGraphQLField, "ThreadDiscussionMessageFields"
        ]
    ) -> "ThreadDiscussionMessageEdgeFields":
        """Subfields should come from the ThreadDiscussionMessageEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadDiscussionMessageEdgeFields":
        self._alias = alias
        return self


class ThreadDiscussionMessageReactionFields(GraphQLField):
    name: "ThreadDiscussionMessageReactionGraphQLField" = (
        ThreadDiscussionMessageReactionGraphQLField("name")
    )
    actors: "ActorUnion" = ActorUnion("actors")
    image_url: "ThreadDiscussionMessageReactionGraphQLField" = (
        ThreadDiscussionMessageReactionGraphQLField("imageUrl")
    )

    def fields(
        self,
        *subfields: Union[ThreadDiscussionMessageReactionGraphQLField, "ActorUnion"]
    ) -> "ThreadDiscussionMessageReactionFields":
        """Subfields should come from the ThreadDiscussionMessageReactionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadDiscussionMessageReactionFields":
        self._alias = alias
        return self


class ThreadDiscussionResolvedEntryFields(GraphQLField):
    customer_id: "ThreadDiscussionResolvedEntryGraphQLField" = (
        ThreadDiscussionResolvedEntryGraphQLField("customerId")
    )
    thread_discussion_id: "ThreadDiscussionResolvedEntryGraphQLField" = (
        ThreadDiscussionResolvedEntryGraphQLField("threadDiscussionId")
    )
    slack_channel_name: "ThreadDiscussionResolvedEntryGraphQLField" = (
        ThreadDiscussionResolvedEntryGraphQLField("slackChannelName")
    )
    slack_message_link: "ThreadDiscussionResolvedEntryGraphQLField" = (
        ThreadDiscussionResolvedEntryGraphQLField("slackMessageLink")
    )

    @classmethod
    def resolved_at(cls) -> "DateTimeFields":
        return DateTimeFields("resolved_at")

    def fields(
        self,
        *subfields: Union[ThreadDiscussionResolvedEntryGraphQLField, "DateTimeFields"]
    ) -> "ThreadDiscussionResolvedEntryFields":
        """Subfields should come from the ThreadDiscussionResolvedEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadDiscussionResolvedEntryFields":
        self._alias = alias
        return self


class ThreadEdgeFields(GraphQLField):
    cursor: "ThreadEdgeGraphQLField" = ThreadEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ThreadFields":
        return ThreadFields("node")

    def fields(
        self, *subfields: Union[ThreadEdgeGraphQLField, "ThreadFields"]
    ) -> "ThreadEdgeFields":
        """Subfields should come from the ThreadEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadEdgeFields":
        self._alias = alias
        return self


class ThreadEventFields(GraphQLField):
    id: "ThreadEventGraphQLField" = ThreadEventGraphQLField("id")
    customer_id: "ThreadEventGraphQLField" = ThreadEventGraphQLField("customerId")
    thread_id: "ThreadEventGraphQLField" = ThreadEventGraphQLField("threadId")
    title: "ThreadEventGraphQLField" = ThreadEventGraphQLField("title")
    components: "EventComponentUnion" = EventComponentUnion("components")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "ActorUnion" = ActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "ActorUnion" = ActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            ThreadEventGraphQLField,
            "ActorUnion",
            "DateTimeFields",
            "EventComponentUnion",
        ]
    ) -> "ThreadEventFields":
        """Subfields should come from the ThreadEventFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadEventFields":
        self._alias = alias
        return self


class ThreadEventEntryFields(GraphQLField):
    timeline_event_id: "ThreadEventEntryGraphQLField" = ThreadEventEntryGraphQLField(
        "timelineEventId"
    )
    title: "ThreadEventEntryGraphQLField" = ThreadEventEntryGraphQLField("title")
    components: "EventComponentUnion" = EventComponentUnion("components")
    customer_id: "ThreadEventEntryGraphQLField" = ThreadEventEntryGraphQLField(
        "customerId"
    )
    external_id: "ThreadEventEntryGraphQLField" = ThreadEventEntryGraphQLField(
        "externalId"
    )

    def fields(
        self, *subfields: Union[ThreadEventEntryGraphQLField, "EventComponentUnion"]
    ) -> "ThreadEventEntryFields":
        """Subfields should come from the ThreadEventEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadEventEntryFields":
        self._alias = alias
        return self


class ThreadFieldFields(GraphQLField):
    id: "ThreadFieldGraphQLField" = ThreadFieldGraphQLField("id")
    thread_id: "ThreadFieldGraphQLField" = ThreadFieldGraphQLField("threadId")
    key: "ThreadFieldGraphQLField" = ThreadFieldGraphQLField("key")
    type: "ThreadFieldGraphQLField" = ThreadFieldGraphQLField("type")
    is_ai_generated: "ThreadFieldGraphQLField" = ThreadFieldGraphQLField(
        "isAiGenerated"
    )
    string_value: "ThreadFieldGraphQLField" = ThreadFieldGraphQLField("stringValue")
    boolean_value: "ThreadFieldGraphQLField" = ThreadFieldGraphQLField("booleanValue")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            ThreadFieldGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "ThreadFieldFields":
        """Subfields should come from the ThreadFieldFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadFieldFields":
        self._alias = alias
        return self


class ThreadFieldSchemaFields(GraphQLField):
    id: "ThreadFieldSchemaGraphQLField" = ThreadFieldSchemaGraphQLField("id")
    label: "ThreadFieldSchemaGraphQLField" = ThreadFieldSchemaGraphQLField("label")
    key: "ThreadFieldSchemaGraphQLField" = ThreadFieldSchemaGraphQLField("key")
    description: "ThreadFieldSchemaGraphQLField" = ThreadFieldSchemaGraphQLField(
        "description"
    )
    order: "ThreadFieldSchemaGraphQLField" = ThreadFieldSchemaGraphQLField("order")
    type: "ThreadFieldSchemaGraphQLField" = ThreadFieldSchemaGraphQLField("type")
    enum_values: "ThreadFieldSchemaGraphQLField" = ThreadFieldSchemaGraphQLField(
        "enumValues"
    )
    default_string_value: "ThreadFieldSchemaGraphQLField" = (
        ThreadFieldSchemaGraphQLField("defaultStringValue")
    )
    default_boolean_value: "ThreadFieldSchemaGraphQLField" = (
        ThreadFieldSchemaGraphQLField("defaultBooleanValue")
    )
    is_required: "ThreadFieldSchemaGraphQLField" = ThreadFieldSchemaGraphQLField(
        "isRequired"
    )
    is_ai_auto_fill_enabled: "ThreadFieldSchemaGraphQLField" = (
        ThreadFieldSchemaGraphQLField("isAiAutoFillEnabled")
    )

    @classmethod
    def depends_on_thread_field(cls) -> "DependsOnThreadFieldTypeFields":
        return DependsOnThreadFieldTypeFields("depends_on_thread_field")

    @classmethod
    def depends_on_labels(cls) -> "DependsOnLabelTypeFields":
        return DependsOnLabelTypeFields("depends_on_labels")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            ThreadFieldSchemaGraphQLField,
            "DateTimeFields",
            "DependsOnLabelTypeFields",
            "DependsOnThreadFieldTypeFields",
            "InternalActorUnion",
        ]
    ) -> "ThreadFieldSchemaFields":
        """Subfields should come from the ThreadFieldSchemaFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadFieldSchemaFields":
        self._alias = alias
        return self


class ThreadFieldSchemaConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ThreadFieldSchemaEdgeFields":
        return ThreadFieldSchemaEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            ThreadFieldSchemaConnectionGraphQLField,
            "PageInfoFields",
            "ThreadFieldSchemaEdgeFields",
        ]
    ) -> "ThreadFieldSchemaConnectionFields":
        """Subfields should come from the ThreadFieldSchemaConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadFieldSchemaConnectionFields":
        self._alias = alias
        return self


class ThreadFieldSchemaEdgeFields(GraphQLField):
    cursor: "ThreadFieldSchemaEdgeGraphQLField" = ThreadFieldSchemaEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "ThreadFieldSchemaFields":
        return ThreadFieldSchemaFields("node")

    def fields(
        self,
        *subfields: Union[ThreadFieldSchemaEdgeGraphQLField, "ThreadFieldSchemaFields"]
    ) -> "ThreadFieldSchemaEdgeFields":
        """Subfields should come from the ThreadFieldSchemaEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadFieldSchemaEdgeFields":
        self._alias = alias
        return self


class ThreadLabelsChangedEntryFields(GraphQLField):
    @classmethod
    def previous_labels(cls) -> "LabelFields":
        return LabelFields("previous_labels")

    @classmethod
    def next_labels(cls) -> "LabelFields":
        return LabelFields("next_labels")

    def fields(
        self, *subfields: Union[ThreadLabelsChangedEntryGraphQLField, "LabelFields"]
    ) -> "ThreadLabelsChangedEntryFields":
        """Subfields should come from the ThreadLabelsChangedEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLabelsChangedEntryFields":
        self._alias = alias
        return self


class ThreadLinkConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ThreadLinkEdgeFields":
        return ThreadLinkEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "ThreadLinkConnectionGraphQLField" = ThreadLinkConnectionGraphQLField(
        "totalCount"
    )

    def fields(
        self,
        *subfields: Union[
            ThreadLinkConnectionGraphQLField, "PageInfoFields", "ThreadLinkEdgeFields"
        ]
    ) -> "ThreadLinkConnectionFields":
        """Subfields should come from the ThreadLinkConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLinkConnectionFields":
        self._alias = alias
        return self


class ThreadLinkEdgeFields(GraphQLField):
    cursor: "ThreadLinkEdgeGraphQLField" = ThreadLinkEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "ThreadLinkInterface":
        return ThreadLinkInterface("node")

    def fields(
        self, *subfields: Union[ThreadLinkEdgeGraphQLField, "ThreadLinkInterface"]
    ) -> "ThreadLinkEdgeFields":
        """Subfields should come from the ThreadLinkEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLinkEdgeFields":
        self._alias = alias
        return self


class ThreadLinkGroupFields(GraphQLField):
    id: "ThreadLinkGroupGraphQLField" = ThreadLinkGroupGraphQLField("id")

    @classmethod
    def threads(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> "ThreadConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadConnectionFields("threads", arguments=cleared_arguments)

    @classmethod
    def thread_links(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> "ThreadLinkConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return ThreadLinkConnectionFields("thread_links", arguments=cleared_arguments)

    @classmethod
    def tier_metrics(cls) -> "ThreadLinkGroupTierMetricsFields":
        return ThreadLinkGroupTierMetricsFields("tier_metrics")

    @classmethod
    def company_metrics(cls) -> "ThreadLinkGroupCompanyMetricsFields":
        return ThreadLinkGroupCompanyMetricsFields("company_metrics")

    default_view_rank: "ThreadLinkGroupGraphQLField" = ThreadLinkGroupGraphQLField(
        "defaultViewRank"
    )
    current_view_rank: "ThreadLinkGroupGraphQLField" = ThreadLinkGroupGraphQLField(
        "currentViewRank"
    )

    def fields(
        self,
        *subfields: Union[
            ThreadLinkGroupGraphQLField,
            "ThreadConnectionFields",
            "ThreadLinkConnectionFields",
            "ThreadLinkGroupCompanyMetricsFields",
            "ThreadLinkGroupTierMetricsFields",
        ]
    ) -> "ThreadLinkGroupFields":
        """Subfields should come from the ThreadLinkGroupFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLinkGroupFields":
        self._alias = alias
        return self


class ThreadLinkGroupAggregateMetricsFields(GraphQLField):
    total_count: "ThreadLinkGroupAggregateMetricsGraphQLField" = (
        ThreadLinkGroupAggregateMetricsGraphQLField("totalCount")
    )

    def fields(
        self, *subfields: ThreadLinkGroupAggregateMetricsGraphQLField
    ) -> "ThreadLinkGroupAggregateMetricsFields":
        """Subfields should come from the ThreadLinkGroupAggregateMetricsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLinkGroupAggregateMetricsFields":
        self._alias = alias
        return self


class ThreadLinkGroupCompanyMetricsFields(GraphQLField):
    @classmethod
    def by_company(cls) -> "ThreadLinkGroupSingleCompanyMetricsFields":
        return ThreadLinkGroupSingleCompanyMetricsFields("by_company")

    @classmethod
    def no_company(cls) -> "ThreadLinkGroupAggregateMetricsFields":
        return ThreadLinkGroupAggregateMetricsFields("no_company")

    def fields(
        self,
        *subfields: Union[
            ThreadLinkGroupCompanyMetricsGraphQLField,
            "ThreadLinkGroupAggregateMetricsFields",
            "ThreadLinkGroupSingleCompanyMetricsFields",
        ]
    ) -> "ThreadLinkGroupCompanyMetricsFields":
        """Subfields should come from the ThreadLinkGroupCompanyMetricsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLinkGroupCompanyMetricsFields":
        self._alias = alias
        return self


class ThreadLinkGroupConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ThreadLinkGroupEdgeFields":
        return ThreadLinkGroupEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            ThreadLinkGroupConnectionGraphQLField,
            "PageInfoFields",
            "ThreadLinkGroupEdgeFields",
        ]
    ) -> "ThreadLinkGroupConnectionFields":
        """Subfields should come from the ThreadLinkGroupConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLinkGroupConnectionFields":
        self._alias = alias
        return self


class ThreadLinkGroupEdgeFields(GraphQLField):
    cursor: "ThreadLinkGroupEdgeGraphQLField" = ThreadLinkGroupEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "ThreadLinkGroupFields":
        return ThreadLinkGroupFields("node")

    def fields(
        self,
        *subfields: Union[ThreadLinkGroupEdgeGraphQLField, "ThreadLinkGroupFields"]
    ) -> "ThreadLinkGroupEdgeFields":
        """Subfields should come from the ThreadLinkGroupEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLinkGroupEdgeFields":
        self._alias = alias
        return self


class ThreadLinkGroupSingleCompanyMetricsFields(GraphQLField):
    @classmethod
    def company(cls) -> "CompanyFields":
        return CompanyFields("company")

    @classmethod
    def metrics(cls) -> "ThreadLinkGroupAggregateMetricsFields":
        return ThreadLinkGroupAggregateMetricsFields("metrics")

    def fields(
        self,
        *subfields: Union[
            ThreadLinkGroupSingleCompanyMetricsGraphQLField,
            "CompanyFields",
            "ThreadLinkGroupAggregateMetricsFields",
        ]
    ) -> "ThreadLinkGroupSingleCompanyMetricsFields":
        """Subfields should come from the ThreadLinkGroupSingleCompanyMetricsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLinkGroupSingleCompanyMetricsFields":
        self._alias = alias
        return self


class ThreadLinkGroupSingleTierMetricsFields(GraphQLField):
    @classmethod
    def tier(cls) -> "TierFields":
        return TierFields("tier")

    @classmethod
    def metrics(cls) -> "ThreadLinkGroupAggregateMetricsFields":
        return ThreadLinkGroupAggregateMetricsFields("metrics")

    def fields(
        self,
        *subfields: Union[
            ThreadLinkGroupSingleTierMetricsGraphQLField,
            "ThreadLinkGroupAggregateMetricsFields",
            "TierFields",
        ]
    ) -> "ThreadLinkGroupSingleTierMetricsFields":
        """Subfields should come from the ThreadLinkGroupSingleTierMetricsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLinkGroupSingleTierMetricsFields":
        self._alias = alias
        return self


class ThreadLinkGroupTierMetricsFields(GraphQLField):
    @classmethod
    def by_tier(cls) -> "ThreadLinkGroupSingleTierMetricsFields":
        return ThreadLinkGroupSingleTierMetricsFields("by_tier")

    @classmethod
    def no_tier(cls) -> "ThreadLinkGroupAggregateMetricsFields":
        return ThreadLinkGroupAggregateMetricsFields("no_tier")

    def fields(
        self,
        *subfields: Union[
            ThreadLinkGroupTierMetricsGraphQLField,
            "ThreadLinkGroupAggregateMetricsFields",
            "ThreadLinkGroupSingleTierMetricsFields",
        ]
    ) -> "ThreadLinkGroupTierMetricsFields":
        """Subfields should come from the ThreadLinkGroupTierMetricsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLinkGroupTierMetricsFields":
        self._alias = alias
        return self


class ThreadLinkUpdatedEntryFields(GraphQLField):
    @classmethod
    def thread_link(cls) -> "ThreadLinkInterface":
        return ThreadLinkInterface("thread_link")

    @classmethod
    def previous_thread_link(cls) -> "ThreadLinkInterface":
        return ThreadLinkInterface("previous_thread_link")

    def fields(
        self,
        *subfields: Union[ThreadLinkUpdatedEntryGraphQLField, "ThreadLinkInterface"]
    ) -> "ThreadLinkUpdatedEntryFields":
        """Subfields should come from the ThreadLinkUpdatedEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadLinkUpdatedEntryFields":
        self._alias = alias
        return self


class ThreadMessageInfoFields(GraphQLField):
    @classmethod
    def timestamp(cls) -> "DateTimeFields":
        return DateTimeFields("timestamp")

    message_source: "ThreadMessageInfoGraphQLField" = ThreadMessageInfoGraphQLField(
        "messageSource"
    )

    def fields(
        self, *subfields: Union[ThreadMessageInfoGraphQLField, "DateTimeFields"]
    ) -> "ThreadMessageInfoFields":
        """Subfields should come from the ThreadMessageInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadMessageInfoFields":
        self._alias = alias
        return self


class ThreadPriorityChangedEntryFields(GraphQLField):
    previous_priority: "ThreadPriorityChangedEntryGraphQLField" = (
        ThreadPriorityChangedEntryGraphQLField("previousPriority")
    )
    next_priority: "ThreadPriorityChangedEntryGraphQLField" = (
        ThreadPriorityChangedEntryGraphQLField("nextPriority")
    )

    def fields(
        self, *subfields: ThreadPriorityChangedEntryGraphQLField
    ) -> "ThreadPriorityChangedEntryFields":
        """Subfields should come from the ThreadPriorityChangedEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadPriorityChangedEntryFields":
        self._alias = alias
        return self


class ThreadSearchResultFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    def fields(
        self, *subfields: Union[ThreadSearchResultGraphQLField, "ThreadFields"]
    ) -> "ThreadSearchResultFields":
        """Subfields should come from the ThreadSearchResultFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadSearchResultFields":
        self._alias = alias
        return self


class ThreadSearchResultConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "ThreadSearchResultEdgeFields":
        return ThreadSearchResultEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            ThreadSearchResultConnectionGraphQLField,
            "PageInfoFields",
            "ThreadSearchResultEdgeFields",
        ]
    ) -> "ThreadSearchResultConnectionFields":
        """Subfields should come from the ThreadSearchResultConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadSearchResultConnectionFields":
        self._alias = alias
        return self


class ThreadSearchResultEdgeFields(GraphQLField):
    cursor: "ThreadSearchResultEdgeGraphQLField" = ThreadSearchResultEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "ThreadSearchResultFields":
        return ThreadSearchResultFields("node")

    def fields(
        self,
        *subfields: Union[
            ThreadSearchResultEdgeGraphQLField, "ThreadSearchResultFields"
        ]
    ) -> "ThreadSearchResultEdgeFields":
        """Subfields should come from the ThreadSearchResultEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadSearchResultEdgeFields":
        self._alias = alias
        return self


class ThreadStatusDetailCreatedFields(GraphQLField):
    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    def fields(
        self, *subfields: Union[ThreadStatusDetailCreatedGraphQLField, "DateTimeFields"]
    ) -> "ThreadStatusDetailCreatedFields":
        """Subfields should come from the ThreadStatusDetailCreatedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailCreatedFields":
        self._alias = alias
        return self


class ThreadStatusDetailDoneAutomaticallySetFields(GraphQLField):
    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    after_seconds: "ThreadStatusDetailDoneAutomaticallySetGraphQLField" = (
        ThreadStatusDetailDoneAutomaticallySetGraphQLField("afterSeconds")
    )

    def fields(
        self,
        *subfields: Union[
            ThreadStatusDetailDoneAutomaticallySetGraphQLField, "DateTimeFields"
        ]
    ) -> "ThreadStatusDetailDoneAutomaticallySetFields":
        """Subfields should come from the ThreadStatusDetailDoneAutomaticallySetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailDoneAutomaticallySetFields":
        self._alias = alias
        return self


class ThreadStatusDetailDoneManuallySetFields(GraphQLField):
    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    def fields(
        self,
        *subfields: Union[
            ThreadStatusDetailDoneManuallySetGraphQLField, "DateTimeFields"
        ]
    ) -> "ThreadStatusDetailDoneManuallySetFields":
        """Subfields should come from the ThreadStatusDetailDoneManuallySetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailDoneManuallySetFields":
        self._alias = alias
        return self


class ThreadStatusDetailIgnoredFields(GraphQLField):
    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    def fields(
        self, *subfields: Union[ThreadStatusDetailIgnoredGraphQLField, "DateTimeFields"]
    ) -> "ThreadStatusDetailIgnoredFields":
        """Subfields should come from the ThreadStatusDetailIgnoredFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailIgnoredFields":
        self._alias = alias
        return self


class ThreadStatusDetailInProgressFields(GraphQLField):
    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    def fields(
        self,
        *subfields: Union[ThreadStatusDetailInProgressGraphQLField, "DateTimeFields"]
    ) -> "ThreadStatusDetailInProgressFields":
        """Subfields should come from the ThreadStatusDetailInProgressFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailInProgressFields":
        self._alias = alias
        return self


class ThreadStatusDetailLinearUpdatedFields(GraphQLField):
    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    linear_issue_id: "ThreadStatusDetailLinearUpdatedGraphQLField" = (
        ThreadStatusDetailLinearUpdatedGraphQLField("linearIssueId")
    )

    def fields(
        self,
        *subfields: Union[ThreadStatusDetailLinearUpdatedGraphQLField, "DateTimeFields"]
    ) -> "ThreadStatusDetailLinearUpdatedFields":
        """Subfields should come from the ThreadStatusDetailLinearUpdatedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailLinearUpdatedFields":
        self._alias = alias
        return self


class ThreadStatusDetailNewReplyFields(GraphQLField):
    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    @classmethod
    def new_reply_at(cls) -> "DateTimeFields":
        return DateTimeFields("new_reply_at")

    def fields(
        self,
        *subfields: Union[ThreadStatusDetailNewReplyGraphQLField, "DateTimeFields"]
    ) -> "ThreadStatusDetailNewReplyFields":
        """Subfields should come from the ThreadStatusDetailNewReplyFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailNewReplyFields":
        self._alias = alias
        return self


class ThreadStatusDetailRepliedFields(GraphQLField):
    @classmethod
    def replied_at(cls) -> "DateTimeFields":
        return DateTimeFields("replied_at")

    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    def fields(
        self, *subfields: Union[ThreadStatusDetailRepliedGraphQLField, "DateTimeFields"]
    ) -> "ThreadStatusDetailRepliedFields":
        """Subfields should come from the ThreadStatusDetailRepliedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailRepliedFields":
        self._alias = alias
        return self


class ThreadStatusDetailSnoozedFields(GraphQLField):
    @classmethod
    def snoozed_at(cls) -> "DateTimeFields":
        return DateTimeFields("snoozed_at")

    @classmethod
    def snoozed_until(cls) -> "DateTimeFields":
        return DateTimeFields("snoozed_until")

    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    def fields(
        self, *subfields: Union[ThreadStatusDetailSnoozedGraphQLField, "DateTimeFields"]
    ) -> "ThreadStatusDetailSnoozedFields":
        """Subfields should come from the ThreadStatusDetailSnoozedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailSnoozedFields":
        self._alias = alias
        return self


class ThreadStatusDetailThreadDiscussionResolvedFields(GraphQLField):
    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    thread_discussion_id: "ThreadStatusDetailThreadDiscussionResolvedGraphQLField" = (
        ThreadStatusDetailThreadDiscussionResolvedGraphQLField("threadDiscussionId")
    )

    def fields(
        self,
        *subfields: Union[
            ThreadStatusDetailThreadDiscussionResolvedGraphQLField, "DateTimeFields"
        ]
    ) -> "ThreadStatusDetailThreadDiscussionResolvedFields":
        """Subfields should come from the ThreadStatusDetailThreadDiscussionResolvedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailThreadDiscussionResolvedFields":
        self._alias = alias
        return self


class ThreadStatusDetailThreadLinkUpdatedFields(GraphQLField):
    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    linear_issue_id: "ThreadStatusDetailThreadLinkUpdatedGraphQLField" = (
        ThreadStatusDetailThreadLinkUpdatedGraphQLField("linearIssueId")
    )

    def fields(
        self,
        *subfields: Union[
            ThreadStatusDetailThreadLinkUpdatedGraphQLField, "DateTimeFields"
        ]
    ) -> "ThreadStatusDetailThreadLinkUpdatedFields":
        """Subfields should come from the ThreadStatusDetailThreadLinkUpdatedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailThreadLinkUpdatedFields":
        self._alias = alias
        return self


class ThreadStatusDetailUnsnoozedFields(GraphQLField):
    @classmethod
    def snoozed_at(cls) -> "DateTimeFields":
        return DateTimeFields("snoozed_at")

    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    def fields(
        self,
        *subfields: Union[ThreadStatusDetailUnsnoozedGraphQLField, "DateTimeFields"]
    ) -> "ThreadStatusDetailUnsnoozedFields":
        """Subfields should come from the ThreadStatusDetailUnsnoozedFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailUnsnoozedFields":
        self._alias = alias
        return self


class ThreadStatusDetailWaitingForCustomerFields(GraphQLField):
    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    def fields(
        self,
        *subfields: Union[
            ThreadStatusDetailWaitingForCustomerGraphQLField, "DateTimeFields"
        ]
    ) -> "ThreadStatusDetailWaitingForCustomerFields":
        """Subfields should come from the ThreadStatusDetailWaitingForCustomerFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailWaitingForCustomerFields":
        self._alias = alias
        return self


class ThreadStatusDetailWaitingForDurationFields(GraphQLField):
    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    @classmethod
    def waiting_until(cls) -> "DateTimeFields":
        return DateTimeFields("waiting_until")

    def fields(
        self,
        *subfields: Union[
            ThreadStatusDetailWaitingForDurationGraphQLField, "DateTimeFields"
        ]
    ) -> "ThreadStatusDetailWaitingForDurationFields":
        """Subfields should come from the ThreadStatusDetailWaitingForDurationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusDetailWaitingForDurationFields":
        self._alias = alias
        return self


class ThreadStatusTransitionedEntryFields(GraphQLField):
    previous_status: "ThreadStatusTransitionedEntryGraphQLField" = (
        ThreadStatusTransitionedEntryGraphQLField("previousStatus")
    )
    previous_status_detail: "ThreadStatusDetailUnion" = ThreadStatusDetailUnion(
        "previousStatusDetail"
    )
    next_status: "ThreadStatusTransitionedEntryGraphQLField" = (
        ThreadStatusTransitionedEntryGraphQLField("nextStatus")
    )
    next_status_detail: "ThreadStatusDetailUnion" = ThreadStatusDetailUnion(
        "nextStatusDetail"
    )

    def fields(
        self,
        *subfields: Union[
            ThreadStatusTransitionedEntryGraphQLField, "ThreadStatusDetailUnion"
        ]
    ) -> "ThreadStatusTransitionedEntryFields":
        """Subfields should come from the ThreadStatusTransitionedEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadStatusTransitionedEntryFields":
        self._alias = alias
        return self


class ThreadWithDistanceFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    distance: "ThreadWithDistanceGraphQLField" = ThreadWithDistanceGraphQLField(
        "distance"
    )

    def fields(
        self, *subfields: Union[ThreadWithDistanceGraphQLField, "ThreadFields"]
    ) -> "ThreadWithDistanceFields":
        """Subfields should come from the ThreadWithDistanceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadWithDistanceFields":
        self._alias = alias
        return self


class ThreadsDisplayOptionsFields(GraphQLField):
    has_status: "ThreadsDisplayOptionsGraphQLField" = ThreadsDisplayOptionsGraphQLField(
        "hasStatus"
    )
    has_customer: "ThreadsDisplayOptionsGraphQLField" = (
        ThreadsDisplayOptionsGraphQLField("hasCustomer")
    )
    has_company: "ThreadsDisplayOptionsGraphQLField" = (
        ThreadsDisplayOptionsGraphQLField("hasCompany")
    )
    has_preview_text: "ThreadsDisplayOptionsGraphQLField" = (
        ThreadsDisplayOptionsGraphQLField("hasPreviewText")
    )
    has_tier: "ThreadsDisplayOptionsGraphQLField" = ThreadsDisplayOptionsGraphQLField(
        "hasTier"
    )
    has_customer_groups: "ThreadsDisplayOptionsGraphQLField" = (
        ThreadsDisplayOptionsGraphQLField("hasCustomerGroups")
    )
    has_labels: "ThreadsDisplayOptionsGraphQLField" = ThreadsDisplayOptionsGraphQLField(
        "hasLabels"
    )
    has_linear_issues: "ThreadsDisplayOptionsGraphQLField" = (
        ThreadsDisplayOptionsGraphQLField("hasLinearIssues")
    )
    has_jira_issues: "ThreadsDisplayOptionsGraphQLField" = (
        ThreadsDisplayOptionsGraphQLField("hasJiraIssues")
    )
    has_linked_threads: "ThreadsDisplayOptionsGraphQLField" = (
        ThreadsDisplayOptionsGraphQLField("hasLinkedThreads")
    )
    has_service_level_agreements: "ThreadsDisplayOptionsGraphQLField" = (
        ThreadsDisplayOptionsGraphQLField("hasServiceLevelAgreements")
    )
    has_channels: "ThreadsDisplayOptionsGraphQLField" = (
        ThreadsDisplayOptionsGraphQLField("hasChannels")
    )
    has_last_updated: "ThreadsDisplayOptionsGraphQLField" = (
        ThreadsDisplayOptionsGraphQLField("hasLastUpdated")
    )
    has_assignees: "ThreadsDisplayOptionsGraphQLField" = (
        ThreadsDisplayOptionsGraphQLField("hasAssignees")
    )

    def fields(
        self, *subfields: ThreadsDisplayOptionsGraphQLField
    ) -> "ThreadsDisplayOptionsFields":
        """Subfields should come from the ThreadsDisplayOptionsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ThreadsDisplayOptionsFields":
        self._alias = alias
        return self


class TierFields(GraphQLField):
    id: "TierGraphQLField" = TierGraphQLField("id")
    name: "TierGraphQLField" = TierGraphQLField("name")
    external_id: "TierGraphQLField" = TierGraphQLField("externalId")
    color: "TierGraphQLField" = TierGraphQLField("color")
    is_default: "TierGraphQLField" = TierGraphQLField("isDefault")
    default_priority: "TierGraphQLField" = TierGraphQLField("defaultPriority")
    default_thread_priority: "TierGraphQLField" = TierGraphQLField(
        "defaultThreadPriority"
    )

    @classmethod
    def memberships(
        cls,
        *,
        first: Optional[int] = None,
        after: Optional[str] = None,
        last: Optional[int] = None,
        before: Optional[str] = None
    ) -> "TierMembershipConnectionFields":
        arguments: Dict[str, Dict[str, Any]] = {
            "first": {"type": "Int", "value": first},
            "after": {"type": "String", "value": after},
            "last": {"type": "Int", "value": last},
            "before": {"type": "String", "value": before},
        }
        cleared_arguments = {
            key: value for key, value in arguments.items() if value["value"] is not None
        }
        return TierMembershipConnectionFields(
            "memberships", arguments=cleared_arguments
        )

    @classmethod
    def service_level_agreements(cls) -> "ServiceLevelAgreementInterface":
        return ServiceLevelAgreementInterface("service_level_agreements")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            TierGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
            "ServiceLevelAgreementInterface",
            "TierMembershipConnectionFields",
        ]
    ) -> "TierFields":
        """Subfields should come from the TierFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TierFields":
        self._alias = alias
        return self


class TierConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "TierEdgeFields":
        return TierEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            TierConnectionGraphQLField, "PageInfoFields", "TierEdgeFields"
        ]
    ) -> "TierConnectionFields":
        """Subfields should come from the TierConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TierConnectionFields":
        self._alias = alias
        return self


class TierEdgeFields(GraphQLField):
    cursor: "TierEdgeGraphQLField" = TierEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "TierFields":
        return TierFields("node")

    def fields(
        self, *subfields: Union[TierEdgeGraphQLField, "TierFields"]
    ) -> "TierEdgeFields":
        """Subfields should come from the TierEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TierEdgeFields":
        self._alias = alias
        return self


class TierMembershipConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "TierMembershipEdgeFields":
        return TierMembershipEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    total_count: "TierMembershipConnectionGraphQLField" = (
        TierMembershipConnectionGraphQLField("totalCount")
    )

    def fields(
        self,
        *subfields: Union[
            TierMembershipConnectionGraphQLField,
            "PageInfoFields",
            "TierMembershipEdgeFields",
        ]
    ) -> "TierMembershipConnectionFields":
        """Subfields should come from the TierMembershipConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TierMembershipConnectionFields":
        self._alias = alias
        return self


class TierMembershipEdgeFields(GraphQLField):
    cursor: "TierMembershipEdgeGraphQLField" = TierMembershipEdgeGraphQLField("cursor")
    node: "TierMembershipUnion" = TierMembershipUnion("node")

    def fields(
        self, *subfields: Union[TierMembershipEdgeGraphQLField, "TierMembershipUnion"]
    ) -> "TierMembershipEdgeFields":
        """Subfields should come from the TierMembershipEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TierMembershipEdgeFields":
        self._alias = alias
        return self


class TimeFields(GraphQLField):
    iso_8601: "TimeGraphQLField" = TimeGraphQLField("iso8601")

    def fields(self, *subfields: TimeGraphQLField) -> "TimeFields":
        """Subfields should come from the TimeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimeFields":
        self._alias = alias
        return self


class TimeSeriesMetricFields(GraphQLField):
    @classmethod
    def timestamps(cls) -> "DateTimeFields":
        return DateTimeFields("timestamps")

    @classmethod
    def series(cls) -> "TimeSeriesSeriesFields":
        return TimeSeriesSeriesFields("series")

    def fields(
        self,
        *subfields: Union[
            TimeSeriesMetricGraphQLField, "DateTimeFields", "TimeSeriesSeriesFields"
        ]
    ) -> "TimeSeriesMetricFields":
        """Subfields should come from the TimeSeriesMetricFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimeSeriesMetricFields":
        self._alias = alias
        return self


class TimeSeriesMetricDimensionFields(GraphQLField):
    type: "TimeSeriesMetricDimensionGraphQLField" = (
        TimeSeriesMetricDimensionGraphQLField("type")
    )
    value: "TimeSeriesMetricDimensionGraphQLField" = (
        TimeSeriesMetricDimensionGraphQLField("value")
    )

    def fields(
        self, *subfields: TimeSeriesMetricDimensionGraphQLField
    ) -> "TimeSeriesMetricDimensionFields":
        """Subfields should come from the TimeSeriesMetricDimensionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimeSeriesMetricDimensionFields":
        self._alias = alias
        return self


class TimeSeriesSeriesFields(GraphQLField):
    values: "TimeSeriesSeriesGraphQLField" = TimeSeriesSeriesGraphQLField("values")
    user_id: "TimeSeriesSeriesGraphQLField" = TimeSeriesSeriesGraphQLField("userId")

    @classmethod
    def dimension(cls) -> "TimeSeriesMetricDimensionFields":
        return TimeSeriesMetricDimensionFields("dimension")

    def fields(
        self,
        *subfields: Union[
            TimeSeriesSeriesGraphQLField, "TimeSeriesMetricDimensionFields"
        ]
    ) -> "TimeSeriesSeriesFields":
        """Subfields should come from the TimeSeriesSeriesFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimeSeriesSeriesFields":
        self._alias = alias
        return self


class TimelineEntryFields(GraphQLField):
    id: "TimelineEntryGraphQLField" = TimelineEntryGraphQLField("id")
    customer_id: "TimelineEntryGraphQLField" = TimelineEntryGraphQLField("customerId")
    thread_id: "TimelineEntryGraphQLField" = TimelineEntryGraphQLField("threadId")

    @classmethod
    def timestamp(cls) -> "DateTimeFields":
        return DateTimeFields("timestamp")

    entry: "EntryUnion" = EntryUnion("entry")
    actor: "ActorUnion" = ActorUnion("actor")

    def fields(
        self,
        *subfields: Union[
            TimelineEntryGraphQLField, "ActorUnion", "DateTimeFields", "EntryUnion"
        ]
    ) -> "TimelineEntryFields":
        """Subfields should come from the TimelineEntryFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimelineEntryFields":
        self._alias = alias
        return self


class TimelineEntryConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "TimelineEntryEdgeFields":
        return TimelineEntryEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            TimelineEntryConnectionGraphQLField,
            "PageInfoFields",
            "TimelineEntryEdgeFields",
        ]
    ) -> "TimelineEntryConnectionFields":
        """Subfields should come from the TimelineEntryConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimelineEntryConnectionFields":
        self._alias = alias
        return self


class TimelineEntryEdgeFields(GraphQLField):
    cursor: "TimelineEntryEdgeGraphQLField" = TimelineEntryEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "TimelineEntryFields":
        return TimelineEntryFields("node")

    def fields(
        self, *subfields: Union[TimelineEntryEdgeGraphQLField, "TimelineEntryFields"]
    ) -> "TimelineEntryEdgeFields":
        """Subfields should come from the TimelineEntryEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimelineEntryEdgeFields":
        self._alias = alias
        return self


class TimelineEventEntryInterface(GraphQLField):
    timeline_event_id: "TimelineEventEntryGraphQLField" = (
        TimelineEventEntryGraphQLField("timelineEventId")
    )
    title: "TimelineEventEntryGraphQLField" = TimelineEventEntryGraphQLField("title")
    components: "EventComponentUnion" = EventComponentUnion("components")
    customer_id: "TimelineEventEntryGraphQLField" = TimelineEventEntryGraphQLField(
        "customerId"
    )
    external_id: "TimelineEventEntryGraphQLField" = TimelineEventEntryGraphQLField(
        "externalId"
    )

    def fields(
        self, *subfields: Union[TimelineEventEntryGraphQLField, "EventComponentUnion"]
    ) -> "TimelineEventEntryInterface":
        """Subfields should come from the TimelineEventEntryInterface class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimelineEventEntryInterface":
        self._alias = alias
        return self

    def on(
        self, type_name: str, *subfields: GraphQLField
    ) -> "TimelineEventEntryInterface":
        self._inline_fragments[type_name] = subfields
        return self


class TimezoneFields(GraphQLField):
    name: "TimezoneGraphQLField" = TimezoneGraphQLField("name")

    def fields(self, *subfields: TimezoneGraphQLField) -> "TimezoneFields":
        """Subfields should come from the TimezoneFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "TimezoneFields":
        self._alias = alias
        return self


class ToggleSlackMessageReactionOutputFields(GraphQLField):
    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            ToggleSlackMessageReactionOutputGraphQLField, "MutationErrorFields"
        ]
    ) -> "ToggleSlackMessageReactionOutputFields":
        """Subfields should come from the ToggleSlackMessageReactionOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "ToggleSlackMessageReactionOutputFields":
        self._alias = alias
        return self


class UnarchiveLabelTypeOutputFields(GraphQLField):
    @classmethod
    def label_type(cls) -> "LabelTypeFields":
        return LabelTypeFields("label_type")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UnarchiveLabelTypeOutputGraphQLField,
            "LabelTypeFields",
            "MutationErrorFields",
        ]
    ) -> "UnarchiveLabelTypeOutputFields":
        """Subfields should come from the UnarchiveLabelTypeOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnarchiveLabelTypeOutputFields":
        self._alias = alias
        return self


class UnassignThreadOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UnassignThreadOutputGraphQLField, "MutationErrorFields", "ThreadFields"
        ]
    ) -> "UnassignThreadOutputFields":
        """Subfields should come from the UnassignThreadOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnassignThreadOutputFields":
        self._alias = alias
        return self


class UnmarkCustomerAsSpamOutputFields(GraphQLField):
    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UnmarkCustomerAsSpamOutputGraphQLField,
            "CustomerFields",
            "MutationErrorFields",
        ]
    ) -> "UnmarkCustomerAsSpamOutputFields":
        """Subfields should come from the UnmarkCustomerAsSpamOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UnmarkCustomerAsSpamOutputFields":
        self._alias = alias
        return self


class UpdateActiveBillingRotaOutputFields(GraphQLField):
    @classmethod
    def billing_rota(cls) -> "BillingRotaFields":
        return BillingRotaFields("billing_rota")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateActiveBillingRotaOutputGraphQLField,
            "BillingRotaFields",
            "MutationErrorFields",
        ]
    ) -> "UpdateActiveBillingRotaOutputFields":
        """Subfields should come from the UpdateActiveBillingRotaOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateActiveBillingRotaOutputFields":
        self._alias = alias
        return self


class UpdateApiKeyOutputFields(GraphQLField):
    @classmethod
    def api_key(cls) -> "ApiKeyFields":
        return ApiKeyFields("api_key")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateApiKeyOutputGraphQLField, "ApiKeyFields", "MutationErrorFields"
        ]
    ) -> "UpdateApiKeyOutputFields":
        """Subfields should come from the UpdateApiKeyOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateApiKeyOutputFields":
        self._alias = alias
        return self


class UpdateAutoresponderOutputFields(GraphQLField):
    @classmethod
    def autoresponder(cls) -> "AutoresponderFields":
        return AutoresponderFields("autoresponder")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateAutoresponderOutputGraphQLField,
            "AutoresponderFields",
            "MutationErrorFields",
        ]
    ) -> "UpdateAutoresponderOutputFields":
        """Subfields should come from the UpdateAutoresponderOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateAutoresponderOutputFields":
        self._alias = alias
        return self


class UpdateChatAppOutputFields(GraphQLField):
    @classmethod
    def chat_app(cls) -> "ChatAppFields":
        return ChatAppFields("chat_app")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateChatAppOutputGraphQLField, "ChatAppFields", "MutationErrorFields"
        ]
    ) -> "UpdateChatAppOutputFields":
        """Subfields should come from the UpdateChatAppOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateChatAppOutputFields":
        self._alias = alias
        return self


class UpdateCompanyTierOutputFields(GraphQLField):
    @classmethod
    def company_tier_membership(cls) -> "CompanyTierMembershipFields":
        return CompanyTierMembershipFields("company_tier_membership")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateCompanyTierOutputGraphQLField,
            "CompanyTierMembershipFields",
            "MutationErrorFields",
        ]
    ) -> "UpdateCompanyTierOutputFields":
        """Subfields should come from the UpdateCompanyTierOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateCompanyTierOutputFields":
        self._alias = alias
        return self


class UpdateConnectedSlackChannelOutputFields(GraphQLField):
    @classmethod
    def connected_slack_channel(cls) -> "ConnectedSlackChannelFields":
        return ConnectedSlackChannelFields("connected_slack_channel")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateConnectedSlackChannelOutputGraphQLField,
            "ConnectedSlackChannelFields",
            "MutationErrorFields",
        ]
    ) -> "UpdateConnectedSlackChannelOutputFields":
        """Subfields should come from the UpdateConnectedSlackChannelOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateConnectedSlackChannelOutputFields":
        self._alias = alias
        return self


class UpdateCustomerCardConfigOutputFields(GraphQLField):
    @classmethod
    def customer_card_config(cls) -> "CustomerCardConfigFields":
        return CustomerCardConfigFields("customer_card_config")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateCustomerCardConfigOutputGraphQLField,
            "CustomerCardConfigFields",
            "MutationErrorFields",
        ]
    ) -> "UpdateCustomerCardConfigOutputFields":
        """Subfields should come from the UpdateCustomerCardConfigOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateCustomerCardConfigOutputFields":
        self._alias = alias
        return self


class UpdateCustomerCompanyOutputFields(GraphQLField):
    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateCustomerCompanyOutputGraphQLField,
            "CustomerFields",
            "MutationErrorFields",
        ]
    ) -> "UpdateCustomerCompanyOutputFields":
        """Subfields should come from the UpdateCustomerCompanyOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateCustomerCompanyOutputFields":
        self._alias = alias
        return self


class UpdateCustomerGroupOutputFields(GraphQLField):
    @classmethod
    def customer_group(cls) -> "CustomerGroupFields":
        return CustomerGroupFields("customer_group")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateCustomerGroupOutputGraphQLField,
            "CustomerGroupFields",
            "MutationErrorFields",
        ]
    ) -> "UpdateCustomerGroupOutputFields":
        """Subfields should come from the UpdateCustomerGroupOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateCustomerGroupOutputFields":
        self._alias = alias
        return self


class UpdateGeneratedReplyOutputFields(GraphQLField):
    @classmethod
    def generated_reply(cls) -> "GeneratedReplyFields":
        return GeneratedReplyFields("generated_reply")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateGeneratedReplyOutputGraphQLField,
            "GeneratedReplyFields",
            "MutationErrorFields",
        ]
    ) -> "UpdateGeneratedReplyOutputFields":
        """Subfields should come from the UpdateGeneratedReplyOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateGeneratedReplyOutputFields":
        self._alias = alias
        return self


class UpdateLabelTypeOutputFields(GraphQLField):
    @classmethod
    def label_type(cls) -> "LabelTypeFields":
        return LabelTypeFields("label_type")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateLabelTypeOutputGraphQLField, "LabelTypeFields", "MutationErrorFields"
        ]
    ) -> "UpdateLabelTypeOutputFields":
        """Subfields should come from the UpdateLabelTypeOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateLabelTypeOutputFields":
        self._alias = alias
        return self


class UpdateMachineUserOutputFields(GraphQLField):
    @classmethod
    def machine_user(cls) -> "MachineUserFields":
        return MachineUserFields("machine_user")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateMachineUserOutputGraphQLField,
            "MachineUserFields",
            "MutationErrorFields",
        ]
    ) -> "UpdateMachineUserOutputFields":
        """Subfields should come from the UpdateMachineUserOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateMachineUserOutputFields":
        self._alias = alias
        return self


class UpdateSavedThreadsViewOutputFields(GraphQLField):
    @classmethod
    def saved_threads_view(cls) -> "SavedThreadsViewFields":
        return SavedThreadsViewFields("saved_threads_view")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateSavedThreadsViewOutputGraphQLField,
            "MutationErrorFields",
            "SavedThreadsViewFields",
        ]
    ) -> "UpdateSavedThreadsViewOutputFields":
        """Subfields should come from the UpdateSavedThreadsViewOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateSavedThreadsViewOutputFields":
        self._alias = alias
        return self


class UpdateServiceLevelAgreementOutputFields(GraphQLField):
    @classmethod
    def service_level_agreement(cls) -> "ServiceLevelAgreementInterface":
        return ServiceLevelAgreementInterface("service_level_agreement")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateServiceLevelAgreementOutputGraphQLField,
            "MutationErrorFields",
            "ServiceLevelAgreementInterface",
        ]
    ) -> "UpdateServiceLevelAgreementOutputFields":
        """Subfields should come from the UpdateServiceLevelAgreementOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateServiceLevelAgreementOutputFields":
        self._alias = alias
        return self


class UpdateSettingOutputFields(GraphQLField):
    setting: "SettingUnion" = SettingUnion("setting")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateSettingOutputGraphQLField, "MutationErrorFields", "SettingUnion"
        ]
    ) -> "UpdateSettingOutputFields":
        """Subfields should come from the UpdateSettingOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateSettingOutputFields":
        self._alias = alias
        return self


class UpdateSnippetOutputFields(GraphQLField):
    @classmethod
    def snippet(cls) -> "SnippetFields":
        return SnippetFields("snippet")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateSnippetOutputGraphQLField, "MutationErrorFields", "SnippetFields"
        ]
    ) -> "UpdateSnippetOutputFields":
        """Subfields should come from the UpdateSnippetOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateSnippetOutputFields":
        self._alias = alias
        return self


class UpdateTenantTierOutputFields(GraphQLField):
    @classmethod
    def tenant_tier_membership(cls) -> "TenantTierMembershipFields":
        return TenantTierMembershipFields("tenant_tier_membership")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateTenantTierOutputGraphQLField,
            "MutationErrorFields",
            "TenantTierMembershipFields",
        ]
    ) -> "UpdateTenantTierOutputFields":
        """Subfields should come from the UpdateTenantTierOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateTenantTierOutputFields":
        self._alias = alias
        return self


class UpdateThreadFieldSchemaOutputFields(GraphQLField):
    @classmethod
    def thread_field_schema(cls) -> "ThreadFieldSchemaFields":
        return ThreadFieldSchemaFields("thread_field_schema")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateThreadFieldSchemaOutputGraphQLField,
            "MutationErrorFields",
            "ThreadFieldSchemaFields",
        ]
    ) -> "UpdateThreadFieldSchemaOutputFields":
        """Subfields should come from the UpdateThreadFieldSchemaOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateThreadFieldSchemaOutputFields":
        self._alias = alias
        return self


class UpdateThreadTenantOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateThreadTenantOutputGraphQLField, "MutationErrorFields", "ThreadFields"
        ]
    ) -> "UpdateThreadTenantOutputFields":
        """Subfields should come from the UpdateThreadTenantOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateThreadTenantOutputFields":
        self._alias = alias
        return self


class UpdateThreadTierOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateThreadTierOutputGraphQLField, "MutationErrorFields", "ThreadFields"
        ]
    ) -> "UpdateThreadTierOutputFields":
        """Subfields should come from the UpdateThreadTierOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateThreadTierOutputFields":
        self._alias = alias
        return self


class UpdateThreadTitleOutputFields(GraphQLField):
    @classmethod
    def thread(cls) -> "ThreadFields":
        return ThreadFields("thread")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateThreadTitleOutputGraphQLField, "MutationErrorFields", "ThreadFields"
        ]
    ) -> "UpdateThreadTitleOutputFields":
        """Subfields should come from the UpdateThreadTitleOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateThreadTitleOutputFields":
        self._alias = alias
        return self


class UpdateTierOutputFields(GraphQLField):
    @classmethod
    def tier(cls) -> "TierFields":
        return TierFields("tier")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateTierOutputGraphQLField, "MutationErrorFields", "TierFields"
        ]
    ) -> "UpdateTierOutputFields":
        """Subfields should come from the UpdateTierOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateTierOutputFields":
        self._alias = alias
        return self


class UpdateWebhookTargetOutputFields(GraphQLField):
    @classmethod
    def webhook_target(cls) -> "WebhookTargetFields":
        return WebhookTargetFields("webhook_target")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateWebhookTargetOutputGraphQLField,
            "MutationErrorFields",
            "WebhookTargetFields",
        ]
    ) -> "UpdateWebhookTargetOutputFields":
        """Subfields should come from the UpdateWebhookTargetOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateWebhookTargetOutputFields":
        self._alias = alias
        return self


class UpdateWorkflowRuleOutputFields(GraphQLField):
    @classmethod
    def workflow_rule(cls) -> "WorkflowRuleFields":
        return WorkflowRuleFields("workflow_rule")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateWorkflowRuleOutputGraphQLField,
            "MutationErrorFields",
            "WorkflowRuleFields",
        ]
    ) -> "UpdateWorkflowRuleOutputFields":
        """Subfields should come from the UpdateWorkflowRuleOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateWorkflowRuleOutputFields":
        self._alias = alias
        return self


class UpdateWorkspaceEmailSettingsOutputFields(GraphQLField):
    @classmethod
    def workspace_email_settings(cls) -> "WorkspaceEmailSettingsFields":
        return WorkspaceEmailSettingsFields("workspace_email_settings")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateWorkspaceEmailSettingsOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceEmailSettingsFields",
        ]
    ) -> "UpdateWorkspaceEmailSettingsOutputFields":
        """Subfields should come from the UpdateWorkspaceEmailSettingsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateWorkspaceEmailSettingsOutputFields":
        self._alias = alias
        return self


class UpdateWorkspaceOutputFields(GraphQLField):
    @classmethod
    def workspace(cls) -> "WorkspaceFields":
        return WorkspaceFields("workspace")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpdateWorkspaceOutputGraphQLField, "MutationErrorFields", "WorkspaceFields"
        ]
    ) -> "UpdateWorkspaceOutputFields":
        """Subfields should come from the UpdateWorkspaceOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpdateWorkspaceOutputFields":
        self._alias = alias
        return self


class UploadFormDataFields(GraphQLField):
    key: "UploadFormDataGraphQLField" = UploadFormDataGraphQLField("key")
    value: "UploadFormDataGraphQLField" = UploadFormDataGraphQLField("value")

    def fields(self, *subfields: UploadFormDataGraphQLField) -> "UploadFormDataFields":
        """Subfields should come from the UploadFormDataFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UploadFormDataFields":
        self._alias = alias
        return self


class UpsertBusinessHoursOutputFields(GraphQLField):
    @classmethod
    def business_hours(cls) -> "BusinessHoursFields":
        return BusinessHoursFields("business_hours")

    result: "UpsertBusinessHoursOutputGraphQLField" = (
        UpsertBusinessHoursOutputGraphQLField("result")
    )

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpsertBusinessHoursOutputGraphQLField,
            "BusinessHoursFields",
            "MutationErrorFields",
        ]
    ) -> "UpsertBusinessHoursOutputFields":
        """Subfields should come from the UpsertBusinessHoursOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpsertBusinessHoursOutputFields":
        self._alias = alias
        return self


class UpsertCompanyOutputFields(GraphQLField):
    @classmethod
    def company(cls) -> "CompanyFields":
        return CompanyFields("company")

    result: "UpsertCompanyOutputGraphQLField" = UpsertCompanyOutputGraphQLField(
        "result"
    )

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpsertCompanyOutputGraphQLField, "CompanyFields", "MutationErrorFields"
        ]
    ) -> "UpsertCompanyOutputFields":
        """Subfields should come from the UpsertCompanyOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpsertCompanyOutputFields":
        self._alias = alias
        return self


class UpsertCustomerGroupOutputFields(GraphQLField):
    @classmethod
    def customer_group(cls) -> "CustomerGroupFields":
        return CustomerGroupFields("customer_group")

    result: "UpsertCustomerGroupOutputGraphQLField" = (
        UpsertCustomerGroupOutputGraphQLField("result")
    )

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpsertCustomerGroupOutputGraphQLField,
            "CustomerGroupFields",
            "MutationErrorFields",
        ]
    ) -> "UpsertCustomerGroupOutputFields":
        """Subfields should come from the UpsertCustomerGroupOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpsertCustomerGroupOutputFields":
        self._alias = alias
        return self


class UpsertCustomerOutputFields(GraphQLField):
    result: "UpsertCustomerOutputGraphQLField" = UpsertCustomerOutputGraphQLField(
        "result"
    )

    @classmethod
    def customer(cls) -> "CustomerFields":
        return CustomerFields("customer")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpsertCustomerOutputGraphQLField, "CustomerFields", "MutationErrorFields"
        ]
    ) -> "UpsertCustomerOutputFields":
        """Subfields should come from the UpsertCustomerOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpsertCustomerOutputFields":
        self._alias = alias
        return self


class UpsertMyEmailSignatureOutputFields(GraphQLField):
    @classmethod
    def email_signature(cls) -> "EmailSignatureFields":
        return EmailSignatureFields("email_signature")

    result: "UpsertMyEmailSignatureOutputGraphQLField" = (
        UpsertMyEmailSignatureOutputGraphQLField("result")
    )

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpsertMyEmailSignatureOutputGraphQLField,
            "EmailSignatureFields",
            "MutationErrorFields",
        ]
    ) -> "UpsertMyEmailSignatureOutputFields":
        """Subfields should come from the UpsertMyEmailSignatureOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpsertMyEmailSignatureOutputFields":
        self._alias = alias
        return self


class UpsertTenantOutputFields(GraphQLField):
    @classmethod
    def tenant(cls) -> "TenantFields":
        return TenantFields("tenant")

    result: "UpsertTenantOutputGraphQLField" = UpsertTenantOutputGraphQLField("result")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpsertTenantOutputGraphQLField, "MutationErrorFields", "TenantFields"
        ]
    ) -> "UpsertTenantOutputFields":
        """Subfields should come from the UpsertTenantOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpsertTenantOutputFields":
        self._alias = alias
        return self


class UpsertThreadFieldOutputFields(GraphQLField):
    @classmethod
    def thread_field(cls) -> "ThreadFieldFields":
        return ThreadFieldFields("thread_field")

    result: "UpsertThreadFieldOutputGraphQLField" = UpsertThreadFieldOutputGraphQLField(
        "result"
    )

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            UpsertThreadFieldOutputGraphQLField,
            "MutationErrorFields",
            "ThreadFieldFields",
        ]
    ) -> "UpsertThreadFieldOutputFields":
        """Subfields should come from the UpsertThreadFieldOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UpsertThreadFieldOutputFields":
        self._alias = alias
        return self


class UserFields(GraphQLField):
    id: "UserGraphQLField" = UserGraphQLField("id")
    full_name: "UserGraphQLField" = UserGraphQLField("fullName")
    public_name: "UserGraphQLField" = UserGraphQLField("publicName")
    avatar_url: "UserGraphQLField" = UserGraphQLField("avatarUrl")
    email: "UserGraphQLField" = UserGraphQLField("email")

    @classmethod
    def roles(cls) -> "RoleFields":
        return RoleFields("roles")

    @classmethod
    def role(cls) -> "RoleFields":
        return RoleFields("role")

    @classmethod
    def additional_legacy_roles(cls) -> "RoleFields":
        return RoleFields("additional_legacy_roles")

    @classmethod
    def slack_identities(cls) -> "SlackUserIdentityFields":
        return SlackUserIdentityFields("slack_identities")

    status: "UserGraphQLField" = UserGraphQLField("status")

    @classmethod
    def status_changed_at(cls) -> "DateTimeFields":
        return DateTimeFields("status_changed_at")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")
    is_deleted: "UserGraphQLField" = UserGraphQLField("isDeleted")

    @classmethod
    def deleted_at(cls) -> "DateTimeFields":
        return DateTimeFields("deleted_at")

    deleted_by: "ActorUnion" = ActorUnion("deletedBy")

    def fields(
        self,
        *subfields: Union[
            UserGraphQLField,
            "ActorUnion",
            "DateTimeFields",
            "InternalActorUnion",
            "RoleFields",
            "SlackUserIdentityFields",
        ]
    ) -> "UserFields":
        """Subfields should come from the UserFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserFields":
        self._alias = alias
        return self


class UserAccountFields(GraphQLField):
    id: "UserAccountGraphQLField" = UserAccountGraphQLField("id")
    full_name: "UserAccountGraphQLField" = UserAccountGraphQLField("fullName")
    public_name: "UserAccountGraphQLField" = UserAccountGraphQLField("publicName")
    email: "UserAccountGraphQLField" = UserAccountGraphQLField("email")

    def fields(self, *subfields: UserAccountGraphQLField) -> "UserAccountFields":
        """Subfields should come from the UserAccountFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserAccountFields":
        self._alias = alias
        return self


class UserActorFields(GraphQLField):
    user_id: "UserActorGraphQLField" = UserActorGraphQLField("userId")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self, *subfields: Union[UserActorGraphQLField, "UserFields"]
    ) -> "UserActorFields":
        """Subfields should come from the UserActorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserActorFields":
        self._alias = alias
        return self


class UserAuthSlackInstallationInfoFields(GraphQLField):
    installation_url: "UserAuthSlackInstallationInfoGraphQLField" = (
        UserAuthSlackInstallationInfoGraphQLField("installationUrl")
    )

    def fields(
        self, *subfields: UserAuthSlackInstallationInfoGraphQLField
    ) -> "UserAuthSlackInstallationInfoFields":
        """Subfields should come from the UserAuthSlackInstallationInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserAuthSlackInstallationInfoFields":
        self._alias = alias
        return self


class UserAuthSlackIntegrationFields(GraphQLField):
    integration_id: "UserAuthSlackIntegrationGraphQLField" = (
        UserAuthSlackIntegrationGraphQLField("integrationId")
    )
    slack_team_id: "UserAuthSlackIntegrationGraphQLField" = (
        UserAuthSlackIntegrationGraphQLField("slackTeamId")
    )
    slack_team_name: "UserAuthSlackIntegrationGraphQLField" = (
        UserAuthSlackIntegrationGraphQLField("slackTeamName")
    )
    is_reinstall_required: "UserAuthSlackIntegrationGraphQLField" = (
        UserAuthSlackIntegrationGraphQLField("isReinstallRequired")
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            UserAuthSlackIntegrationGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "UserAuthSlackIntegrationFields":
        """Subfields should come from the UserAuthSlackIntegrationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserAuthSlackIntegrationFields":
        self._alias = alias
        return self


class UserConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "UserEdgeFields":
        return UserEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            UserConnectionGraphQLField, "PageInfoFields", "UserEdgeFields"
        ]
    ) -> "UserConnectionFields":
        """Subfields should come from the UserConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserConnectionFields":
        self._alias = alias
        return self


class UserEdgeFields(GraphQLField):
    cursor: "UserEdgeGraphQLField" = UserEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "UserFields":
        return UserFields("node")

    def fields(
        self, *subfields: Union[UserEdgeGraphQLField, "UserFields"]
    ) -> "UserEdgeFields":
        """Subfields should come from the UserEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserEdgeFields":
        self._alias = alias
        return self


class UserEmailActorFields(GraphQLField):
    user_id: "UserEmailActorGraphQLField" = UserEmailActorGraphQLField("userId")

    @classmethod
    def user(cls) -> "UserFields":
        return UserFields("user")

    def fields(
        self, *subfields: Union[UserEmailActorGraphQLField, "UserFields"]
    ) -> "UserEmailActorFields":
        """Subfields should come from the UserEmailActorFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserEmailActorFields":
        self._alias = alias
        return self


class UserLinearInstallationInfoFields(GraphQLField):
    installation_url: "UserLinearInstallationInfoGraphQLField" = (
        UserLinearInstallationInfoGraphQLField("installationUrl")
    )

    def fields(
        self, *subfields: UserLinearInstallationInfoGraphQLField
    ) -> "UserLinearInstallationInfoFields":
        """Subfields should come from the UserLinearInstallationInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserLinearInstallationInfoFields":
        self._alias = alias
        return self


class UserLinearIntegrationFields(GraphQLField):
    integration_id: "UserLinearIntegrationGraphQLField" = (
        UserLinearIntegrationGraphQLField("integrationId")
    )
    linear_organisation_name: "UserLinearIntegrationGraphQLField" = (
        UserLinearIntegrationGraphQLField("linearOrganisationName")
    )
    linear_organisation_id: "UserLinearIntegrationGraphQLField" = (
        UserLinearIntegrationGraphQLField("linearOrganisationId")
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            UserLinearIntegrationGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "UserLinearIntegrationFields":
        """Subfields should come from the UserLinearIntegrationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserLinearIntegrationFields":
        self._alias = alias
        return self


class UserMSTeamsInstallationInfoFields(GraphQLField):
    installation_url: "UserMSTeamsInstallationInfoGraphQLField" = (
        UserMSTeamsInstallationInfoGraphQLField("installationUrl")
    )

    def fields(
        self, *subfields: UserMSTeamsInstallationInfoGraphQLField
    ) -> "UserMSTeamsInstallationInfoFields":
        """Subfields should come from the UserMSTeamsInstallationInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserMSTeamsInstallationInfoFields":
        self._alias = alias
        return self


class UserMSTeamsIntegrationFields(GraphQLField):
    id: "UserMSTeamsIntegrationGraphQLField" = UserMSTeamsIntegrationGraphQLField("id")
    ms_teams_tenant_id: "UserMSTeamsIntegrationGraphQLField" = (
        UserMSTeamsIntegrationGraphQLField("msTeamsTenantId")
    )
    is_reinstall_required: "UserMSTeamsIntegrationGraphQLField" = (
        UserMSTeamsIntegrationGraphQLField("isReinstallRequired")
    )
    ms_teams_preferred_username: "UserMSTeamsIntegrationGraphQLField" = (
        UserMSTeamsIntegrationGraphQLField("msTeamsPreferredUsername")
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            UserMSTeamsIntegrationGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "UserMSTeamsIntegrationFields":
        """Subfields should come from the UserMSTeamsIntegrationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserMSTeamsIntegrationFields":
        self._alias = alias
        return self


class UserSlackInstallationInfoFields(GraphQLField):
    installation_url: "UserSlackInstallationInfoGraphQLField" = (
        UserSlackInstallationInfoGraphQLField("installationUrl")
    )

    def fields(
        self, *subfields: UserSlackInstallationInfoGraphQLField
    ) -> "UserSlackInstallationInfoFields":
        """Subfields should come from the UserSlackInstallationInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserSlackInstallationInfoFields":
        self._alias = alias
        return self


class UserSlackIntegrationFields(GraphQLField):
    integration_id: "UserSlackIntegrationGraphQLField" = (
        UserSlackIntegrationGraphQLField("integrationId")
    )
    slack_team_name: "UserSlackIntegrationGraphQLField" = (
        UserSlackIntegrationGraphQLField("slackTeamName")
    )
    is_reinstall_required: "UserSlackIntegrationGraphQLField" = (
        UserSlackIntegrationGraphQLField("isReinstallRequired")
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            UserSlackIntegrationGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "UserSlackIntegrationFields":
        """Subfields should come from the UserSlackIntegrationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "UserSlackIntegrationFields":
        self._alias = alias
        return self


class VerifyWorkspaceEmailDnsSettingsOutputFields(GraphQLField):
    @classmethod
    def workspace_email_domain_settings(cls) -> "WorkspaceEmailDomainSettingsFields":
        return WorkspaceEmailDomainSettingsFields("workspace_email_domain_settings")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            VerifyWorkspaceEmailDnsSettingsOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceEmailDomainSettingsFields",
        ]
    ) -> "VerifyWorkspaceEmailDnsSettingsOutputFields":
        """Subfields should come from the VerifyWorkspaceEmailDnsSettingsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VerifyWorkspaceEmailDnsSettingsOutputFields":
        self._alias = alias
        return self


class VerifyWorkspaceEmailForwardingSettingsOutputFields(GraphQLField):
    @classmethod
    def workspace_email_domain_settings(cls) -> "WorkspaceEmailDomainSettingsFields":
        return WorkspaceEmailDomainSettingsFields("workspace_email_domain_settings")

    @classmethod
    def error(cls) -> "MutationErrorFields":
        return MutationErrorFields("error")

    def fields(
        self,
        *subfields: Union[
            VerifyWorkspaceEmailForwardingSettingsOutputGraphQLField,
            "MutationErrorFields",
            "WorkspaceEmailDomainSettingsFields",
        ]
    ) -> "VerifyWorkspaceEmailForwardingSettingsOutputFields":
        """Subfields should come from the VerifyWorkspaceEmailForwardingSettingsOutputFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "VerifyWorkspaceEmailForwardingSettingsOutputFields":
        self._alias = alias
        return self


class WebhookTargetFields(GraphQLField):
    id: "WebhookTargetGraphQLField" = WebhookTargetGraphQLField("id")
    url: "WebhookTargetGraphQLField" = WebhookTargetGraphQLField("url")
    description: "WebhookTargetGraphQLField" = WebhookTargetGraphQLField("description")

    @classmethod
    def event_subscriptions(cls) -> "WebhookTargetEventSubscriptionFields":
        return WebhookTargetEventSubscriptionFields("event_subscriptions")

    version: "WebhookTargetGraphQLField" = WebhookTargetGraphQLField("version")
    is_enabled: "WebhookTargetGraphQLField" = WebhookTargetGraphQLField("isEnabled")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            WebhookTargetGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
            "WebhookTargetEventSubscriptionFields",
        ]
    ) -> "WebhookTargetFields":
        """Subfields should come from the WebhookTargetFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WebhookTargetFields":
        self._alias = alias
        return self


class WebhookTargetConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "WebhookTargetEdgeFields":
        return WebhookTargetEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            WebhookTargetConnectionGraphQLField,
            "PageInfoFields",
            "WebhookTargetEdgeFields",
        ]
    ) -> "WebhookTargetConnectionFields":
        """Subfields should come from the WebhookTargetConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WebhookTargetConnectionFields":
        self._alias = alias
        return self


class WebhookTargetEdgeFields(GraphQLField):
    cursor: "WebhookTargetEdgeGraphQLField" = WebhookTargetEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "WebhookTargetFields":
        return WebhookTargetFields("node")

    def fields(
        self, *subfields: Union[WebhookTargetEdgeGraphQLField, "WebhookTargetFields"]
    ) -> "WebhookTargetEdgeFields":
        """Subfields should come from the WebhookTargetEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WebhookTargetEdgeFields":
        self._alias = alias
        return self


class WebhookTargetEventSubscriptionFields(GraphQLField):
    event_type: "WebhookTargetEventSubscriptionGraphQLField" = (
        WebhookTargetEventSubscriptionGraphQLField("eventType")
    )

    def fields(
        self, *subfields: WebhookTargetEventSubscriptionGraphQLField
    ) -> "WebhookTargetEventSubscriptionFields":
        """Subfields should come from the WebhookTargetEventSubscriptionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WebhookTargetEventSubscriptionFields":
        self._alias = alias
        return self


class WebhookVersionFields(GraphQLField):
    version: "WebhookVersionGraphQLField" = WebhookVersionGraphQLField("version")
    is_deprecated: "WebhookVersionGraphQLField" = WebhookVersionGraphQLField(
        "isDeprecated"
    )
    is_latest: "WebhookVersionGraphQLField" = WebhookVersionGraphQLField("isLatest")

    def fields(self, *subfields: WebhookVersionGraphQLField) -> "WebhookVersionFields":
        """Subfields should come from the WebhookVersionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WebhookVersionFields":
        self._alias = alias
        return self


class WebhookVersionConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "WebhookVersionEdgeFields":
        return WebhookVersionEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            WebhookVersionConnectionGraphQLField,
            "PageInfoFields",
            "WebhookVersionEdgeFields",
        ]
    ) -> "WebhookVersionConnectionFields":
        """Subfields should come from the WebhookVersionConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WebhookVersionConnectionFields":
        self._alias = alias
        return self


class WebhookVersionEdgeFields(GraphQLField):
    cursor: "WebhookVersionEdgeGraphQLField" = WebhookVersionEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "WebhookVersionFields":
        return WebhookVersionFields("node")

    def fields(
        self, *subfields: Union[WebhookVersionEdgeGraphQLField, "WebhookVersionFields"]
    ) -> "WebhookVersionEdgeFields":
        """Subfields should come from the WebhookVersionEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WebhookVersionEdgeFields":
        self._alias = alias
        return self


class WorkflowRuleFields(GraphQLField):
    id: "WorkflowRuleGraphQLField" = WorkflowRuleGraphQLField("id")
    name: "WorkflowRuleGraphQLField" = WorkflowRuleGraphQLField("name")
    payload: "WorkflowRuleGraphQLField" = WorkflowRuleGraphQLField("payload")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            WorkflowRuleGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "WorkflowRuleFields":
        """Subfields should come from the WorkflowRuleFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkflowRuleFields":
        self._alias = alias
        return self


class WorkflowRuleConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "WorkflowRuleEdgeFields":
        return WorkflowRuleEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            WorkflowRuleConnectionGraphQLField,
            "PageInfoFields",
            "WorkflowRuleEdgeFields",
        ]
    ) -> "WorkflowRuleConnectionFields":
        """Subfields should come from the WorkflowRuleConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkflowRuleConnectionFields":
        self._alias = alias
        return self


class WorkflowRuleEdgeFields(GraphQLField):
    cursor: "WorkflowRuleEdgeGraphQLField" = WorkflowRuleEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "WorkflowRuleFields":
        return WorkflowRuleFields("node")

    def fields(
        self, *subfields: Union[WorkflowRuleEdgeGraphQLField, "WorkflowRuleFields"]
    ) -> "WorkflowRuleEdgeFields":
        """Subfields should come from the WorkflowRuleEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkflowRuleEdgeFields":
        self._alias = alias
        return self


class WorkspaceFields(GraphQLField):
    id: "WorkspaceGraphQLField" = WorkspaceGraphQLField("id")
    name: "WorkspaceGraphQLField" = WorkspaceGraphQLField("name")
    public_name: "WorkspaceGraphQLField" = WorkspaceGraphQLField("publicName")
    is_demo_workspace: "WorkspaceGraphQLField" = WorkspaceGraphQLField(
        "isDemoWorkspace"
    )
    domain_name: "WorkspaceGraphQLField" = WorkspaceGraphQLField("domainName")
    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    @classmethod
    def workspace_email_settings(cls) -> "WorkspaceEmailSettingsFields":
        return WorkspaceEmailSettingsFields("workspace_email_settings")

    @classmethod
    def workspace_chat_settings(cls) -> "WorkspaceChatSettingsFields":
        return WorkspaceChatSettingsFields("workspace_chat_settings")

    def fields(
        self,
        *subfields: Union[
            WorkspaceGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
            "WorkspaceChatSettingsFields",
            "WorkspaceEmailSettingsFields",
        ]
    ) -> "WorkspaceFields":
        """Subfields should come from the WorkspaceFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceFields":
        self._alias = alias
        return self


class WorkspaceChatSettingsFields(GraphQLField):
    is_enabled: "WorkspaceChatSettingsGraphQLField" = WorkspaceChatSettingsGraphQLField(
        "isEnabled"
    )

    def fields(
        self, *subfields: WorkspaceChatSettingsGraphQLField
    ) -> "WorkspaceChatSettingsFields":
        """Subfields should come from the WorkspaceChatSettingsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceChatSettingsFields":
        self._alias = alias
        return self


class WorkspaceConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "WorkspaceEdgeFields":
        return WorkspaceEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            WorkspaceConnectionGraphQLField, "PageInfoFields", "WorkspaceEdgeFields"
        ]
    ) -> "WorkspaceConnectionFields":
        """Subfields should come from the WorkspaceConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceConnectionFields":
        self._alias = alias
        return self


class WorkspaceDiscordChannelInstallationInfoFields(GraphQLField):
    installation_url: "WorkspaceDiscordChannelInstallationInfoGraphQLField" = (
        WorkspaceDiscordChannelInstallationInfoGraphQLField("installationUrl")
    )

    def fields(
        self, *subfields: WorkspaceDiscordChannelInstallationInfoGraphQLField
    ) -> "WorkspaceDiscordChannelInstallationInfoFields":
        """Subfields should come from the WorkspaceDiscordChannelInstallationInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceDiscordChannelInstallationInfoFields":
        self._alias = alias
        return self


class WorkspaceDiscordChannelIntegrationFields(GraphQLField):
    id: "WorkspaceDiscordChannelIntegrationGraphQLField" = (
        WorkspaceDiscordChannelIntegrationGraphQLField("id")
    )
    discord_guild_id: "WorkspaceDiscordChannelIntegrationGraphQLField" = (
        WorkspaceDiscordChannelIntegrationGraphQLField("discordGuildId")
    )
    discord_guild_name: "WorkspaceDiscordChannelIntegrationGraphQLField" = (
        WorkspaceDiscordChannelIntegrationGraphQLField("discordGuildName")
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            WorkspaceDiscordChannelIntegrationGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
        ]
    ) -> "WorkspaceDiscordChannelIntegrationFields":
        """Subfields should come from the WorkspaceDiscordChannelIntegrationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceDiscordChannelIntegrationFields":
        self._alias = alias
        return self


class WorkspaceDiscordChannelIntegrationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "WorkspaceDiscordChannelIntegrationEdgeFields":
        return WorkspaceDiscordChannelIntegrationEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            WorkspaceDiscordChannelIntegrationConnectionGraphQLField,
            "PageInfoFields",
            "WorkspaceDiscordChannelIntegrationEdgeFields",
        ]
    ) -> "WorkspaceDiscordChannelIntegrationConnectionFields":
        """Subfields should come from the WorkspaceDiscordChannelIntegrationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceDiscordChannelIntegrationConnectionFields":
        self._alias = alias
        return self


class WorkspaceDiscordChannelIntegrationEdgeFields(GraphQLField):
    cursor: "WorkspaceDiscordChannelIntegrationEdgeGraphQLField" = (
        WorkspaceDiscordChannelIntegrationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "WorkspaceDiscordChannelIntegrationFields":
        return WorkspaceDiscordChannelIntegrationFields("node")

    def fields(
        self,
        *subfields: Union[
            WorkspaceDiscordChannelIntegrationEdgeGraphQLField,
            "WorkspaceDiscordChannelIntegrationFields",
        ]
    ) -> "WorkspaceDiscordChannelIntegrationEdgeFields":
        """Subfields should come from the WorkspaceDiscordChannelIntegrationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceDiscordChannelIntegrationEdgeFields":
        self._alias = alias
        return self


class WorkspaceDiscordIntegrationFields(GraphQLField):
    integration_id: "WorkspaceDiscordIntegrationGraphQLField" = (
        WorkspaceDiscordIntegrationGraphQLField("integrationId")
    )
    name: "WorkspaceDiscordIntegrationGraphQLField" = (
        WorkspaceDiscordIntegrationGraphQLField("name")
    )
    webhook_url: "WorkspaceDiscordIntegrationGraphQLField" = (
        WorkspaceDiscordIntegrationGraphQLField("webhookUrl")
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            WorkspaceDiscordIntegrationGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
        ]
    ) -> "WorkspaceDiscordIntegrationFields":
        """Subfields should come from the WorkspaceDiscordIntegrationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceDiscordIntegrationFields":
        self._alias = alias
        return self


class WorkspaceDiscordIntegrationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "WorkspaceDiscordIntegrationEdgeFields":
        return WorkspaceDiscordIntegrationEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            WorkspaceDiscordIntegrationConnectionGraphQLField,
            "PageInfoFields",
            "WorkspaceDiscordIntegrationEdgeFields",
        ]
    ) -> "WorkspaceDiscordIntegrationConnectionFields":
        """Subfields should come from the WorkspaceDiscordIntegrationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceDiscordIntegrationConnectionFields":
        self._alias = alias
        return self


class WorkspaceDiscordIntegrationEdgeFields(GraphQLField):
    cursor: "WorkspaceDiscordIntegrationEdgeGraphQLField" = (
        WorkspaceDiscordIntegrationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "WorkspaceDiscordIntegrationFields":
        return WorkspaceDiscordIntegrationFields("node")

    def fields(
        self,
        *subfields: Union[
            WorkspaceDiscordIntegrationEdgeGraphQLField,
            "WorkspaceDiscordIntegrationFields",
        ]
    ) -> "WorkspaceDiscordIntegrationEdgeFields":
        """Subfields should come from the WorkspaceDiscordIntegrationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceDiscordIntegrationEdgeFields":
        self._alias = alias
        return self


class WorkspaceEdgeFields(GraphQLField):
    cursor: "WorkspaceEdgeGraphQLField" = WorkspaceEdgeGraphQLField("cursor")

    @classmethod
    def node(cls) -> "WorkspaceFields":
        return WorkspaceFields("node")

    def fields(
        self, *subfields: Union[WorkspaceEdgeGraphQLField, "WorkspaceFields"]
    ) -> "WorkspaceEdgeFields":
        """Subfields should come from the WorkspaceEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceEdgeFields":
        self._alias = alias
        return self


class WorkspaceEmailDomainSettingsFields(GraphQLField):
    domain_name: "WorkspaceEmailDomainSettingsGraphQLField" = (
        WorkspaceEmailDomainSettingsGraphQLField("domainName")
    )
    support_email_address: "WorkspaceEmailDomainSettingsGraphQLField" = (
        WorkspaceEmailDomainSettingsGraphQLField("supportEmailAddress")
    )
    alternate_support_email_addresses: "WorkspaceEmailDomainSettingsGraphQLField" = (
        WorkspaceEmailDomainSettingsGraphQLField("alternateSupportEmailAddresses")
    )
    is_forwarding_configured: "WorkspaceEmailDomainSettingsGraphQLField" = (
        WorkspaceEmailDomainSettingsGraphQLField("isForwardingConfigured")
    )
    inbound_forwarding_email: "WorkspaceEmailDomainSettingsGraphQLField" = (
        WorkspaceEmailDomainSettingsGraphQLField("inboundForwardingEmail")
    )
    is_domain_configured: "WorkspaceEmailDomainSettingsGraphQLField" = (
        WorkspaceEmailDomainSettingsGraphQLField("isDomainConfigured")
    )

    @classmethod
    def dkim_dns_record(cls) -> "DnsRecordFields":
        return DnsRecordFields("dkim_dns_record")

    @classmethod
    def return_path_dns_record(cls) -> "DnsRecordFields":
        return DnsRecordFields("return_path_dns_record")

    def fields(
        self,
        *subfields: Union[WorkspaceEmailDomainSettingsGraphQLField, "DnsRecordFields"]
    ) -> "WorkspaceEmailDomainSettingsFields":
        """Subfields should come from the WorkspaceEmailDomainSettingsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceEmailDomainSettingsFields":
        self._alias = alias
        return self


class WorkspaceEmailSettingsFields(GraphQLField):
    is_enabled: "WorkspaceEmailSettingsGraphQLField" = (
        WorkspaceEmailSettingsGraphQLField("isEnabled")
    )

    @classmethod
    def workspace_email_domain_settings(cls) -> "WorkspaceEmailDomainSettingsFields":
        return WorkspaceEmailDomainSettingsFields("workspace_email_domain_settings")

    bcc_email: "WorkspaceEmailSettingsGraphQLField" = (
        WorkspaceEmailSettingsGraphQLField("bccEmail")
    )

    def fields(
        self,
        *subfields: Union[
            WorkspaceEmailSettingsGraphQLField, "WorkspaceEmailDomainSettingsFields"
        ]
    ) -> "WorkspaceEmailSettingsFields":
        """Subfields should come from the WorkspaceEmailSettingsFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceEmailSettingsFields":
        self._alias = alias
        return self


class WorkspaceFileFields(GraphQLField):
    id: "WorkspaceFileGraphQLField" = WorkspaceFileGraphQLField("id")
    file_name: "WorkspaceFileGraphQLField" = WorkspaceFileGraphQLField("fileName")

    @classmethod
    def file_size(cls) -> "FileSizeFields":
        return FileSizeFields("file_size")

    file_extension: "WorkspaceFileGraphQLField" = WorkspaceFileGraphQLField(
        "fileExtension"
    )
    file_mime_type: "WorkspaceFileGraphQLField" = WorkspaceFileGraphQLField(
        "fileMimeType"
    )
    visibility: "WorkspaceFileGraphQLField" = WorkspaceFileGraphQLField("visibility")

    @classmethod
    def download_url(cls) -> "WorkspaceFileDownloadUrlFields":
        return WorkspaceFileDownloadUrlFields("download_url")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            WorkspaceFileGraphQLField,
            "DateTimeFields",
            "FileSizeFields",
            "InternalActorUnion",
            "WorkspaceFileDownloadUrlFields",
        ]
    ) -> "WorkspaceFileFields":
        """Subfields should come from the WorkspaceFileFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceFileFields":
        self._alias = alias
        return self


class WorkspaceFileDownloadUrlFields(GraphQLField):
    download_url: "WorkspaceFileDownloadUrlGraphQLField" = (
        WorkspaceFileDownloadUrlGraphQLField("downloadUrl")
    )

    @classmethod
    def expires_at(cls) -> "DateTimeFields":
        return DateTimeFields("expires_at")

    def fields(
        self, *subfields: Union[WorkspaceFileDownloadUrlGraphQLField, "DateTimeFields"]
    ) -> "WorkspaceFileDownloadUrlFields":
        """Subfields should come from the WorkspaceFileDownloadUrlFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceFileDownloadUrlFields":
        self._alias = alias
        return self


class WorkspaceFileUploadUrlFields(GraphQLField):
    @classmethod
    def workspace_file(cls) -> "WorkspaceFileFields":
        return WorkspaceFileFields("workspace_file")

    upload_form_url: "WorkspaceFileUploadUrlGraphQLField" = (
        WorkspaceFileUploadUrlGraphQLField("uploadFormUrl")
    )

    @classmethod
    def upload_form_data(cls) -> "UploadFormDataFields":
        return UploadFormDataFields("upload_form_data")

    @classmethod
    def expires_at(cls) -> "DateTimeFields":
        return DateTimeFields("expires_at")

    def fields(
        self,
        *subfields: Union[
            WorkspaceFileUploadUrlGraphQLField,
            "DateTimeFields",
            "UploadFormDataFields",
            "WorkspaceFileFields",
        ]
    ) -> "WorkspaceFileUploadUrlFields":
        """Subfields should come from the WorkspaceFileUploadUrlFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceFileUploadUrlFields":
        self._alias = alias
        return self


class WorkspaceHmacFields(GraphQLField):
    hmac_secret: "WorkspaceHmacGraphQLField" = WorkspaceHmacGraphQLField("hmacSecret")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            WorkspaceHmacGraphQLField, "DateTimeFields", "InternalActorUnion"
        ]
    ) -> "WorkspaceHmacFields":
        """Subfields should come from the WorkspaceHmacFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceHmacFields":
        self._alias = alias
        return self


class WorkspaceInviteFields(GraphQLField):
    id: "WorkspaceInviteGraphQLField" = WorkspaceInviteGraphQLField("id")
    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    email: "WorkspaceInviteGraphQLField" = WorkspaceInviteGraphQLField("email")

    @classmethod
    def workspace(cls) -> "WorkspaceFields":
        return WorkspaceFields("workspace")

    is_accepted: "WorkspaceInviteGraphQLField" = WorkspaceInviteGraphQLField(
        "isAccepted"
    )

    @classmethod
    def roles(cls) -> "RoleFields":
        return RoleFields("roles")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    using_billing_rota_seat: "WorkspaceInviteGraphQLField" = (
        WorkspaceInviteGraphQLField("usingBillingRotaSeat")
    )

    @classmethod
    def role(cls) -> "RoleFields":
        return RoleFields("role")

    def fields(
        self,
        *subfields: Union[
            WorkspaceInviteGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
            "RoleFields",
            "WorkspaceFields",
        ]
    ) -> "WorkspaceInviteFields":
        """Subfields should come from the WorkspaceInviteFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceInviteFields":
        self._alias = alias
        return self


class WorkspaceInviteConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "WorkspaceInviteEdgeFields":
        return WorkspaceInviteEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            WorkspaceInviteConnectionGraphQLField,
            "PageInfoFields",
            "WorkspaceInviteEdgeFields",
        ]
    ) -> "WorkspaceInviteConnectionFields":
        """Subfields should come from the WorkspaceInviteConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceInviteConnectionFields":
        self._alias = alias
        return self


class WorkspaceInviteEdgeFields(GraphQLField):
    cursor: "WorkspaceInviteEdgeGraphQLField" = WorkspaceInviteEdgeGraphQLField(
        "cursor"
    )

    @classmethod
    def node(cls) -> "WorkspaceInviteFields":
        return WorkspaceInviteFields("node")

    def fields(
        self,
        *subfields: Union[WorkspaceInviteEdgeGraphQLField, "WorkspaceInviteFields"]
    ) -> "WorkspaceInviteEdgeFields":
        """Subfields should come from the WorkspaceInviteEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceInviteEdgeFields":
        self._alias = alias
        return self


class WorkspaceMSTeamsInstallationInfoFields(GraphQLField):
    installation_url: "WorkspaceMSTeamsInstallationInfoGraphQLField" = (
        WorkspaceMSTeamsInstallationInfoGraphQLField("installationUrl")
    )

    def fields(
        self, *subfields: WorkspaceMSTeamsInstallationInfoGraphQLField
    ) -> "WorkspaceMSTeamsInstallationInfoFields":
        """Subfields should come from the WorkspaceMSTeamsInstallationInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceMSTeamsInstallationInfoFields":
        self._alias = alias
        return self


class WorkspaceMSTeamsIntegrationFields(GraphQLField):
    id: "WorkspaceMSTeamsIntegrationGraphQLField" = (
        WorkspaceMSTeamsIntegrationGraphQLField("id")
    )
    ms_teams_tenant_id: "WorkspaceMSTeamsIntegrationGraphQLField" = (
        WorkspaceMSTeamsIntegrationGraphQLField("msTeamsTenantId")
    )
    is_reinstall_required: "WorkspaceMSTeamsIntegrationGraphQLField" = (
        WorkspaceMSTeamsIntegrationGraphQLField("isReinstallRequired")
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            WorkspaceMSTeamsIntegrationGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
        ]
    ) -> "WorkspaceMSTeamsIntegrationFields":
        """Subfields should come from the WorkspaceMSTeamsIntegrationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceMSTeamsIntegrationFields":
        self._alias = alias
        return self


class WorkspaceSlackChannelInstallationInfoFields(GraphQLField):
    installation_url: "WorkspaceSlackChannelInstallationInfoGraphQLField" = (
        WorkspaceSlackChannelInstallationInfoGraphQLField("installationUrl")
    )

    def fields(
        self, *subfields: WorkspaceSlackChannelInstallationInfoGraphQLField
    ) -> "WorkspaceSlackChannelInstallationInfoFields":
        """Subfields should come from the WorkspaceSlackChannelInstallationInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceSlackChannelInstallationInfoFields":
        self._alias = alias
        return self


class WorkspaceSlackChannelIntegrationFields(GraphQLField):
    integration_id: "WorkspaceSlackChannelIntegrationGraphQLField" = (
        WorkspaceSlackChannelIntegrationGraphQLField("integrationId")
    )
    slack_team_id: "WorkspaceSlackChannelIntegrationGraphQLField" = (
        WorkspaceSlackChannelIntegrationGraphQLField("slackTeamId")
    )
    slack_team_name: "WorkspaceSlackChannelIntegrationGraphQLField" = (
        WorkspaceSlackChannelIntegrationGraphQLField("slackTeamName")
    )
    slack_team_image_url_68_px: "WorkspaceSlackChannelIntegrationGraphQLField" = (
        WorkspaceSlackChannelIntegrationGraphQLField("slackTeamImageUrl68px")
    )
    is_reinstall_required: "WorkspaceSlackChannelIntegrationGraphQLField" = (
        WorkspaceSlackChannelIntegrationGraphQLField("isReinstallRequired")
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            WorkspaceSlackChannelIntegrationGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
        ]
    ) -> "WorkspaceSlackChannelIntegrationFields":
        """Subfields should come from the WorkspaceSlackChannelIntegrationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceSlackChannelIntegrationFields":
        self._alias = alias
        return self


class WorkspaceSlackChannelIntegrationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "WorkspaceSlackChannelIntegrationEdgeFields":
        return WorkspaceSlackChannelIntegrationEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            WorkspaceSlackChannelIntegrationConnectionGraphQLField,
            "PageInfoFields",
            "WorkspaceSlackChannelIntegrationEdgeFields",
        ]
    ) -> "WorkspaceSlackChannelIntegrationConnectionFields":
        """Subfields should come from the WorkspaceSlackChannelIntegrationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceSlackChannelIntegrationConnectionFields":
        self._alias = alias
        return self


class WorkspaceSlackChannelIntegrationEdgeFields(GraphQLField):
    cursor: "WorkspaceSlackChannelIntegrationEdgeGraphQLField" = (
        WorkspaceSlackChannelIntegrationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "WorkspaceSlackChannelIntegrationFields":
        return WorkspaceSlackChannelIntegrationFields("node")

    def fields(
        self,
        *subfields: Union[
            WorkspaceSlackChannelIntegrationEdgeGraphQLField,
            "WorkspaceSlackChannelIntegrationFields",
        ]
    ) -> "WorkspaceSlackChannelIntegrationEdgeFields":
        """Subfields should come from the WorkspaceSlackChannelIntegrationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceSlackChannelIntegrationEdgeFields":
        self._alias = alias
        return self


class WorkspaceSlackInstallationInfoFields(GraphQLField):
    installation_url: "WorkspaceSlackInstallationInfoGraphQLField" = (
        WorkspaceSlackInstallationInfoGraphQLField("installationUrl")
    )

    def fields(
        self, *subfields: WorkspaceSlackInstallationInfoGraphQLField
    ) -> "WorkspaceSlackInstallationInfoFields":
        """Subfields should come from the WorkspaceSlackInstallationInfoFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceSlackInstallationInfoFields":
        self._alias = alias
        return self


class WorkspaceSlackIntegrationFields(GraphQLField):
    integration_id: "WorkspaceSlackIntegrationGraphQLField" = (
        WorkspaceSlackIntegrationGraphQLField("integrationId")
    )
    slack_channel_name: "WorkspaceSlackIntegrationGraphQLField" = (
        WorkspaceSlackIntegrationGraphQLField("slackChannelName")
    )
    slack_team_name: "WorkspaceSlackIntegrationGraphQLField" = (
        WorkspaceSlackIntegrationGraphQLField("slackTeamName")
    )
    slack_team_image_url_68_px: "WorkspaceSlackIntegrationGraphQLField" = (
        WorkspaceSlackIntegrationGraphQLField("slackTeamImageUrl68px")
    )
    is_reinstall_required: "WorkspaceSlackIntegrationGraphQLField" = (
        WorkspaceSlackIntegrationGraphQLField("isReinstallRequired")
    )

    @classmethod
    def created_at(cls) -> "DateTimeFields":
        return DateTimeFields("created_at")

    created_by: "InternalActorUnion" = InternalActorUnion("createdBy")

    @classmethod
    def updated_at(cls) -> "DateTimeFields":
        return DateTimeFields("updated_at")

    updated_by: "InternalActorUnion" = InternalActorUnion("updatedBy")

    def fields(
        self,
        *subfields: Union[
            WorkspaceSlackIntegrationGraphQLField,
            "DateTimeFields",
            "InternalActorUnion",
        ]
    ) -> "WorkspaceSlackIntegrationFields":
        """Subfields should come from the WorkspaceSlackIntegrationFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceSlackIntegrationFields":
        self._alias = alias
        return self


class WorkspaceSlackIntegrationConnectionFields(GraphQLField):
    @classmethod
    def edges(cls) -> "WorkspaceSlackIntegrationEdgeFields":
        return WorkspaceSlackIntegrationEdgeFields("edges")

    @classmethod
    def page_info(cls) -> "PageInfoFields":
        return PageInfoFields("page_info")

    def fields(
        self,
        *subfields: Union[
            WorkspaceSlackIntegrationConnectionGraphQLField,
            "PageInfoFields",
            "WorkspaceSlackIntegrationEdgeFields",
        ]
    ) -> "WorkspaceSlackIntegrationConnectionFields":
        """Subfields should come from the WorkspaceSlackIntegrationConnectionFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceSlackIntegrationConnectionFields":
        self._alias = alias
        return self


class WorkspaceSlackIntegrationEdgeFields(GraphQLField):
    cursor: "WorkspaceSlackIntegrationEdgeGraphQLField" = (
        WorkspaceSlackIntegrationEdgeGraphQLField("cursor")
    )

    @classmethod
    def node(cls) -> "WorkspaceSlackIntegrationFields":
        return WorkspaceSlackIntegrationFields("node")

    def fields(
        self,
        *subfields: Union[
            WorkspaceSlackIntegrationEdgeGraphQLField, "WorkspaceSlackIntegrationFields"
        ]
    ) -> "WorkspaceSlackIntegrationEdgeFields":
        """Subfields should come from the WorkspaceSlackIntegrationEdgeFields class"""
        self._subfields.extend(subfields)
        return self

    def alias(self, alias: str) -> "WorkspaceSlackIntegrationEdgeFields":
        self._alias = alias
        return self

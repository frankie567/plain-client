# Generated by ariadne-codegen
# Source: graphql/

from typing import Any, Dict, Optional, Union

from .add_customer_to_customer_groups import AddCustomerToCustomerGroups
from .add_customer_to_tenants import AddCustomerToTenants
from .add_labels import AddLabels
from .add_members_to_tier import AddMembersToTier
from .archive_label_type import ArchiveLabelType
from .assign_thread import AssignThread
from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .change_thread_priority import ChangeThreadPriority
from .companies import Companies
from .create_attachment_upload_url import CreateAttachmentUploadUrl
from .create_customer_card_config import CreateCustomerCardConfig
from .create_customer_event import CreateCustomerEvent
from .create_label_type import CreateLabelType
from .create_note import CreateNote
from .create_thread import CreateThread
from .create_thread_event import CreateThreadEvent
from .create_webhook_target import CreateWebhookTarget
from .customer_by_email import CustomerByEmail
from .customer_by_external_id import CustomerByExternalId
from .customer_by_id import CustomerById
from .customer_customer_groups import CustomerCustomerGroups
from .customer_group_by_id import CustomerGroupById
from .customer_groups import CustomerGroups
from .customer_tenants import CustomerTenants
from .customers import Customers
from .delete_customer import DeleteCustomer
from .delete_customer_card_config import DeleteCustomerCardConfig
from .delete_thread_field import DeleteThreadField
from .delete_webhook_target import DeleteWebhookTarget
from .index_document import IndexDocument
from .input_types import (
    AddCustomerToCustomerGroupsInput,
    AddCustomerToTenantsInput,
    AddLabelsInput,
    AddMembersToTierInput,
    ArchiveLabelTypeInput,
    AssignThreadInput,
    ChangeThreadPriorityInput,
    CompaniesSearchQuery,
    CreateAttachmentUploadUrlInput,
    CreateCustomerCardConfigInput,
    CreateCustomerEventInput,
    CreateIndexedDocumentInput,
    CreateLabelTypeInput,
    CreateNoteInput,
    CreateThreadEventInput,
    CreateThreadInput,
    CreateWebhookTargetInput,
    CustomerGroupMembershipsFilter,
    CustomersFilter,
    CustomersSort,
    DeleteCustomerCardConfigInput,
    DeleteCustomerInput,
    DeleteThreadFieldInput,
    DeleteWebhookTargetInput,
    LabelTypeFilter,
    MarkThreadAsDoneInput,
    MarkThreadAsTodoInput,
    RemoveCustomerFromCustomerGroupsInput,
    RemoveCustomerFromTenantsInput,
    RemoveLabelsInput,
    RemoveMembersFromTierInput,
    ReplyToEmailInput,
    ReplyToThreadInput,
    SendCustomerChatInput,
    SendNewEmailInput,
    SetCustomerTenantsInput,
    SnoozeThreadInput,
    TenantsSearchQuery,
    ThreadsFilter,
    ThreadsSort,
    UnassignThreadInput,
    UpdateCompanyTierInput,
    UpdateCustomerCardConfigInput,
    UpdateCustomerCompanyInput,
    UpdateTenantTierInput,
    UpdateThreadTenantInput,
    UpdateWebhookTargetInput,
    UpsertCompanyInput,
    UpsertCustomerInput,
    UpsertTenantInput,
    UpsertThreadFieldInput,
)
from .label_type import LabelType
from .label_types import LabelTypes
from .mark_thread_as_done import MarkThreadAsDone
from .mark_thread_as_todo import MarkThreadAsTodo
from .my_workspace import MyWorkspace
from .remove_customer_from_customer_groups import RemoveCustomerFromCustomerGroups
from .remove_customer_from_tenants import RemoveCustomerFromTenants
from .remove_labels import RemoveLabels
from .remove_members_from_tier import RemoveMembersFromTier
from .reply_to_email import ReplyToEmail
from .reply_to_thread import ReplyToThread
from .search_companies import SearchCompanies
from .search_tenants import SearchTenants
from .send_customer_chat import SendCustomerChat
from .send_new_email import SendNewEmail
from .set_customer_tenants import SetCustomerTenants
from .snooze_thread import SnoozeThread
from .tenant import Tenant
from .tenants import Tenants
from .thread import Thread
from .thread_by_external_id import ThreadByExternalId
from .threads import Threads
from .tier import Tier
from .tiers import Tiers
from .unassign_thread import UnassignThread
from .update_company_tier import UpdateCompanyTier
from .update_customer_card_config import UpdateCustomerCardConfig
from .update_customer_company import UpdateCustomerCompany
from .update_tenant_tier import UpdateTenantTier
from .update_thread_tenant import UpdateThreadTenant
from .update_webhook_target import UpdateWebhookTarget
from .upsert_company import UpsertCompany
from .upsert_customer import UpsertCustomer
from .upsert_tenant import UpsertTenant
from .upsert_thread_field import UpsertThreadField
from .user_by_email import UserByEmail
from .user_by_id import UserById
from .webhook_target import WebhookTarget
from .webhook_targets import WebhookTargets


def gql(q: str) -> str:
    return q


class Plain(AsyncBaseClient):
    async def add_customer_to_customer_groups(
        self, input: AddCustomerToCustomerGroupsInput, **kwargs: Any
    ) -> AddCustomerToCustomerGroups:
        query = gql(
            """
            mutation addCustomerToCustomerGroups($input: AddCustomerToCustomerGroupsInput!) {
              addCustomerToCustomerGroups(input: $input) {
                customerGroupMemberships {
                  ...CustomerGroupMembershipParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment CustomerGroupMembershipParts on CustomerGroupMembership {
              __typename
              customerId
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
              customerGroup {
                ...CustomerGroupParts
              }
            }

            fragment CustomerGroupParts on CustomerGroup {
              __typename
              id
              name
              key
              color
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="addCustomerToCustomerGroups",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddCustomerToCustomerGroups.model_validate(data)

    async def add_customer_to_tenants(
        self, input: AddCustomerToTenantsInput, **kwargs: Any
    ) -> AddCustomerToTenants:
        query = gql(
            """
            mutation addCustomerToTenants($input: AddCustomerToTenantsInput!) {
              addCustomerToTenants(input: $input) {
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="addCustomerToTenants",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddCustomerToTenants.model_validate(data)

    async def add_labels(self, input: AddLabelsInput, **kwargs: Any) -> AddLabels:
        query = gql(
            """
            mutation addLabels($input: AddLabelsInput!) {
              addLabels(input: $input) {
                labels {
                  ...LabelParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="addLabels", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AddLabels.model_validate(data)

    async def add_members_to_tier(
        self, input: AddMembersToTierInput, **kwargs: Any
    ) -> AddMembersToTier:
        query = gql(
            """
            mutation addMembersToTier($input: AddMembersToTierInput!) {
              addMembersToTier(input: $input) {
                memberships {
                  ...TierMembershipParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment CompanyTierMembershipParts on CompanyTierMembership {
              __typename
              id
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment TenantTierMembershipParts on TenantTierMembership {
              __typename
              id
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment TierMembershipParts on TierMembership {
              __typename
              ... on TenantTierMembership {
                ...TenantTierMembershipParts
              }
              ... on CompanyTierMembership {
                ...CompanyTierMembershipParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="addMembersToTier",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddMembersToTier.model_validate(data)

    async def archive_label_type(
        self, input: ArchiveLabelTypeInput, **kwargs: Any
    ) -> ArchiveLabelType:
        query = gql(
            """
            mutation archiveLabelType($input: ArchiveLabelTypeInput!) {
              archiveLabelType(input: $input) {
                labelType {
                  ...LabelTypeParts
                }
                error {
                  message
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="archiveLabelType",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ArchiveLabelType.model_validate(data)

    async def assign_thread(
        self, input: AssignThreadInput, **kwargs: Any
    ) -> AssignThread:
        query = gql(
            """
            mutation assignThread($input: AssignThreadInput!) {
              assignThread(input: $input) {
                thread {
                  ...ThreadParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MachineUserParts on MachineUser {
              __typename
              id
              fullName
              publicName
              description
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment SystemParts on System {
              __typename
              id
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadAssigneeParts on ThreadAssignee {
              ... on User {
                ...UserParts
              }
              ... on MachineUser {
                ...MachineUserParts
              }
              ... on System {
                ...SystemParts
              }
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadParts on Thread {
              __typename
              id
              externalId
              customer {
                id
              }
              status
              statusDetail {
                ...ThreadStatusDetailParts
              }
              statusChangedAt {
                ...DateTimeParts
              }
              title
              description
              previewText
              priority
              tenant {
                ...TenantParts
              }
              labels {
                ...LabelParts
              }
              threadFields {
                ...ThreadFieldParts
              }
              assignedAt {
                ...DateTimeParts
              }
              assignedTo {
                ...ThreadAssigneeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment ThreadStatusDetailParts on ThreadStatusDetail {
              ... on ThreadStatusDetailCreated {
                __typename
                createdAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailNewReply {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailInProgress {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadDiscussionResolved {
                __typename
                threadDiscussionId
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadLinkUpdated {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                linearIssueId
              }
              ... on ThreadStatusDetailWaitingForCustomer {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailWaitingForDuration {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                waitingUntil {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneManuallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneAutomaticallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                afterSeconds
              }
              ... on ThreadStatusDetailIgnored {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="assignThread", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AssignThread.model_validate(data)

    async def change_thread_priority(
        self, input: ChangeThreadPriorityInput, **kwargs: Any
    ) -> ChangeThreadPriority:
        query = gql(
            """
            mutation changeThreadPriority($input: ChangeThreadPriorityInput!) {
              changeThreadPriority(input: $input) {
                thread {
                  ...ThreadParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MachineUserParts on MachineUser {
              __typename
              id
              fullName
              publicName
              description
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment SystemParts on System {
              __typename
              id
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadAssigneeParts on ThreadAssignee {
              ... on User {
                ...UserParts
              }
              ... on MachineUser {
                ...MachineUserParts
              }
              ... on System {
                ...SystemParts
              }
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadParts on Thread {
              __typename
              id
              externalId
              customer {
                id
              }
              status
              statusDetail {
                ...ThreadStatusDetailParts
              }
              statusChangedAt {
                ...DateTimeParts
              }
              title
              description
              previewText
              priority
              tenant {
                ...TenantParts
              }
              labels {
                ...LabelParts
              }
              threadFields {
                ...ThreadFieldParts
              }
              assignedAt {
                ...DateTimeParts
              }
              assignedTo {
                ...ThreadAssigneeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment ThreadStatusDetailParts on ThreadStatusDetail {
              ... on ThreadStatusDetailCreated {
                __typename
                createdAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailNewReply {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailInProgress {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadDiscussionResolved {
                __typename
                threadDiscussionId
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadLinkUpdated {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                linearIssueId
              }
              ... on ThreadStatusDetailWaitingForCustomer {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailWaitingForDuration {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                waitingUntil {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneManuallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneAutomaticallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                afterSeconds
              }
              ... on ThreadStatusDetailIgnored {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="changeThreadPriority",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ChangeThreadPriority.model_validate(data)

    async def create_attachment_upload_url(
        self, input: CreateAttachmentUploadUrlInput, **kwargs: Any
    ) -> CreateAttachmentUploadUrl:
        query = gql(
            """
            mutation createAttachmentUploadUrl($input: CreateAttachmentUploadUrlInput!) {
              createAttachmentUploadUrl(input: $input) {
                attachmentUploadUrl {
                  ...AttachmentUploadUrlParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment AttachmentParts on Attachment {
              __typename
              id
              fileName
              fileSize {
                ...FileSizeParts
              }
              fileExtension
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment AttachmentUploadUrlParts on AttachmentUploadUrl {
              __typename
              attachment {
                ...AttachmentParts
              }
              uploadFormUrl
              uploadFormData {
                key
                value
              }
              expiresAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment FileSizeParts on FileSize {
              __typename
              kiloBytes
              megaBytes
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="createAttachmentUploadUrl",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAttachmentUploadUrl.model_validate(data)

    async def create_customer_card_config(
        self, input: CreateCustomerCardConfigInput, **kwargs: Any
    ) -> CreateCustomerCardConfig:
        query = gql(
            """
            mutation createCustomerCardConfig($input: CreateCustomerCardConfigInput!) {
              createCustomerCardConfig(input: $input) {
                customerCardConfig {
                  ...CustomerCardConfigParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment CustomerCardConfigParts on CustomerCardConfig {
              __typename
              id
              title
              key
              defaultTimeToLiveSeconds
              apiUrl
              order
              apiHeaders {
                name
                value
              }
              isEnabled
              createdAt {
                ...DateTimeParts
              }
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="createCustomerCardConfig",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateCustomerCardConfig.model_validate(data)

    async def create_customer_event(
        self, input: CreateCustomerEventInput, **kwargs: Any
    ) -> CreateCustomerEvent:
        query = gql(
            """
            mutation createCustomerEvent($input: CreateCustomerEventInput!) {
              createCustomerEvent(input: $input) {
                customerEvent {
                  ...CustomerEventParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment CustomerEventParts on CustomerEvent {
              __typename
              id
              customerId
              title
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="createCustomerEvent",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateCustomerEvent.model_validate(data)

    async def create_label_type(
        self, input: CreateLabelTypeInput, **kwargs: Any
    ) -> CreateLabelType:
        query = gql(
            """
            mutation createLabelType($input: CreateLabelTypeInput!) {
              createLabelType(input: $input) {
                labelType {
                  ...LabelTypeParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="createLabelType", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateLabelType.model_validate(data)

    async def create_note(self, input: CreateNoteInput, **kwargs: Any) -> CreateNote:
        query = gql(
            """
            mutation createNote($input: CreateNoteInput!) {
              createNote(input: $input) {
                note {
                  ...NoteParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment NoteParts on Note {
              __typename
              id
              markdown
              text
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="createNote", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateNote.model_validate(data)

    async def create_thread(
        self, input: CreateThreadInput, **kwargs: Any
    ) -> CreateThread:
        query = gql(
            """
            mutation createThread($input: CreateThreadInput!) {
              createThread(input: $input) {
                thread {
                  ...ThreadParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MachineUserParts on MachineUser {
              __typename
              id
              fullName
              publicName
              description
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment SystemParts on System {
              __typename
              id
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadAssigneeParts on ThreadAssignee {
              ... on User {
                ...UserParts
              }
              ... on MachineUser {
                ...MachineUserParts
              }
              ... on System {
                ...SystemParts
              }
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadParts on Thread {
              __typename
              id
              externalId
              customer {
                id
              }
              status
              statusDetail {
                ...ThreadStatusDetailParts
              }
              statusChangedAt {
                ...DateTimeParts
              }
              title
              description
              previewText
              priority
              tenant {
                ...TenantParts
              }
              labels {
                ...LabelParts
              }
              threadFields {
                ...ThreadFieldParts
              }
              assignedAt {
                ...DateTimeParts
              }
              assignedTo {
                ...ThreadAssigneeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment ThreadStatusDetailParts on ThreadStatusDetail {
              ... on ThreadStatusDetailCreated {
                __typename
                createdAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailNewReply {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailInProgress {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadDiscussionResolved {
                __typename
                threadDiscussionId
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadLinkUpdated {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                linearIssueId
              }
              ... on ThreadStatusDetailWaitingForCustomer {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailWaitingForDuration {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                waitingUntil {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneManuallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneAutomaticallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                afterSeconds
              }
              ... on ThreadStatusDetailIgnored {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="createThread", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateThread.model_validate(data)

    async def create_thread_event(
        self, input: CreateThreadEventInput, **kwargs: Any
    ) -> CreateThreadEvent:
        query = gql(
            """
            mutation createThreadEvent($input: CreateThreadEventInput!) {
              createThreadEvent(input: $input) {
                threadEvent {
                  ...ThreadEventParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment ThreadEventParts on ThreadEvent {
              id
              threadId
              title
              customerId
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="createThreadEvent",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateThreadEvent.model_validate(data)

    async def create_webhook_target(
        self, input: CreateWebhookTargetInput, **kwargs: Any
    ) -> CreateWebhookTarget:
        query = gql(
            """
            mutation createWebhookTarget($input: CreateWebhookTargetInput!) {
              createWebhookTarget(input: $input) {
                webhookTarget {
                  ...WebhookTargetParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment WebhookTargetEventSubscriptionParts on WebhookTargetEventSubscription {
              __typename
              eventType
            }

            fragment WebhookTargetParts on WebhookTarget {
              id
              url
              isEnabled
              description
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
              eventSubscriptions {
                ...WebhookTargetEventSubscriptionParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="createWebhookTarget",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateWebhookTarget.model_validate(data)

    async def delete_customer(
        self, input: DeleteCustomerInput, **kwargs: Any
    ) -> DeleteCustomer:
        query = gql(
            """
            mutation deleteCustomer($input: DeleteCustomerInput!) {
              deleteCustomer(input: $input) {
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="deleteCustomer", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteCustomer.model_validate(data)

    async def delete_customer_card_config(
        self, input: DeleteCustomerCardConfigInput, **kwargs: Any
    ) -> DeleteCustomerCardConfig:
        query = gql(
            """
            mutation deleteCustomerCardConfig($input: DeleteCustomerCardConfigInput!) {
              deleteCustomerCardConfig(input: $input) {
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="deleteCustomerCardConfig",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteCustomerCardConfig.model_validate(data)

    async def delete_thread_field(
        self, input: DeleteThreadFieldInput, **kwargs: Any
    ) -> DeleteThreadField:
        query = gql(
            """
            mutation deleteThreadField($input: DeleteThreadFieldInput!) {
              deleteThreadField(input: $input) {
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="deleteThreadField",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteThreadField.model_validate(data)

    async def delete_webhook_target(
        self, input: DeleteWebhookTargetInput, **kwargs: Any
    ) -> DeleteWebhookTarget:
        query = gql(
            """
            mutation deleteWebhookTarget($input: DeleteWebhookTargetInput!) {
              deleteWebhookTarget(input: $input) {
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="deleteWebhookTarget",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteWebhookTarget.model_validate(data)

    async def index_document(
        self, input: CreateIndexedDocumentInput, **kwargs: Any
    ) -> IndexDocument:
        query = gql(
            """
            mutation indexDocument($input: CreateIndexedDocumentInput!) {
              createIndexedDocument(input: $input) {
                indexedDocument {
                  ...IndexedDocumentParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment IndexedDocumentParts on IndexedDocument {
              __typename
              id
              url
              createdAt {
                ...DateTimeParts
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="indexDocument", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return IndexDocument.model_validate(data)

    async def mark_thread_as_done(
        self, input: MarkThreadAsDoneInput, **kwargs: Any
    ) -> MarkThreadAsDone:
        query = gql(
            """
            mutation markThreadAsDone($input: MarkThreadAsDoneInput!) {
              markThreadAsDone(input: $input) {
                thread {
                  ...ThreadParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MachineUserParts on MachineUser {
              __typename
              id
              fullName
              publicName
              description
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment SystemParts on System {
              __typename
              id
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadAssigneeParts on ThreadAssignee {
              ... on User {
                ...UserParts
              }
              ... on MachineUser {
                ...MachineUserParts
              }
              ... on System {
                ...SystemParts
              }
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadParts on Thread {
              __typename
              id
              externalId
              customer {
                id
              }
              status
              statusDetail {
                ...ThreadStatusDetailParts
              }
              statusChangedAt {
                ...DateTimeParts
              }
              title
              description
              previewText
              priority
              tenant {
                ...TenantParts
              }
              labels {
                ...LabelParts
              }
              threadFields {
                ...ThreadFieldParts
              }
              assignedAt {
                ...DateTimeParts
              }
              assignedTo {
                ...ThreadAssigneeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment ThreadStatusDetailParts on ThreadStatusDetail {
              ... on ThreadStatusDetailCreated {
                __typename
                createdAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailNewReply {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailInProgress {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadDiscussionResolved {
                __typename
                threadDiscussionId
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadLinkUpdated {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                linearIssueId
              }
              ... on ThreadStatusDetailWaitingForCustomer {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailWaitingForDuration {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                waitingUntil {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneManuallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneAutomaticallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                afterSeconds
              }
              ... on ThreadStatusDetailIgnored {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="markThreadAsDone",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return MarkThreadAsDone.model_validate(data)

    async def mark_thread_as_todo(
        self, input: MarkThreadAsTodoInput, **kwargs: Any
    ) -> MarkThreadAsTodo:
        query = gql(
            """
            mutation markThreadAsTodo($input: MarkThreadAsTodoInput!) {
              markThreadAsTodo(input: $input) {
                thread {
                  ...ThreadParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MachineUserParts on MachineUser {
              __typename
              id
              fullName
              publicName
              description
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment SystemParts on System {
              __typename
              id
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadAssigneeParts on ThreadAssignee {
              ... on User {
                ...UserParts
              }
              ... on MachineUser {
                ...MachineUserParts
              }
              ... on System {
                ...SystemParts
              }
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadParts on Thread {
              __typename
              id
              externalId
              customer {
                id
              }
              status
              statusDetail {
                ...ThreadStatusDetailParts
              }
              statusChangedAt {
                ...DateTimeParts
              }
              title
              description
              previewText
              priority
              tenant {
                ...TenantParts
              }
              labels {
                ...LabelParts
              }
              threadFields {
                ...ThreadFieldParts
              }
              assignedAt {
                ...DateTimeParts
              }
              assignedTo {
                ...ThreadAssigneeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment ThreadStatusDetailParts on ThreadStatusDetail {
              ... on ThreadStatusDetailCreated {
                __typename
                createdAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailNewReply {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailInProgress {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadDiscussionResolved {
                __typename
                threadDiscussionId
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadLinkUpdated {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                linearIssueId
              }
              ... on ThreadStatusDetailWaitingForCustomer {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailWaitingForDuration {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                waitingUntil {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneManuallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneAutomaticallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                afterSeconds
              }
              ... on ThreadStatusDetailIgnored {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="markThreadAsTodo",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return MarkThreadAsTodo.model_validate(data)

    async def remove_customer_from_customer_groups(
        self, input: RemoveCustomerFromCustomerGroupsInput, **kwargs: Any
    ) -> RemoveCustomerFromCustomerGroups:
        query = gql(
            """
            mutation removeCustomerFromCustomerGroups($input: RemoveCustomerFromCustomerGroupsInput!) {
              removeCustomerFromCustomerGroups(input: $input) {
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="removeCustomerFromCustomerGroups",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveCustomerFromCustomerGroups.model_validate(data)

    async def remove_customer_from_tenants(
        self, input: RemoveCustomerFromTenantsInput, **kwargs: Any
    ) -> RemoveCustomerFromTenants:
        query = gql(
            """
            mutation removeCustomerFromTenants($input: RemoveCustomerFromTenantsInput!) {
              removeCustomerFromTenants(input: $input) {
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="removeCustomerFromTenants",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveCustomerFromTenants.model_validate(data)

    async def remove_labels(
        self, input: RemoveLabelsInput, **kwargs: Any
    ) -> RemoveLabels:
        query = gql(
            """
            mutation removeLabels($input: RemoveLabelsInput!) {
              removeLabels(input: $input) {
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="removeLabels", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return RemoveLabels.model_validate(data)

    async def remove_members_from_tier(
        self, input: RemoveMembersFromTierInput, **kwargs: Any
    ) -> RemoveMembersFromTier:
        query = gql(
            """
            mutation removeMembersFromTier($input: RemoveMembersFromTierInput!) {
              removeMembersFromTier(input: $input) {
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="removeMembersFromTier",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveMembersFromTier.model_validate(data)

    async def reply_to_email(
        self, input: ReplyToEmailInput, **kwargs: Any
    ) -> ReplyToEmail:
        query = gql(
            """
            mutation replyToEmail($input: ReplyToEmailInput!) {
              replyToEmail(input: $input) {
                email {
                  ...EmailParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment AttachmentParts on Attachment {
              __typename
              id
              fileName
              fileSize {
                ...FileSizeParts
              }
              fileExtension
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment EmailActorParts on EmailActor {
              ... on CustomerEmailActor {
                __typename
                customerId
              }
              ... on UserEmailActor {
                __typename
                userId
              }
              ... on SupportEmailAddressEmailActor {
                __typename
                supportEmailAddress
              }
              ... on DeletedCustomerEmailActor {
                __typename
                customerId
              }
            }

            fragment EmailParticipantParts on EmailParticipant {
              __typename
              name
              email
              emailActor {
                ...EmailActorParts
              }
            }

            fragment EmailParts on Email {
              id
              inReplyToEmailId
              from {
                ...EmailParticipantParts
              }
              to {
                ...EmailParticipantParts
              }
              additionalRecipients {
                ...EmailParticipantParts
              }
              hiddenRecipients {
                ...EmailParticipantParts
              }
              subject
              textContent
              markdownContent
              createdAt {
                ...DateTimeParts
              }
              updatedAt {
                ...DateTimeParts
              }
              attachments {
                ...AttachmentParts
              }
            }

            fragment FileSizeParts on FileSize {
              __typename
              kiloBytes
              megaBytes
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="replyToEmail", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ReplyToEmail.model_validate(data)

    async def reply_to_thread(
        self, input: ReplyToThreadInput, **kwargs: Any
    ) -> ReplyToThread:
        query = gql(
            """
            mutation replyToThread($input: ReplyToThreadInput!) {
              replyToThread(input: $input) {
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="replyToThread", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ReplyToThread.model_validate(data)

    async def send_customer_chat(
        self, input: SendCustomerChatInput, **kwargs: Any
    ) -> SendCustomerChat:
        query = gql(
            """
            mutation sendCustomerChat($input: SendCustomerChatInput!) {
              sendCustomerChat(input: $input) {
                chat {
                  ...ChatParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ChatParts on Chat {
              id
              text
              attachments {
                id
              }
              createdAt {
                ...DateTimeParts
              }
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="sendCustomerChat",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SendCustomerChat.model_validate(data)

    async def send_new_email(
        self, input: SendNewEmailInput, **kwargs: Any
    ) -> SendNewEmail:
        query = gql(
            """
            mutation sendNewEmail($input: SendNewEmailInput!) {
              sendNewEmail(input: $input) {
                email {
                  ...EmailParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment AttachmentParts on Attachment {
              __typename
              id
              fileName
              fileSize {
                ...FileSizeParts
              }
              fileExtension
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment EmailActorParts on EmailActor {
              ... on CustomerEmailActor {
                __typename
                customerId
              }
              ... on UserEmailActor {
                __typename
                userId
              }
              ... on SupportEmailAddressEmailActor {
                __typename
                supportEmailAddress
              }
              ... on DeletedCustomerEmailActor {
                __typename
                customerId
              }
            }

            fragment EmailParticipantParts on EmailParticipant {
              __typename
              name
              email
              emailActor {
                ...EmailActorParts
              }
            }

            fragment EmailParts on Email {
              id
              inReplyToEmailId
              from {
                ...EmailParticipantParts
              }
              to {
                ...EmailParticipantParts
              }
              additionalRecipients {
                ...EmailParticipantParts
              }
              hiddenRecipients {
                ...EmailParticipantParts
              }
              subject
              textContent
              markdownContent
              createdAt {
                ...DateTimeParts
              }
              updatedAt {
                ...DateTimeParts
              }
              attachments {
                ...AttachmentParts
              }
            }

            fragment FileSizeParts on FileSize {
              __typename
              kiloBytes
              megaBytes
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="sendNewEmail", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SendNewEmail.model_validate(data)

    async def set_customer_tenants(
        self, input: SetCustomerTenantsInput, **kwargs: Any
    ) -> SetCustomerTenants:
        query = gql(
            """
            mutation setCustomerTenants($input: SetCustomerTenantsInput!) {
              setCustomerTenants(input: $input) {
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="setCustomerTenants",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SetCustomerTenants.model_validate(data)

    async def snooze_thread(
        self, input: SnoozeThreadInput, **kwargs: Any
    ) -> SnoozeThread:
        query = gql(
            """
            mutation snoozeThread($input: SnoozeThreadInput!) {
              snoozeThread(input: $input) {
                thread {
                  ...ThreadParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MachineUserParts on MachineUser {
              __typename
              id
              fullName
              publicName
              description
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment SystemParts on System {
              __typename
              id
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadAssigneeParts on ThreadAssignee {
              ... on User {
                ...UserParts
              }
              ... on MachineUser {
                ...MachineUserParts
              }
              ... on System {
                ...SystemParts
              }
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadParts on Thread {
              __typename
              id
              externalId
              customer {
                id
              }
              status
              statusDetail {
                ...ThreadStatusDetailParts
              }
              statusChangedAt {
                ...DateTimeParts
              }
              title
              description
              previewText
              priority
              tenant {
                ...TenantParts
              }
              labels {
                ...LabelParts
              }
              threadFields {
                ...ThreadFieldParts
              }
              assignedAt {
                ...DateTimeParts
              }
              assignedTo {
                ...ThreadAssigneeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment ThreadStatusDetailParts on ThreadStatusDetail {
              ... on ThreadStatusDetailCreated {
                __typename
                createdAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailNewReply {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailInProgress {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadDiscussionResolved {
                __typename
                threadDiscussionId
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadLinkUpdated {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                linearIssueId
              }
              ... on ThreadStatusDetailWaitingForCustomer {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailWaitingForDuration {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                waitingUntil {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneManuallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneAutomaticallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                afterSeconds
              }
              ... on ThreadStatusDetailIgnored {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="snoozeThread", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SnoozeThread.model_validate(data)

    async def unassign_thread(
        self, input: UnassignThreadInput, **kwargs: Any
    ) -> UnassignThread:
        query = gql(
            """
            mutation unassignThread($input: UnassignThreadInput!) {
              unassignThread(input: $input) {
                thread {
                  ...ThreadParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MachineUserParts on MachineUser {
              __typename
              id
              fullName
              publicName
              description
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment SystemParts on System {
              __typename
              id
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadAssigneeParts on ThreadAssignee {
              ... on User {
                ...UserParts
              }
              ... on MachineUser {
                ...MachineUserParts
              }
              ... on System {
                ...SystemParts
              }
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadParts on Thread {
              __typename
              id
              externalId
              customer {
                id
              }
              status
              statusDetail {
                ...ThreadStatusDetailParts
              }
              statusChangedAt {
                ...DateTimeParts
              }
              title
              description
              previewText
              priority
              tenant {
                ...TenantParts
              }
              labels {
                ...LabelParts
              }
              threadFields {
                ...ThreadFieldParts
              }
              assignedAt {
                ...DateTimeParts
              }
              assignedTo {
                ...ThreadAssigneeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment ThreadStatusDetailParts on ThreadStatusDetail {
              ... on ThreadStatusDetailCreated {
                __typename
                createdAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailNewReply {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailInProgress {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadDiscussionResolved {
                __typename
                threadDiscussionId
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadLinkUpdated {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                linearIssueId
              }
              ... on ThreadStatusDetailWaitingForCustomer {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailWaitingForDuration {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                waitingUntil {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneManuallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneAutomaticallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                afterSeconds
              }
              ... on ThreadStatusDetailIgnored {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="unassignThread", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UnassignThread.model_validate(data)

    async def update_company_tier(
        self, input: UpdateCompanyTierInput, **kwargs: Any
    ) -> UpdateCompanyTier:
        query = gql(
            """
            mutation updateCompanyTier($input: UpdateCompanyTierInput!) {
              updateCompanyTier(input: $input) {
                companyTierMembership {
                  ...CompanyTierMembershipParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment CompanyTierMembershipParts on CompanyTierMembership {
              __typename
              id
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="updateCompanyTier",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateCompanyTier.model_validate(data)

    async def update_customer_card_config(
        self, input: UpdateCustomerCardConfigInput, **kwargs: Any
    ) -> UpdateCustomerCardConfig:
        query = gql(
            """
            mutation updateCustomerCardConfig($input: UpdateCustomerCardConfigInput!) {
              updateCustomerCardConfig(input: $input) {
                customerCardConfig {
                  ...CustomerCardConfigParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment CustomerCardConfigParts on CustomerCardConfig {
              __typename
              id
              title
              key
              defaultTimeToLiveSeconds
              apiUrl
              order
              apiHeaders {
                name
                value
              }
              isEnabled
              createdAt {
                ...DateTimeParts
              }
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="updateCustomerCardConfig",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateCustomerCardConfig.model_validate(data)

    async def update_customer_company(
        self, input: UpdateCustomerCompanyInput, **kwargs: Any
    ) -> UpdateCustomerCompany:
        query = gql(
            """
            mutation updateCustomerCompany($input: UpdateCustomerCompanyInput!) {
              updateCustomerCompany(input: $input) {
                customer {
                  ...CustomerParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment CompanyParts on Company {
              __typename
              id
              name
              domainName
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment CustomerParts on Customer {
              __typename
              id
              fullName
              shortName
              externalId
              email {
                email
                isVerified
                verifiedAt {
                  ...DateTimeParts
                }
              }
              company {
                ...CompanyParts
              }
              updatedAt {
                ...DateTimeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              markedAsSpamAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="updateCustomerCompany",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateCustomerCompany.model_validate(data)

    async def update_tenant_tier(
        self, input: UpdateTenantTierInput, **kwargs: Any
    ) -> UpdateTenantTier:
        query = gql(
            """
            mutation updateTenantTier($input: UpdateTenantTierInput!) {
              updateTenantTier(input: $input) {
                tenantTierMembership {
                  ...TenantTierMembershipParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment TenantTierMembershipParts on TenantTierMembership {
              __typename
              id
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="updateTenantTier",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateTenantTier.model_validate(data)

    async def update_thread_tenant(
        self, input: UpdateThreadTenantInput, **kwargs: Any
    ) -> UpdateThreadTenant:
        query = gql(
            """
            mutation updateThreadTenant($input: UpdateThreadTenantInput!) {
              updateThreadTenant(input: $input) {
                thread {
                  ...ThreadParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MachineUserParts on MachineUser {
              __typename
              id
              fullName
              publicName
              description
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment SystemParts on System {
              __typename
              id
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadAssigneeParts on ThreadAssignee {
              ... on User {
                ...UserParts
              }
              ... on MachineUser {
                ...MachineUserParts
              }
              ... on System {
                ...SystemParts
              }
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadParts on Thread {
              __typename
              id
              externalId
              customer {
                id
              }
              status
              statusDetail {
                ...ThreadStatusDetailParts
              }
              statusChangedAt {
                ...DateTimeParts
              }
              title
              description
              previewText
              priority
              tenant {
                ...TenantParts
              }
              labels {
                ...LabelParts
              }
              threadFields {
                ...ThreadFieldParts
              }
              assignedAt {
                ...DateTimeParts
              }
              assignedTo {
                ...ThreadAssigneeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment ThreadStatusDetailParts on ThreadStatusDetail {
              ... on ThreadStatusDetailCreated {
                __typename
                createdAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailNewReply {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailInProgress {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadDiscussionResolved {
                __typename
                threadDiscussionId
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadLinkUpdated {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                linearIssueId
              }
              ... on ThreadStatusDetailWaitingForCustomer {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailWaitingForDuration {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                waitingUntil {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneManuallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneAutomaticallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                afterSeconds
              }
              ... on ThreadStatusDetailIgnored {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="updateThreadTenant",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateThreadTenant.model_validate(data)

    async def update_webhook_target(
        self, input: UpdateWebhookTargetInput, **kwargs: Any
    ) -> UpdateWebhookTarget:
        query = gql(
            """
            mutation updateWebhookTarget($input: UpdateWebhookTargetInput!) {
              updateWebhookTarget(input: $input) {
                webhookTarget {
                  ...WebhookTargetParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment WebhookTargetEventSubscriptionParts on WebhookTargetEventSubscription {
              __typename
              eventType
            }

            fragment WebhookTargetParts on WebhookTarget {
              id
              url
              isEnabled
              description
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
              eventSubscriptions {
                ...WebhookTargetEventSubscriptionParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="updateWebhookTarget",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateWebhookTarget.model_validate(data)

    async def upsert_company(
        self, input: UpsertCompanyInput, **kwargs: Any
    ) -> UpsertCompany:
        query = gql(
            """
            mutation upsertCompany($input: UpsertCompanyInput!) {
              upsertCompany(input: $input) {
                company {
                  ...CompanyParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment CompanyParts on Company {
              __typename
              id
              name
              domainName
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="upsertCompany", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpsertCompany.model_validate(data)

    async def upsert_customer(
        self, input: UpsertCustomerInput, **kwargs: Any
    ) -> UpsertCustomer:
        query = gql(
            """
            mutation upsertCustomer($input: UpsertCustomerInput!) {
              upsertCustomer(input: $input) {
                result
                customer {
                  ...CustomerParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment CompanyParts on Company {
              __typename
              id
              name
              domainName
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment CustomerParts on Customer {
              __typename
              id
              fullName
              shortName
              externalId
              email {
                email
                isVerified
                verifiedAt {
                  ...DateTimeParts
                }
              }
              company {
                ...CompanyParts
              }
              updatedAt {
                ...DateTimeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              markedAsSpamAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="upsertCustomer", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpsertCustomer.model_validate(data)

    async def upsert_tenant(
        self, input: UpsertTenantInput, **kwargs: Any
    ) -> UpsertTenant:
        query = gql(
            """
            mutation upsertTenant($input: UpsertTenantInput!) {
              upsertTenant(input: $input) {
                tenant {
                  ...TenantParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="upsertTenant", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpsertTenant.model_validate(data)

    async def upsert_thread_field(
        self, input: UpsertThreadFieldInput, **kwargs: Any
    ) -> UpsertThreadField:
        query = gql(
            """
            mutation upsertThreadField($input: UpsertThreadFieldInput!) {
              upsertThreadField(input: $input) {
                result
                threadField {
                  ...ThreadFieldParts
                }
                error {
                  ...MutationErrorParts
                }
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MutationErrorParts on MutationError {
              __typename
              message
              type
              code
              fields {
                field
                message
                type
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="upsertThreadField",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpsertThreadField.model_validate(data)

    async def companies(
        self,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Companies:
        query = gql(
            """
            query companies($first: Int, $after: String, $last: Int, $before: String) {
              companies(first: $first, after: $after, last: $last, before: $before) {
                edges {
                  cursor
                  node {
                    ...CompanyParts
                  }
                }
                pageInfo {
                  ...PageInfoParts
                }
              }
            }

            fragment CompanyParts on Company {
              __typename
              id
              name
              domainName
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {
            "first": first,
            "after": after,
            "last": last,
            "before": before,
        }
        response = await self.execute(
            query=query, operation_name="companies", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Companies.model_validate(data)

    async def customer_by_email(self, email: str, **kwargs: Any) -> CustomerByEmail:
        query = gql(
            """
            query customerByEmail($email: String!) {
              customerByEmail(email: $email) {
                ...CustomerParts
              }
            }

            fragment CompanyParts on Company {
              __typename
              id
              name
              domainName
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment CustomerParts on Customer {
              __typename
              id
              fullName
              shortName
              externalId
              email {
                email
                isVerified
                verifiedAt {
                  ...DateTimeParts
                }
              }
              company {
                ...CompanyParts
              }
              updatedAt {
                ...DateTimeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              markedAsSpamAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"email": email}
        response = await self.execute(
            query=query, operation_name="customerByEmail", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CustomerByEmail.model_validate(data)

    async def customer_by_external_id(
        self, external_id: str, **kwargs: Any
    ) -> CustomerByExternalId:
        query = gql(
            """
            query customerByExternalId($externalId: ID!) {
              customerByExternalId(externalId: $externalId) {
                ...CustomerParts
              }
            }

            fragment CompanyParts on Company {
              __typename
              id
              name
              domainName
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment CustomerParts on Customer {
              __typename
              id
              fullName
              shortName
              externalId
              email {
                email
                isVerified
                verifiedAt {
                  ...DateTimeParts
                }
              }
              company {
                ...CompanyParts
              }
              updatedAt {
                ...DateTimeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              markedAsSpamAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"externalId": external_id}
        response = await self.execute(
            query=query,
            operation_name="customerByExternalId",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CustomerByExternalId.model_validate(data)

    async def customer_by_id(self, customer_id: str, **kwargs: Any) -> CustomerById:
        query = gql(
            """
            query customerById($customerId: ID!) {
              customer(customerId: $customerId) {
                ...CustomerParts
              }
            }

            fragment CompanyParts on Company {
              __typename
              id
              name
              domainName
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment CustomerParts on Customer {
              __typename
              id
              fullName
              shortName
              externalId
              email {
                email
                isVerified
                verifiedAt {
                  ...DateTimeParts
                }
              }
              company {
                ...CompanyParts
              }
              updatedAt {
                ...DateTimeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              markedAsSpamAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"customerId": customer_id}
        response = await self.execute(
            query=query, operation_name="customerById", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CustomerById.model_validate(data)

    async def customer_customer_groups(
        self,
        customer_id: str,
        filters: Union[Optional[CustomerGroupMembershipsFilter], UnsetType] = UNSET,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CustomerCustomerGroups:
        query = gql(
            """
            query customerCustomerGroups($customerId: ID!, $filters: CustomerGroupMembershipsFilter, $first: Int, $after: String, $last: Int, $before: String) {
              customer(customerId: $customerId) {
                customerGroupMemberships(
                  filters: $filters
                  first: $first
                  after: $after
                  last: $last
                  before: $before
                ) {
                  edges {
                    node {
                      ...CustomerGroupMembershipParts
                    }
                  }
                  pageInfo {
                    ...PageInfoParts
                  }
                }
              }
            }

            fragment CustomerGroupMembershipParts on CustomerGroupMembership {
              __typename
              customerId
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
              customerGroup {
                ...CustomerGroupParts
              }
            }

            fragment CustomerGroupParts on CustomerGroup {
              __typename
              id
              name
              key
              color
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {
            "customerId": customer_id,
            "filters": filters,
            "first": first,
            "after": after,
            "last": last,
            "before": before,
        }
        response = await self.execute(
            query=query,
            operation_name="customerCustomerGroups",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CustomerCustomerGroups.model_validate(data)

    async def customer_group_by_id(
        self, customer_group_id: str, **kwargs: Any
    ) -> CustomerGroupById:
        query = gql(
            """
            query customerGroupById($customerGroupId: ID!) {
              customerGroup(customerGroupId: $customerGroupId) {
                ...CustomerGroupParts
              }
            }

            fragment CustomerGroupParts on CustomerGroup {
              __typename
              id
              name
              key
              color
            }
            """
        )
        variables: Dict[str, object] = {"customerGroupId": customer_group_id}
        response = await self.execute(
            query=query,
            operation_name="customerGroupById",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CustomerGroupById.model_validate(data)

    async def customer_groups(
        self,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CustomerGroups:
        query = gql(
            """
            query customerGroups($first: Int, $after: String, $before: String, $last: Int) {
              customerGroups(first: $first, after: $after, before: $before, last: $last) {
                edges {
                  node {
                    ...CustomerGroupParts
                  }
                }
                pageInfo {
                  ...PageInfoParts
                }
              }
            }

            fragment CustomerGroupParts on CustomerGroup {
              __typename
              id
              name
              key
              color
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }
            """
        )
        variables: Dict[str, object] = {
            "first": first,
            "after": after,
            "before": before,
            "last": last,
        }
        response = await self.execute(
            query=query, operation_name="customerGroups", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CustomerGroups.model_validate(data)

    async def customer_tenants(
        self,
        customer_id: str,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CustomerTenants:
        query = gql(
            """
            query customerTenants($customerId: ID!, $first: Int, $after: String, $last: Int, $before: String) {
              customer(customerId: $customerId) {
                tenantMemberships(first: $first, after: $after, last: $last, before: $before) {
                  edges {
                    node {
                      ...CustomerTenantMembershipParts
                    }
                  }
                  pageInfo {
                    ...PageInfoParts
                  }
                }
              }
            }

            fragment CustomerTenantMembershipParts on CustomerTenantMembership {
              __typename
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
              tenant {
                ...TenantParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {
            "customerId": customer_id,
            "first": first,
            "after": after,
            "last": last,
            "before": before,
        }
        response = await self.execute(
            query=query, operation_name="customerTenants", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CustomerTenants.model_validate(data)

    async def customers(
        self,
        filters: Union[Optional[CustomersFilter], UnsetType] = UNSET,
        sort_by: Union[Optional[CustomersSort], UnsetType] = UNSET,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Customers:
        query = gql(
            """
            query customers($filters: CustomersFilter, $sortBy: CustomersSort, $first: Int, $after: String, $last: Int, $before: String) {
              customers(
                filters: $filters
                sortBy: $sortBy
                first: $first
                after: $after
                last: $last
                before: $before
              ) {
                edges {
                  node {
                    ...CustomerParts
                  }
                }
                pageInfo {
                  ...PageInfoParts
                }
                totalCount
              }
            }

            fragment CompanyParts on Company {
              __typename
              id
              name
              domainName
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment CustomerParts on Customer {
              __typename
              id
              fullName
              shortName
              externalId
              email {
                email
                isVerified
                verifiedAt {
                  ...DateTimeParts
                }
              }
              company {
                ...CompanyParts
              }
              updatedAt {
                ...DateTimeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              markedAsSpamAt {
                ...DateTimeParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {
            "filters": filters,
            "sortBy": sort_by,
            "first": first,
            "after": after,
            "last": last,
            "before": before,
        }
        response = await self.execute(
            query=query, operation_name="customers", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Customers.model_validate(data)

    async def label_type(self, label_type_id: str, **kwargs: Any) -> LabelType:
        query = gql(
            """
            query labelType($labelTypeId: ID!) {
              labelType(labelTypeId: $labelTypeId) {
                ...LabelTypeParts
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"labelTypeId": label_type_id}
        response = await self.execute(
            query=query, operation_name="labelType", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return LabelType.model_validate(data)

    async def label_types(
        self,
        filters: Union[Optional[LabelTypeFilter], UnsetType] = UNSET,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> LabelTypes:
        query = gql(
            """
            query labelTypes($filters: LabelTypeFilter, $first: Int, $after: String, $last: Int, $before: String) {
              labelTypes(
                filters: $filters
                first: $first
                after: $after
                last: $last
                before: $before
              ) {
                edges {
                  cursor
                  node {
                    ...LabelTypeParts
                  }
                }
                pageInfo {
                  ...PageInfoParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {
            "filters": filters,
            "first": first,
            "after": after,
            "last": last,
            "before": before,
        }
        response = await self.execute(
            query=query, operation_name="labelTypes", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return LabelTypes.model_validate(data)

    async def my_workspace(self, **kwargs: Any) -> MyWorkspace:
        query = gql(
            """
            query myWorkspace {
              myWorkspace {
                ...WorkspaceParts
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment WorkspaceParts on Workspace {
              __typename
              id
              name
              publicName
              isDemoWorkspace
              createdBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="myWorkspace", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return MyWorkspace.model_validate(data)

    async def search_companies(
        self,
        search_query: CompaniesSearchQuery,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SearchCompanies:
        query = gql(
            """
            query searchCompanies($searchQuery: CompaniesSearchQuery!, $first: Int, $after: String, $last: Int, $before: String) {
              searchCompanies(
                searchQuery: $searchQuery
                first: $first
                after: $after
                last: $last
                before: $before
              ) {
                edges {
                  cursor
                  node {
                    company {
                      ...CompanyParts
                    }
                  }
                }
                pageInfo {
                  ...PageInfoParts
                }
              }
            }

            fragment CompanyParts on Company {
              __typename
              id
              name
              domainName
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {
            "searchQuery": search_query,
            "first": first,
            "after": after,
            "last": last,
            "before": before,
        }
        response = await self.execute(
            query=query, operation_name="searchCompanies", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SearchCompanies.model_validate(data)

    async def search_tenants(
        self,
        search_query: TenantsSearchQuery,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> SearchTenants:
        query = gql(
            """
            query searchTenants($searchQuery: TenantsSearchQuery!, $first: Int, $after: String, $last: Int, $before: String) {
              searchTenants(
                searchQuery: $searchQuery
                first: $first
                after: $after
                last: $last
                before: $before
              ) {
                edges {
                  cursor
                  node {
                    tenant {
                      ...TenantParts
                    }
                  }
                }
                pageInfo {
                  ...PageInfoParts
                }
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {
            "searchQuery": search_query,
            "first": first,
            "after": after,
            "last": last,
            "before": before,
        }
        response = await self.execute(
            query=query, operation_name="searchTenants", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return SearchTenants.model_validate(data)

    async def tenant(self, tenant_id: str, **kwargs: Any) -> Tenant:
        query = gql(
            """
            query tenant($tenantId: ID!) {
              tenant(tenantId: $tenantId) {
                ...TenantParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"tenantId": tenant_id}
        response = await self.execute(
            query=query, operation_name="tenant", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Tenant.model_validate(data)

    async def tenants(
        self,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Tenants:
        query = gql(
            """
            query tenants($first: Int, $after: String, $last: Int, $before: String) {
              tenants(first: $first, after: $after, last: $last, before: $before) {
                edges {
                  cursor
                  node {
                    ...TenantParts
                  }
                }
                pageInfo {
                  ...PageInfoParts
                }
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {
            "first": first,
            "after": after,
            "last": last,
            "before": before,
        }
        response = await self.execute(
            query=query, operation_name="tenants", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Tenants.model_validate(data)

    async def thread(self, thread_id: str, **kwargs: Any) -> Thread:
        query = gql(
            """
            query thread($threadId: ID!) {
              thread(threadId: $threadId) {
                ...ThreadParts
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MachineUserParts on MachineUser {
              __typename
              id
              fullName
              publicName
              description
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment SystemParts on System {
              __typename
              id
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadAssigneeParts on ThreadAssignee {
              ... on User {
                ...UserParts
              }
              ... on MachineUser {
                ...MachineUserParts
              }
              ... on System {
                ...SystemParts
              }
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadParts on Thread {
              __typename
              id
              externalId
              customer {
                id
              }
              status
              statusDetail {
                ...ThreadStatusDetailParts
              }
              statusChangedAt {
                ...DateTimeParts
              }
              title
              description
              previewText
              priority
              tenant {
                ...TenantParts
              }
              labels {
                ...LabelParts
              }
              threadFields {
                ...ThreadFieldParts
              }
              assignedAt {
                ...DateTimeParts
              }
              assignedTo {
                ...ThreadAssigneeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment ThreadStatusDetailParts on ThreadStatusDetail {
              ... on ThreadStatusDetailCreated {
                __typename
                createdAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailNewReply {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailInProgress {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadDiscussionResolved {
                __typename
                threadDiscussionId
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadLinkUpdated {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                linearIssueId
              }
              ... on ThreadStatusDetailWaitingForCustomer {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailWaitingForDuration {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                waitingUntil {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneManuallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneAutomaticallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                afterSeconds
              }
              ... on ThreadStatusDetailIgnored {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"threadId": thread_id}
        response = await self.execute(
            query=query, operation_name="thread", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Thread.model_validate(data)

    async def thread_by_external_id(
        self, customer_id: str, external_id: str, **kwargs: Any
    ) -> ThreadByExternalId:
        query = gql(
            """
            query threadByExternalId($customerId: ID!, $externalId: ID!) {
              threadByExternalId(customerId: $customerId, externalId: $externalId) {
                ...ThreadParts
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MachineUserParts on MachineUser {
              __typename
              id
              fullName
              publicName
              description
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment SystemParts on System {
              __typename
              id
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadAssigneeParts on ThreadAssignee {
              ... on User {
                ...UserParts
              }
              ... on MachineUser {
                ...MachineUserParts
              }
              ... on System {
                ...SystemParts
              }
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadParts on Thread {
              __typename
              id
              externalId
              customer {
                id
              }
              status
              statusDetail {
                ...ThreadStatusDetailParts
              }
              statusChangedAt {
                ...DateTimeParts
              }
              title
              description
              previewText
              priority
              tenant {
                ...TenantParts
              }
              labels {
                ...LabelParts
              }
              threadFields {
                ...ThreadFieldParts
              }
              assignedAt {
                ...DateTimeParts
              }
              assignedTo {
                ...ThreadAssigneeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment ThreadStatusDetailParts on ThreadStatusDetail {
              ... on ThreadStatusDetailCreated {
                __typename
                createdAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailNewReply {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailInProgress {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadDiscussionResolved {
                __typename
                threadDiscussionId
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadLinkUpdated {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                linearIssueId
              }
              ... on ThreadStatusDetailWaitingForCustomer {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailWaitingForDuration {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                waitingUntil {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneManuallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneAutomaticallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                afterSeconds
              }
              ... on ThreadStatusDetailIgnored {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "customerId": customer_id,
            "externalId": external_id,
        }
        response = await self.execute(
            query=query,
            operation_name="threadByExternalId",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ThreadByExternalId.model_validate(data)

    async def threads(
        self,
        filters: Union[Optional[ThreadsFilter], UnsetType] = UNSET,
        sort_by: Union[Optional[ThreadsSort], UnsetType] = UNSET,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Threads:
        query = gql(
            """
            query threads($filters: ThreadsFilter, $sortBy: ThreadsSort, $first: Int, $after: String, $last: Int, $before: String) {
              threads(
                filters: $filters
                sortBy: $sortBy
                first: $first
                after: $after
                last: $last
                before: $before
              ) {
                edges {
                  cursor
                  node {
                    ...ThreadParts
                  }
                }
                pageInfo {
                  ...PageInfoParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment LabelParts on Label {
              __typename
              id
              labelType {
                ...LabelTypeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment LabelTypeParts on LabelType {
              __typename
              id
              name
              icon
              isArchived
              archivedAt {
                ...DateTimeParts
              }
              archivedBy {
                ...ActorParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment MachineUserParts on MachineUser {
              __typename
              id
              fullName
              publicName
              description
              updatedAt {
                ...DateTimeParts
              }
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment SystemParts on System {
              __typename
              id
            }

            fragment TenantParts on Tenant {
              __typename
              id
              name
              externalId
              url
              tier {
                ...TierParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadAssigneeParts on ThreadAssignee {
              ... on User {
                ...UserParts
              }
              ... on MachineUser {
                ...MachineUserParts
              }
              ... on System {
                ...SystemParts
              }
            }

            fragment ThreadFieldParts on ThreadField {
              __typename
              id
              key
              type
              threadId
              stringValue
              booleanValue
              isAiGenerated
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment ThreadParts on Thread {
              __typename
              id
              externalId
              customer {
                id
              }
              status
              statusDetail {
                ...ThreadStatusDetailParts
              }
              statusChangedAt {
                ...DateTimeParts
              }
              title
              description
              previewText
              priority
              tenant {
                ...TenantParts
              }
              labels {
                ...LabelParts
              }
              threadFields {
                ...ThreadFieldParts
              }
              assignedAt {
                ...DateTimeParts
              }
              assignedTo {
                ...ThreadAssigneeParts
              }
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
            }

            fragment ThreadStatusDetailParts on ThreadStatusDetail {
              ... on ThreadStatusDetailCreated {
                __typename
                createdAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailNewReply {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailInProgress {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadDiscussionResolved {
                __typename
                threadDiscussionId
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailThreadLinkUpdated {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                linearIssueId
              }
              ... on ThreadStatusDetailWaitingForCustomer {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailWaitingForDuration {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                waitingUntil {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneManuallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
              ... on ThreadStatusDetailDoneAutomaticallySet {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
                afterSeconds
              }
              ... on ThreadStatusDetailIgnored {
                __typename
                statusChangedAt {
                  ...DateTimeParts
                }
              }
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "filters": filters,
            "sortBy": sort_by,
            "first": first,
            "after": after,
            "last": last,
            "before": before,
        }
        response = await self.execute(
            query=query, operation_name="threads", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Threads.model_validate(data)

    async def tier(self, tier_id: str, **kwargs: Any) -> Tier:
        query = gql(
            """
            query tier($tierId: ID!) {
              tier(tierId: $tierId) {
                ...TierParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {"tierId": tier_id}
        response = await self.execute(
            query=query, operation_name="tier", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Tier.model_validate(data)

    async def tiers(
        self,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Tiers:
        query = gql(
            """
            query tiers($first: Int, $after: String, $last: Int, $before: String) {
              tiers(first: $first, after: $after, last: $last, before: $before) {
                edges {
                  cursor
                  node {
                    ...TierParts
                  }
                }
                pageInfo {
                  ...PageInfoParts
                }
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment InternalActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment TierParts on Tier {
              __typename
              id
              name
              externalId
              defaultThreadPriority
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...InternalActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...InternalActorParts
              }
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }
            """
        )
        variables: Dict[str, object] = {
            "first": first,
            "after": after,
            "last": last,
            "before": before,
        }
        response = await self.execute(
            query=query, operation_name="tiers", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Tiers.model_validate(data)

    async def user_by_email(self, email: str, **kwargs: Any) -> UserByEmail:
        query = gql(
            """
            query userByEmail($email: String!) {
              userByEmail(email: $email) {
                ...UserParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"email": email}
        response = await self.execute(
            query=query, operation_name="userByEmail", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UserByEmail.model_validate(data)

    async def user_by_id(self, id: str, **kwargs: Any) -> UserById:
        query = gql(
            """
            query userById($id: ID!) {
              userById: user(userId: $id) {
                ...UserParts
              }
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment UserParts on User {
              __typename
              id
              fullName
              publicName
              slackIdentities {
                slackTeamId
                slackUserId
              }
              email
              updatedAt {
                ...DateTimeParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="userById", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UserById.model_validate(data)

    async def webhook_target(self, id: str, **kwargs: Any) -> WebhookTarget:
        query = gql(
            """
            query webhookTarget($id: ID!) {
              webhookTarget(webhookTargetId: $id) {
                ...WebhookTargetParts
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment WebhookTargetEventSubscriptionParts on WebhookTargetEventSubscription {
              __typename
              eventType
            }

            fragment WebhookTargetParts on WebhookTarget {
              id
              url
              isEnabled
              description
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
              eventSubscriptions {
                ...WebhookTargetEventSubscriptionParts
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="webhookTarget", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return WebhookTarget.model_validate(data)

    async def webhook_targets(
        self,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        last: Union[Optional[int], UnsetType] = UNSET,
        before: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> WebhookTargets:
        query = gql(
            """
            query webhookTargets($first: Int, $after: String, $last: Int, $before: String) {
              webhookTargets(first: $first, after: $after, last: $last, before: $before) {
                edges {
                  cursor
                  node {
                    ...WebhookTargetParts
                  }
                }
                pageInfo {
                  ...PageInfoParts
                }
              }
            }

            fragment ActorParts on Actor {
              ... on UserActor {
                ...UserActorParts
              }
              ... on CustomerActor {
                ...CustomerActorParts
              }
              ... on SystemActor {
                ...SystemActorParts
              }
              ... on MachineUserActor {
                ...MachineUserActorParts
              }
              ... on DeletedCustomerActor {
                ...DeletedCustomerActorParts
              }
            }

            fragment CustomerActorParts on CustomerActor {
              __typename
              customerId
            }

            fragment DateTimeParts on DateTime {
              __typename
              iso8601
              unixTimestamp
            }

            fragment DeletedCustomerActorParts on DeletedCustomerActor {
              __typename
              customerId
            }

            fragment MachineUserActorParts on MachineUserActor {
              __typename
              machineUserId
            }

            fragment PageInfoParts on PageInfo {
              hasNextPage
              hasPreviousPage
              startCursor
              endCursor
            }

            fragment SystemActorParts on SystemActor {
              __typename
              systemId
            }

            fragment UserActorParts on UserActor {
              __typename
              userId
            }

            fragment WebhookTargetEventSubscriptionParts on WebhookTargetEventSubscription {
              __typename
              eventType
            }

            fragment WebhookTargetParts on WebhookTarget {
              id
              url
              isEnabled
              description
              createdAt {
                ...DateTimeParts
              }
              createdBy {
                ...ActorParts
              }
              updatedAt {
                ...DateTimeParts
              }
              updatedBy {
                ...ActorParts
              }
              eventSubscriptions {
                ...WebhookTargetEventSubscriptionParts
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "first": first,
            "after": after,
            "last": last,
            "before": before,
        }
        response = await self.execute(
            query=query, operation_name="webhookTargets", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return WebhookTargets.model_validate(data)
